<?xml version="1.0"?>
<doc>
    <assembly>
        <name>G.Controls</name>
    </assembly>
    <members>
        <member name="T:G.Controls.GDockPanel.GNode">
            <summary>
            Base of GSplit, GContentNode (GPanel and GTab) and GDummyNode.
            </summary>
        </member>
        <member name="P:G.Controls.GDockPanel.GNode.IsDocked">
            <summary>
            Returns true if is docked in main window or in a floating tab.
            <seealso cref="M:G.Controls.GDockPanel.GContentNode.IsDockedOn(System.Windows.Forms.Control)"/>.
            </summary>
        </member>
        <member name="T:G.Controls.GDockPanel.GContentNode">
            <summary>
            Base of GPanel and GTab.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GContentNode.HitTestCaption(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Returns true if x/y is in caption and this is visible and is a child of parent.
            For tabbed GPanel returns true only if x/y is in its tab button, unless there are no visible siblings.
            For GTab returns true even if on a tab button.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GContentNode.Show">
            <summary>
            Shows in the most recent visible state. Activates tab group panel.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GContentNode.Hide">
            <summary>
            Hides, does not close.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GContentNode.DockBy(G.Controls.GDockPanel.GContentNode,G.Controls.GDockPanel.GDockHow)">
            <summary>
            Docks this GPanel or GTab in an existing or new GTab or GSplit.
            If need, creates new GTab or GSplit in gcTarget place and adds gcTarget and this to it. Else reorders if need.
            This can be a new GPanel, with null ParentSplit and ParentTab, dock state not Docked.
            </summary>
            <param name="gcTarget">New sibling GPanel (side can be any) or sibling GTab (when side is SplitX) or parent GTab (when side is TabX).</param>
            <param name="side">Specifies whether to add on a GTab or GSplit, and at which side of gcTarget.</param>
        </member>
        <member name="T:G.Controls.GDockPanel.GFloat">
            <summary>
            Floating parent form of a GPanel.
            </summary>
        </member>
        <member name="P:G.Controls.GDockPanel.GFloat.ShowWithoutActivation">
            <summary>
            1. Prevents activating window when showing. 2. Allows to show ToolTip for inactive window.
            </summary>
        </member>
        <member name="T:G.Controls.GDockPanel.GFloat._DockIndicator">
            <summary>
            Calculates and shows transparent rectangles where the floating panel can be docked when dragging it.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GFloat._DockIndicator._OnFloatMoved(Catkeys.POINT,Catkeys.RECT@,Catkeys.RECT@)">
            <summary>
            Everything is in _manager client area.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GFloat._DockIndicator._CalcDockRectPart(Catkeys.RECT,Catkeys.POINT)">
            <summary>
            Returns the left, top, right or bottom half of r, depending on where p is in it.
            Sets _target.side.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GFloat._DockIndicator._CalcNewTabButtonRectInFullCaption(G.Controls.GDockPanel.GPanel,Catkeys.RECT,Catkeys.POINT)">
            <summary>
            Returns a half of r (gp full caption, not just tab button), depending on where p is (even if not in r).
            Sets _target.side.
            </summary>
        </member>
        <member name="T:G.Controls.GDockPanel.GFloat.DockTarget">
            <summary>
            GFloat.Drag() and _DockIndicator.OnFloatDropped() return this if can be docked.
            </summary>
        </member>
        <member name="F:G.Controls.GDockPanel.GFloat.DockTarget.gc">
            <summary>
            The target.
            Note: when dockAsTab is true, it currently may be tabbed or not; if tabbed, may be docked or not.
            </summary>
        </member>
        <member name="F:G.Controls.GDockPanel.GFloat.DockTarget.side">
            <summary>Specifies whether to add on a GTab or GSplit, and at which side of gc.</summary>
        </member>
        <member name="T:G.Controls.GDockPanel.GPanel">
            <summary>
            Contains single Control.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GPanel.#ctor(G.Controls.GDockPanel,G.Controls.GDockPanel.GSplit,System.Xml.Linq.XElement,G.Controls.GDockPanel.GTab)">
            <summary>
            This ctor is used at startup, when adding from XML.
            </summary>
        </member>
        <member name="P:G.Controls.GDockPanel.GPanel.Visible">
            <summary>
            note: this is not just !IsHidden. Returns false if in a hidden tab group even if IsHidden is false.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GPanel._IsVisible(System.Boolean)">
            <summary>
            Returns true if this isn't hidden and isn't in a hidden tab group.
            </summary>
            <param name="andContentVisible">And isn't an inactive tab.</param>
        </member>
        <member name="P:G.Controls.GDockPanel.IPanel.Content">
            <summary>
            The child Control.
            </summary>
        </member>
        <member name="P:G.Controls.GDockPanel.IPanel.Text">
            <summary>
            Panel caption text. Also tab button text.
            If null or not set, uses control's Name property.
            </summary>
        </member>
        <member name="P:G.Controls.GDockPanel.IPanel.ToolTipText">
            <summary>
            Tooltip text.
            If null or not set, uses Text (default - control's Name property).
            </summary>
        </member>
        <member name="P:G.Controls.GDockPanel.IPanel.Image">
            <summary>
            Image to display on tab button if it is too small for text.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.IPanel.Init(System.String,System.Drawing.Image)">
            <summary>
            Sets commonly used properties. Can be used to avoid several function calls (Image, ToolTipText).
            </summary>
            <param name="toolTip">Tooltip text.</param>
            <param name="image">Image to display on tab button if it is too small for text.</param>
        </member>
        <member name="P:G.Controls.GDockPanel.IPanel.Visible">
            <summary>
            The 'get' function returns true if the panel or its tab button is visible. Returns false if it is hidden or its parent tab group is hidden.
            The 'set' function makes the panel visible, in the most recent state (docked or floating). Activates its tab button if need.
            </summary>
        </member>
        <member name="P:G.Controls.GDockPanel.IPanel.ReallyVisible">
            <summary>
            Returns true if the panel is visible.
            Returns false if it is hidden or its parent tab group is hidden or it is an inactive tab.
            </summary>
        </member>
        <member name="P:G.Controls.GDockPanel.IPanel.Floating">
            <summary>
            The 'get' function returns true if the panel is floating and not hidden.
            The 'set' function: if true, makes this panel floating and visible if it is currently docked or hidden; if false, makes it docked if it is currently floating and visible.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.Create(System.String,System.Windows.Forms.Control[])">
            <summary>
            Loads UI layout from XML file and adds controls (panels, toolbars) to this control.
            Adjusts control properties and positions everything according to the XML.
            </summary>
            <param name="xmlFile">XML file containing panel/toolbar layout. Used to load and save. If missing, will load Folders.ThisApp + Path.GetFileName(xmlFile) and save to xmlFile.</param>
            <param name="controls">Controls. Control Name must match the XML element (panel) name attribute in the XML.</param>
        </member>
        <member name="P:G.Controls.GDockPanel._HitTestData.ParentTab">
            <summary>
            If hit test on a tabbed GPanel, returns its parent GTab, else null.
            </summary>
        </member>
        <member name="P:G.Controls.GDockPanel._HitTestData.ContentNode">
            <summary>
            If hit test on a GContentNode, returns it, else null.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel._HitTest(System.Windows.Forms.Control,System.Int32,System.Int32,G.Controls.GDockPanel._HitTestData@)">
            <summary>
            If hit-test on a splitter, sets ht.gs and returns _HitTestResult.Splitter.
            Else if on a GPanel caption or GPanel tab button, sets gp and returns _HitTestResult.Caption.
            Else (if on a GTab caption but not a  GPanel tab button) sets gt and returns _HitTestResult.Caption.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GetPanel(System.Windows.Forms.Control)">
            <summary>
            Gets control's host panel interface.
            Returns null if not found.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GetPanel(System.String)">
            <summary>
            Gets panel interface by name.
            Returns null if not found.
            </summary>
            <param name="name">Panel name, which is its control's Name property.</param>
        </member>
        <member name="M:G.Controls.GDockPanel.AddShowPanelsToMenu(System.Windows.Forms.ToolStripDropDown,System.Boolean,System.Boolean)">
            <summary>
            Adds menu items for all panels or toolbars, except the doc panel, to a menu.
            On menu item click will show that panel.
            </summary>
        </member>
        <member name="P:G.Controls.GDockPanel.ResetLayoutAfterRestart">
            <summary>
            When disposing this, delete the user's saved layout file. Then next time will use the default file.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.EnableDisableAllFloatingWindows(System.Boolean)">
            <summary>
            Call this in main window's WndProc override on WM_ENABLE.
            </summary>
            <param name="enable">Enable or disable.</param>
        </member>
        <member name="T:G.Controls.GDockPanel.GDockPanelEventArgs">
            <summary>
            Used with many GDockPanel events and othe callbacks.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GDockPanelEventArgs.#ctor(System.Object)">
            <summary>ctor.</summary>
            <param name="gPanel">Must be GPanel. We use object because C# compiler does not allow to use GPanel (less accessible).</param>
        </member>
        <member name="T:G.Controls.GDockPanel.GDockPanelEventHandler`1">
            <summary>
            Used with many GDockPanel events and other callbacks.
            </summary>
        </member>
        <member name="E:G.Controls.GDockPanel.PanelContextMenu">
            <summary>
            Before showing the context menu when the user right-clicks a panel tab button or caption.
            The event handler can add/remove/etc menu items.
            </summary>
        </member>
        <member name="T:G.Controls.GDockPanel.GSplit">
            <summary>
            Contains 2 GNode (GPanel, GTab, GSplit or GDummyNode) and a splitter.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GSplit.#ctor(G.Controls.GDockPanel,G.Controls.GDockPanel.GSplit,System.Xml.Linq.XElement)">
            <summary>
            This ctor is used at startup, when adding from XML.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GSplit.#ctor(G.Controls.GDockPanel,G.Controls.GDockPanel.GSplit,G.Controls.GDockPanel.GNode,G.Controls.GDockPanel.GNode,System.Boolean)">
            <summary>
            This ctor is used when a floating GContentNode dropped on a docked GContentNode.
            child1 or child2 must be docked, but not both.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GSplit.OnChildRemoved(G.Controls.GDockPanel.GNode)">
            <summary>
            Puts gn sibling in parent split of this, in place of this.
            Makes this invalid and removes from _aSplit.
            Does not update layout.
            </summary>
            <param name="gn">One of children. The caller is removing it from this.</param>
        </member>
        <member name="M:G.Controls.GDockPanel.GSplit.ReplaceChild(G.Controls.GDockPanel.GNode,G.Controls.GDockPanel.GNode)">
            <summary>
            Replaces child gnOld with gnNew.
            Sets gnNew.ParentSplit = this.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GSplit.RepositionChild(G.Controls.GDockPanel.GNode,System.Boolean,System.Boolean)">
            <summary>
            Changes IsVerticalSplit, Child1 and Child2 if need.
            Does not update layout.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GSplit.DragSplitter">
            <summary>
            Called on mouse left button down on splitter.
            Returns when the drag operation ends.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GSplit.Paint(System.Drawing.Graphics)">
            <summary>
            Called from GDockPanel.OnPaint, for its _firstSplit.
            Paints all descendants.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GSplit.SetChildFixedSize(G.Controls.GDockPanel.GNode,System.Boolean,System.Boolean)">
            <summary>
            Sets a child (of this, or of an ancestor if need) to have fixed width or height.
            Used for context menu.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GSplit.IsChildFixedSize(G.Controls.GDockPanel.GNode,System.Boolean)">
            <summary>
            Gets whether a child (of this, or of an ancestor if need) has fixed width or height.
            Used for context menu.
            </summary>
        </member>
        <member name="T:G.Controls.GDockPanel.GTab">
            <summary>
            Contains multiple GPanel.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GTab.#ctor(G.Controls.GDockPanel,G.Controls.GDockPanel.GSplit,System.Xml.Linq.XElement)">
            <summary>
            This ctor is used at startup, when adding from XML.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GTab.#ctor(G.Controls.GDockPanel,G.Controls.GDockPanel.GSplit,G.Controls.GDockPanel.GPanel,G.Controls.GDockPanel.GPanel)">
            <summary>
            This ctor is used when a floating GPanel dropped on a docked non-tabbed GPanel caption.
            item1 or item2 must be docked, but not both.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GTab._CalcButtonsBounds(System.Drawing.Graphics)">
            <summary>
            Returns buttons width.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GTab.SetActiveItem(G.Controls.GDockPanel.GPanel)">
            <summary>
            Sets ActiveItem, shows its contents, hides previous ActiveItem contents, invalidate caption, calls DockedDocumentPanelActivated event.
            </summary>
            <param name="gp">Can be null to deactivate all.</param>
        </member>
        <member name="M:G.Controls.GDockPanel.GTab.OnItemRemoved(G.Controls.GDockPanel.GPanel)">
            <summary>
            Removes a child panel from Items.
            If single item left, moves it to this parent and invalidates/removes this.
            </summary>
        </member>
        <member name="M:G.Controls.GDockPanel.GTab.AddOrReorderItem(G.Controls.GDockPanel.GPanel,G.Controls.GDockPanel.GPanel,System.Boolean)">
            <summary>
            If gp is child of this, moves it to the place before or after target (a child of this).
            Else just inserts gp there.
            If target is null, adds to the end (does nothing if gp is child).
            Does not update layout.
            </summary>
        </member>
        <member name="T:G.Controls.GDockPanel.GAccContainer">
            <summary>
            Used by GDockPanel and GFloat.
            </summary>
        </member>
        <member name="T:G.Controls.GDockPanel.GAccNode">
            <summary>
            AccessibleObject of GNode.
            We use separate class (don't inherit GNode from AccessibleObject) to avoid GNode cluttering and conflicts (Name, Bounds etc).
            </summary>
        </member>
        <member name="F:G.Controls.GStripManager.GSMProp.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:G.Controls.GStripManager.GSMProp.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:G.Controls.GStripManager.GSMProp.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:G.Controls.GStripManager.MenuBar">
            <summary>
            Menu bar.
            </summary>
        </member>
        <member name="P:G.Controls.GStripManager.Toolbars">
            <summary>
            Toolbars.
            </summary>
        </member>
        <member name="P:G.Controls.GStripManager.Submenus">
            <summary>
            Submenus.
            </summary>
        </member>
        <member name="M:G.Controls.GStripManager.#ctor(System.Windows.Forms.Form,System.String,System.String,G.Controls.IGStripManagerCallbacks)">
            <param name="form">Form used as owner of dialog boxes.</param>
            <param name="xmlFileDefault">File containing default XML.</param>
            <param name="xmlFileCustomized">File containing customized XML. Don't have to exist; it will be created when saving customizations.</param>
            <param name="callbacks"></param>
        </member>
        <member name="M:G.Controls.GStripManager.BuildAll">
            <summary>
            Opens XML file and creates toolbars/menus/submenus.
            </summary>
        </member>
        <member name="M:G.Controls.GStripManager._AddChildItems(System.Xml.Linq.XElement,System.Windows.Forms.ToolStrip,System.Boolean)">
            <summary>
            Adds toolbar buttons or menu bar items.
            Call this for each top-level toolstrip (toolbar or menu bar).
            </summary>
            <param name="xParent">XML element of the toolbar or menu bar.</param>
            <param name="owner">The toolbar or menu bar.</param>
            <param name="isMenu">true if menu, false if toolbar.</param>
        </member>
        <member name="M:G.Controls.GStripManager._AddChildItem(System.Windows.Forms.ToolStripItem,System.Windows.Forms.ToolStrip,System.Int32)">
            <summary>
            Adds item to owner.
            Before it calls <see cref="M:G.Controls.IGStripManagerCallbacks.ItemAdding(System.Windows.Forms.ToolStripItem,System.Windows.Forms.ToolStrip)"/>.
            </summary>
            <param name="item">Can be ToolStripMenuItem, ToolStripButton, ToolStripSplitButton, ToolStripDropDownButton, ToolStripSpringTextBox, ToolStripSpringComboBox, ToolStripSeparator.</param>
            <param name="owner">ToolStrip, MenuStrip or ToolStripDropDownMenu to which to add this item.</param>
            <param name="insertAt">If not negative, inserts at this index. If negative, adds to the end.</param>
        </member>
        <member name="M:G.Controls.GStripManager._CreateChildItem(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Creates a menu or toolbar item.
            </summary>
            <param name="x">XML element containing item properties.</param>
            <param name="isMenu">false if toolbar item, true if menu item (also if menu bar item).</param>
        </member>
        <member name="M:G.Controls.GStripManager._OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Toolbar button MouseUp handler. Implements context menu that allows to customize.
            </summary>
        </member>
        <member name="M:G.Controls.GStripManager._Strips_Customize(System.UInt32,System.Windows.Forms.ToolStripItem,System.Windows.Forms.ToolStrip,System.Object)">
            <summary>
            Implements toolbar button customization.
            </summary>
            <param name="action">1 copy, 2 move, 3 remove, 4 separator, 5 hide/unhide, 6 properties.</param>
            <param name="item">Button.</param>
            <param name="tsTo">Destination toolbar, or null if don't need.</param>
            <param name="etc">
            With action 2 (move) can be the target button as ToolStripItem; if null, moves to the end.
            With action 6 (properties) - GSMProp.
            </param>
        </member>
        <member name="M:G.Controls.GStripManager._OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Toolbar button MouseDown handler. Implements toolbar button reordering with Alt+drag.
            </summary>
        </member>
        <member name="T:G.Controls.IGStripManagerCallbacks">
            <summary>
            <see cref="T:G.Controls.GStripManager"/> uses this interface to get properties of menu/toolbar items that it cannot get from XML (Click event handlers, images etc).
            Also used to notify about some events.
            </summary>
        </member>
        <member name="M:G.Controls.IGStripManagerCallbacks.GetImage(System.String)">
            <summary>
            Gets menu/toolbar item image.
            </summary>
            <param name="imageName">XML i attribute.</param>
        </member>
        <member name="M:G.Controls.IGStripManagerCallbacks.GetClickHandler(System.String)">
            <summary>
            Gets menu/toolbar item Click event handler.
            Returns null if the item is not a command, for example if it is a submenu-item or control-item.
            Called before creating the ToolStripItem.
            </summary>
            <param name="itemName">Menu/toolbar item name (XML tag).</param>
        </member>
        <member name="M:G.Controls.IGStripManagerCallbacks.ItemAdding(System.Windows.Forms.ToolStripItem,System.Windows.Forms.ToolStrip)">
            <summary>
            Called before adding an item to a toolbar or menu/submenu.
            </summary>
            <param name="item">Can be ToolStripMenuItem, ToolStripButton, ToolStripSplitButton, ToolStripDropDownButton, ToolStripSpringTextBox, ToolStripSpringComboBox, ToolStripSeparator.</param>
            <param name="owner">ToolStrip, MenuStrip or ToolStripDropDownMenu to which will be added this item.</param>
        </member>
    </members>
</doc>
