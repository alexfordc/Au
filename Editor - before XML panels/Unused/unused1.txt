
		public class EDockPanel :Panel
		{
			public static int CaptionHeight { get; set; } = 19;

			public IFloaty Floaty { get; set; }

			public bool IsFloating { get { return Floaty != null && Floaty.IsFloating; } }

			//bool _vertical;
			//public bool PaneVertical
			//{
			//	get
			//	{
			//		return _vertical;
			//	}
			//	set
			//	{
			//		if(value == _vertical) return;
			//		_vertical = value;
			//	}
			//}


			protected override void WndProc(ref Message m)
			{
				//if(this== _form._tvPane) Util.Debug_.OutMsg(ref m);

				base.WndProc(ref m);
			}
		}




//			protected override void OnPaint(PaintEventArgs e)
//			{
//				base.OnPaint(e);
//				//if(Floaty.IsFloating) return;
//				//Out(e.ClipRectangle);

//				var r = this.ClientRectangle;
//				if(_vertical) r.Width = CaptionHeight; else r.Height = CaptionHeight;
//				if(!e.ClipRectangle.IntersectsWith(r)) return;

//				var g = e.Graphics;

//				//var bBack = new SolidBrush(ColorTranslator.FromWin32(0xDCCEBF));
//				var bBack = new SolidBrush(ColorTranslator.FromWin32(0x7D5A46));
//				//r.Inflate(-1, -1);
//				g.FillRectangle(bBack, r);
//				bBack.Dispose();

//				var s = this.Text;
//#if true
//				//var bFore = new SolidBrush(Color.Black);
//				var bFore = new SolidBrush(Color.White);
//				var txtFormat = new StringFormat(_vertical ? StringFormatFlags.NoWrap | StringFormatFlags.DirectionVertical : StringFormatFlags.NoWrap);
//				//r.Offset(1, 1);
//				r.Inflate(-1, -1);
//				g.DrawString(s, Font, bFore, r, txtFormat); //tested: with "Segoe UI" font same quality as ExtTextOut. TextRenderer.DrawText cannot draw vertical.
//				bFore.Dispose();
//#else
//				//Font f = _vertical ? new Font(Font.FontFamily, Font.SizeInPoints, FontStyle.Regular, GraphicsUnit.Pixel, 0, true) : Font;
//				//TextRenderer.DrawText(g, s, f, r, Color.Black, TextFormatFlags.Left | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);

//				var dc =g.GetHdc();
//				//var of = SelectObject(dc, f.ToHfont());
//				var of = SelectObject(dc, _GetCaptionFont(this.Font, _vertical, g));
//				SetTextColor(dc, 0xffffff);
//				SetBkMode(dc, 1);
//				RECT r2 = r;
//				ExtTextOut(dc, _vertical?r2.right:4, _vertical?4:2, ETO_CLIPPED, ref r2, s, (uint)s.Length, null);
//				//DeleteObject(SelectObject(dc, of));
//				SelectObject(dc, of);
//				g.ReleaseHdc();

//				//if(_vertical) f.Dispose();
//#endif
//			}

//#if false
//			public const uint ETO_CLIPPED = 0x4;
//			[DllImport("gdi32.dll", EntryPoint = "ExtTextOutW")]
//			public static extern bool ExtTextOut(IntPtr hdc, int x, int y, uint options, [In] ref RECT lprect, string lpString, uint c, [In] int[] lpDx);
//			[DllImport("gdi32.dll")]
//			public static extern IntPtr SelectObject(IntPtr hdc, IntPtr h);
//			[DllImport("gdi32.dll")]
//			public static extern bool DeleteObject(IntPtr ho);
//			[DllImport("gdi32.dll", EntryPoint = "GetObjectW")]
//			public static extern int GetObject(IntPtr h, int c, out LOGFONT pv);
//			[DllImport("gdi32.dll")]
//			public static extern uint SetTextColor(IntPtr hdc, uint color);
//			[DllImport("gdi32.dll")]
//			public static extern int SetBkMode(IntPtr hdc, int mode);
//			[DllImport("gdi32.dll", EntryPoint = "CreateFontIndirectW")]
//			public static extern IntPtr CreateFontIndirect([In] ref LOGFONT lplf);

//			public struct LOGFONT
//			{
//				public int lfHeight;
//				public int lfWidth;
//				public int lfEscapement;
//				public int lfOrientation;
//				public int lfWeight;
//				public byte lfItalic;
//				public byte lfUnderline;
//				public byte lfStrikeOut;
//				public byte lfCharSet;
//				public byte lfOutPrecision;
//				public byte lfClipPrecision;
//				public byte lfQuality;
//				public byte lfPitchAndFamily;
//				[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
//				public string lfFaceName;
//			}

//			[DllImport("gdiplus.dll", EntryPoint = "GdipGetLogFontW")]
//			static extern int GdipGetLogFont(HandleRef font, HandleRef graphics, [In, Out, MarshalAs(UnmanagedType.AsAny)] object lf);

//			static IntPtr _GetCaptionFont(Font templ, bool vertical, Graphics g)
//			{
//				IntPtr f = vertical ? _hfontVert : _hfontHorz;
//				if(f == Zero) {
//					LOGFONT x;
//					var hFont = templ.ToHfont();
//					if(0==GetObject(hFont, Marshal.SizeOf(typeof(LOGFONT)), out x)) throw new Exception();
//					DeleteObject(hFont);

//					//var x = new LOGFONT();
//					//templ.ToLogFont(x);

//					if(vertical) x.lfEscapement = x.lfOrientation = 270 * 10;
//					OutList(x.lfFaceName, x.lfHeight);
//					f = CreateFontIndirect(ref x);
//					if(vertical) _hfontVert = f; else _hfontHorz = f;
//				}
//				return f;
//			}
//			static IntPtr _hfontHorz, _hfontVert;
//#endif

			//protected override void OnHandleDestroyed(EventArgs e)
			//{
			//	base.OnHandleDestroyed(e);
			//}







		//public Form1()
		//{
		//	InitializeComponent();

		//	this.SuspendLayout();

		//	//info: form font is set in designer: "Segoe UI", 9. It's the Windows UI font. Controls inherit it.
		//	//	SystemFonts.DefaultFont is "Microsoft Sans Serif". SystemFonts.DialogFont is "Tahoma". SystemFonts.MessageBoxFont is "Segoe UI", 9.

		//	int tvWidth = 300;
		//	Size contentSize = this.ClientSize; contentSize.Height -= _contentY;

		//	//content pane
		//	_contentPanel = new Panel();
		//	_contentPanel.Name = nameof(_contentPanel);
		//	_contentPanel.Location = new Point(0, _contentY);
		//	_contentPanel.Size = contentSize;

		//	//treeview
		//	_tv = new CatTreeView(this);
		//	_tv.Name = nameof(_tv);
		//	_tv.ShowNodeToolTips = true;
		//	_tv.HideSelection = false;
		//	if(true) {
		//		_tv.LabelEdit = true;
		//	} else {
		//		_tv.ShowPlusMinus = false;
		//		_tv.FullRowSelect = true;
		//		_tv.ShowLines = false;
		//		//_tv.SingleClickExpand //no such prop
		//	}
		//	_tv.Size = new Size(tvWidth, contentSize.Height);

		//	//editor
		//	_editor = new Scintilla();
		//	_editor.Name = nameof(_editor);

		//	//vertical splitter between treeview and editor
		//	_splitV1 = new Splitter();
		//	_splitV1.Name = nameof(_splitV1);
		//	_splitV1.Size = new Size(4, contentSize.Height); //default 3 3
		//	_splitV1.Dock = DockStyle.Left;
		//	//_splitV1.MinSize = 25; _splitV1.MinExtra = 25; //default 25 25
		//	_splitV1.SplitPosition = tvWidth;
		//	_tv.Dock = DockStyle.Left;
		//	_editor.Dock = DockStyle.Fill;

		//	//note: the order of the following lines is important for the splitter.
		//	_contentPanel.Controls.Add(_editor);
		//	_contentPanel.Controls.Add(_splitV1);
		//	_contentPanel.Controls.Add(_tv);
		//	this.Controls.Add(_contentPanel);

		//	this.ResumeLayout(false);

		//	//this.Location = new Point(200, 20); //currently Center, set in designer

		//	_LoadCollection();
		//}

		////protected override void OnClientSizeChanged(EventArgs e)
		////{
		////	if(_splitV1 != null) {
		////		Size contentSize = this.ClientSize; contentSize.Height -= _contentY;
		////		_contentPanel.Size = contentSize;
		////		//info: the child controls are automatically resized because of their Dock property.
		////	}
		////	base.OnClientSizeChanged(e);
		////}






		//public Form1()
		//{

		//	InitializeComponent();

		//	this.SuspendLayout();
		//	//this.Font = SystemFonts.DefaultFont; //Microsoft Sans Serif
		//	//this.Font = SystemFonts.DialogFont; //Tahoma
		//	//this.Font = SystemFonts.MessageBoxFont; //Segoe UI
		//	//Font = new Font("Segoe UI", 9); //now this is set in form dsigner
		//	//Out(this.Font);

		//	int tvWidth = 300;
		//	Size contentSize = this.ClientSize; contentSize.Height -= _contentY;

		//	//tree view
		//	_tv = new CatTreeView(this);
		//	_tv.Name = nameof(_tv);
		//	_tv.ShowNodeToolTips = true;
		//	_tv.HideSelection = false;
		//	if(true) {
		//		_tv.LabelEdit = true;
		//	} else {
		//		_tv.ShowPlusMinus = false;
		//		_tv.FullRowSelect = true;
		//		_tv.ShowLines = false;
		//		//_tv.SingleClickExpand //no such prop
		//	}
		//	//_tv.Location = new Point(0, contentY);
		//	//_tv.Size = new Size(tvWidth, contentSize.Height);
		//	//this.Controls.Add(_tv);

		//	//editor
		//	_editor = new Scintilla();
		//	_editor.Name = nameof(_editor);
		//	//int edX = tvWidth + 10;
		//	//_editor.Location = new Point(edX, contentY);
		//	//_editor.Size = new Size(this.ClientSize.Width - edX, contentSize.Height);
		//	//this.Controls.Add(_editor);

		//	//split
		//	_splitV1 = new SplitContainer();
		//	_splitV1.Name = nameof(_splitV1);
		//	_splitV1.Location = new Point(0, _contentY);
		//	_splitV1.Size = contentSize;
		//	//_splitV1.Dock=DockStyle.Fill;
		//	_splitV1.Panel1MinSize = 30; _splitV1.Panel2MinSize = 30;
		//	_splitV1.SplitterDistance = tvWidth;
		//	//Out(_splitV1.SplitterWidth); //4
		//	_tv.Dock = DockStyle.Fill;
		//	_splitV1.FixedPanel = FixedPanel.Panel1;
		//	_splitV1.Panel1.Controls.Add(_tv);
		//	_editor.Dock = DockStyle.Fill;
		//	_splitV1.Panel2.Controls.Add(_editor);
		//	this.Controls.Add(_splitV1);

		//	this.ResumeLayout(false);

		//	//this.Location = new Point(200, 20);

		//	_LoadCollection();
		//}

		//protected override void OnClientSizeChanged(EventArgs e)
		//{
		//	if(_splitV1 != null) {
		//		Size contentSize = this.ClientSize; contentSize.Height -= _contentY;
		//		_splitV1.Size = contentSize;
		//	}
		//	base.OnClientSizeChanged(e);
		//}






		
			//il.ColorDepth = ColorDepth.Depth32Bit;
			////il.Images.Add(Icons.HandleToImage(Icons.CreateBlankIcon(16, 16)));
			//il.Images.Add(Icons.GetIconImage(".cs", 16));
			////il.Images.Add(Icons.HandleToImage(Icons.GetShellStockIconHandle(Api.SHSTOCKICONID.SIID_FOLDER, 16)));
			////il.Images.Add(Icons.HandleToImage(Icons.GetShellStockIconHandle(Api.SHSTOCKICONID.SIID_FOLDEROPEN, 16))); //same icon as SIID_FOLDER
			//il.Images.Add(Icons.GetIconImage(@"q:\app\folder.ico", 16));
			//il.Images.Add(Icons.GetIconImage(@"q:\app\folder_open.ico", 16));

			//il.ColorDepth = ColorDepth.Depth32Bit;
			////il.Images.Add(Icons.HandleToImage(Icons.CreateBlankIcon(16, 16)));
			//il.Images.Add(Properties.Resources.macro);
			//il.Images.Add(Properties.Resources.folder);
			//il.Images.Add(Properties.Resources.folder_open);





