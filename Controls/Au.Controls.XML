<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Au.Controls</name>
    </assembly>
    <members>
        <member name="T:Au.Controls.AuToolStrip">
            <summary>
            Adds to ToolStrip:
            1. User can click a button when the parent form is not the active window.
            2. A click does not activate the parent form if it has WS_EX_NOACTIVATE style.
            3. Can show tooltips when parent form is not the active window. To enable it, the form's ShowWithoutActivation override must return true (it is called when need to show a tooltip).
            </summary>
        </member>
        <member name="T:Au.Controls.AuMenuStrip">
            <summary>
            Adds to MenuStrip:
            1. User can click an item when the parent form is not the active window.
            2. A click does not activate the parent form if it has WS_EX_NOACTIVATE style.
            3. Fixes some MenuStrip bugs.
            </summary>
        </member>
        <member name="T:Au.Controls.ButtonOK">
            <summary>
            Button that automatically sets its Text = "OK", DialogResult = DialogResult.OK and form's AcceptButton.
            </summary>
        </member>
        <member name="T:Au.Controls.ButtonCancel">
            <summary>
            Button that automatically sets its Text = "Cancel", DialogResult = DialogResult.Cancel and form's CancelButton.
            </summary>
        </member>
        <member name="T:Au.Controls.ParamGrid">
            <summary>
            2-column grid control similar to a propertygrid but more flexible.
            Used in many code tools to edit function arguments etc. For example in "Find window or control".
            </summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZAutoSize(System.Boolean,System.Boolean)">
            <summary>
            Call this after adding all rows.
            </summary>
        </member>
        <member name="E:Au.Controls.ParamGrid.ZValueChanged">
            <summary>
            When changed text of a value cell or state of a checkbox cell.
            </summary>
        </member>
        <member name="E:Au.Controls.ParamGrid.ZShowEditInfo">
            <summary>
            When started and ended editing a cell that has info.
            When ended, the string is null.
            </summary>
        </member>
        <member name="T:Au.Controls.ParamGrid.EditCell">
            <summary>
            Simple editable text cell.
            Adds to SG.Cells.Cell: property Info.
            </summary>
        </member>
        <member name="T:Au.Controls.ParamGrid.ComboCell">
            <summary>
            Editable text cell with drop-down button that shows drop-down list similar to combo box.
            </summary>
        </member>
        <member name="F:Au.Controls.ParamGrid._RowType.Editable">
            <summary>Checkbox and editable cell. If check is null, adds lebel instead of checkbox.</summary>
        </member>
        <member name="F:Au.Controls.ParamGrid._RowType.Check">
            <summary>Only checkbox.</summary>
        </member>
        <member name="F:Au.Controls.ParamGrid._RowType.Header">
            <summary>Only label. If check is not null, adds checkbox instead of label.</summary>
        </member>
        <member name="T:Au.Controls.ParamGrid.EditType">
            <summary>
            Types of the editable cell.
            </summary>
        </member>
        <member name="F:Au.Controls.ParamGrid.EditType.Text">
            <summary>Simple editable text.</summary>
        </member>
        <member name="F:Au.Controls.ParamGrid.EditType.ComboText">
            <summary>Editable text with combobox-like drop-down.</summary>
        </member>
        <member name="F:Au.Controls.ParamGrid.EditType.ComboList">
            <summary>Read-only combobox.</summary>
        </member>
        <member name="F:Au.Controls.ParamGrid.EditType.TextButton">
            <summary>Editable text with button.</summary>
        </member>
        <member name="F:Au.Controls.ParamGrid.EditType.Button">
            <summary>Button.</summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZAdd(System.String,System.String,System.Object,System.Nullable{System.Boolean},System.String,System.String,System.Int32,Au.Controls.ParamGrid.EditType,System.EventHandler,System.Int32)">
            <summary>
            Adds row with checkbox (or label) and editable cell.
            Returns row index.
            </summary>
            <param name="key">Row's Tag property. If null, uses <paramref name="name"/>. Used by <see cref="M:Au.Controls.ParamGrid.ZGetValue(System.String,System.String@,System.Boolean)"/> and other functions.</param>
            <param name="name">Readonly text in column 0 (checkbox or label).</param>
            <param name="value">
            string.
            For combo can be string like "one|two|three" or string[] List of string.
            For editable combo also can be Func&lt;string[]&gt; callback that returns items. Called before each dropdown.
            </param>
            <param name="check">Checked or not. If null, adds label instead of checkbox.</param>
            <param name="tt">Tooltip text.</param>
            <param name="info"><see cref="E:Au.Controls.ParamGrid.ZShowEditInfo"/> text.</param>
            <param name="insertAt"></param>
            <param name="etype">Edit cell control type.</param>
            <param name="buttonAction">Button click action when etype is Button or TextButton; required.</param>
            <param name="comboIndex">If not -1, selects this combo box item.</param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZAddCheck(System.String,System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Adds row with only checkbox (without an editable cell).
            Returns row index.
            </summary>
            <param name="key">Row's Tag property. If null, uses <paramref name="name"/>. Used by <see cref="M:Au.Controls.ParamGrid.ZGetValue(System.String,System.String@,System.Boolean)"/> and other functions.</param>
            <param name="name">Checkbox text.</param>
            <param name="check"></param>
            <param name="tt">Tooltip text.</param>
            <param name="insertAt"></param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZAddHeaderRow(System.String,System.Nullable{System.Boolean},System.String,System.Int32,System.String)">
            <summary>
            Adds a header row that can be anywhere (and multiple). It is readonly and spans all columns. Optionally with checkbox.
            Returns row index.
            </summary>
            <param name="name">Read-only text.</param>
            <param name="check">Checked or not. If null, adds label instead of checkbox.</param>
            <param name="tt">Tooltip text.</param>
            <param name="insertAt"></param>
            <param name="key">Row's Tag property. If null, uses <paramref name="name"/>. Used by <see cref="M:Au.Controls.ParamGrid.ZGetValue(System.String,System.String@,System.Boolean)"/> and other functions.</param>
        </member>
        <member name="P:Au.Controls.ParamGrid.ZAddHidden">
            <summary>
            If true, ZAdd and similar functions will add hidden rows.
            </summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZIsChecked(System.Int32)">
            <summary>
            Returns true if the row is checked or required.
            </summary>
            <param name="row">Row index. If negative, asserts and returns false.</param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZIsChecked(System.String)">
            <summary>
            Returns true if the row is checked or required.
            </summary>
            <param name="rowKey">Row key. If not found, asserts and returns false.</param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZCheck(System.Int32,System.Boolean)">
            <summary>
            Checks or unchecks.
            Use only for flags and optionals, not for required.
            </summary>
            <param name="row">Row index. If negative, asserts and returns.</param>
            <param name="check"></param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZCheck(System.String,System.Boolean)">
            <summary>
            Checks or unchecks.
            Use only for flags and optionals, not for required.
            </summary>
            <param name="rowKey">Row key. If not found, asserts and returns.</param>
            <param name="check"></param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZGetValue(System.Int32,System.String@,System.Boolean)">
            <summary>
            If the row is checked or required, gets its value and returns true.
            </summary>
            <param name="row">Row index. If negative, asserts and returns false.</param>
            <param name="value"></param>
            <param name="falseIfEmpty">Return false if the value is empty (null).</param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZGetValue(System.String,System.String@,System.Boolean)">
            <summary>
            If the row is checked or required, gets its value and returns true.
            </summary>
            <param name="rowKey">Row key. If not found, asserts returns false.</param>
            <param name="value"></param>
            <param name="falseIfEmpty">Return false if the value is empty (null).</param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZGetValueIfExists(System.String,System.String@,System.Boolean)">
            <summary>
            If the row exists and is checked or required, gets its value and returns true.
            </summary>
            <param name="rowKey">Row key. If not found, returns false.</param>
            <param name="value"></param>
            <param name="falseIfEmpty">Return false if the value is empty (null).</param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZGetCellText(System.Int32,System.Int32)">
            <summary>
            Gets cell value or checkbox label.
            </summary>
            <param name="row">Row index. If negative, asserts and returns null.</param>
            <param name="column">Column index.</param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZGetCellText(System.String,System.Int32)">
            <summary>
            Gets cell value or checkbox label.
            </summary>
            <param name="rowKey">Row key. If not found, asserts and returns null.</param>
            <param name="column">Column index.</param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZSetCellText(System.Int32,System.Int32,System.String)">
            <summary>
            Changes cell text or checkbox label.
            </summary>
            <param name="row">Row index. If negative, asserts and returns null.</param>
            <param name="column">Column index.</param>
            <param name="text"></param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZSetCellText(System.String,System.Int32,System.String)">
            <summary>
            Changes cell value or checkbox label.
            </summary>
            <param name="rowKey">Row key. If not found, asserts and returns null.</param>
            <param name="column">Column index.</param>
            <param name="text"></param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZFindRow(System.String)">
            <summary>
            Finds row by row key and returns row index.
            Returns -1 if not found.
            </summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZGetRowKey(System.Int32)">
            <summary>
            Gets row key.
            </summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.Clear">
            <summary>
            Removes all rows.
            </summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZGetEditCell(SourceGrid.CellContext@)">
            <summary>
            If editing any cell, gets the cell context and returns true.
            </summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZIsEditing(System.Int32,System.Int32,SourceGrid.CellContext@)">
            <summary>
            If editing the specified cell, gets cell context and returns true.
            </summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZEndEdit(System.Boolean)">
            <summary>
            If editing any cell, ends editing and returns true.
            </summary>
            <param name="cancel">Undo changes.</param>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZEndEdit(System.Int32,System.Int32,System.Boolean)">
            <summary>
            If editing the specified cell, ends editing and returns true.
            </summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZEnableCell(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Disables or enables cell (can be checkbox).
            </summary>
        </member>
        <member name="M:Au.Controls.ParamGrid.ZEnableCell(System.String,System.Int32,System.Boolean)">
            <summary>
            Disables or enables cell (can be checkbox).
            </summary>
        </member>
        <member name="T:Au.Controls.LibPopup">
            <summary>
            Represents a pop-up window.
            </summary>
        </member>
        <member name="P:Au.Controls.LibPopup.Content">
            <summary>
            Gets the content of the pop-up.
            </summary>
        </member>
        <member name="P:Au.Controls.LibPopup.ShowingAnimation">
            <summary>
            Determines which animation to use while showing the pop-up window.
            </summary>
        </member>
        <member name="P:Au.Controls.LibPopup.HidingAnimation">
            <summary>
            Determines which animation to use while hiding the pop-up window.
            </summary>
        </member>
        <member name="P:Au.Controls.LibPopup.AnimationDuration">
            <summary>
            Determines the duration of the animation.
            </summary>
        </member>
        <member name="P:Au.Controls.LibPopup.FocusOnOpen">
            <summary>
            Gets or sets a value indicating whether the content should receive the focus after the pop-up has been opened.
            </summary>
            <value><c>true</c> if the content should be focused after the pop-up has been opened; otherwise, <c>false</c>.</value>
            <remarks>If the FocusOnOpen property is set to <c>false</c>, then pop-up cannot use the fade effect.</remarks>
        </member>
        <member name="P:Au.Controls.LibPopup.AcceptAlt">
            <summary>
            Gets or sets a value indicating whether pressing the alt key should close the pop-up.
            </summary>
            <value><c>true</c> if pressing the alt key does not close the pop-up; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Au.Controls.LibPopup.MinimumSize">
            <summary>
            Gets or sets a minimum size of the pop-up.
            </summary>
            <returns>An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</returns>
        </member>
        <member name="P:Au.Controls.LibPopup.MaximumSize">
            <summary>
            Gets or sets a maximum size of the pop-up.
            </summary>
            <returns>An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</returns>
        </member>
        <member name="M:Au.Controls.LibPopup.#ctor(System.Windows.Forms.Control)">
            <param name="content">The content of the pop-up.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="content" /> is <code>null</code>.</exception>
        </member>
        <member name="M:Au.Controls.LibPopup.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.ToolStripItem.VisibleChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Au.Controls.LibPopup.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Processes a dialog box key.
            </summary>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
            <returns>
            true if the key was processed by the control; otherwise, false.
            </returns>
        </member>
        <member name="M:Au.Controls.LibPopup.UpdateRegion">
            <summary>
            Updates the pop-up region.
            </summary>
        </member>
        <member name="M:Au.Controls.LibPopup.Show(System.Windows.Forms.Control)">
            <summary>
            Shows the pop-up window below the specified control.
            </summary>
            <param name="control">The control below which the pop-up will be shown.</param>
            <remarks>
            When there is no space below the specified control, the pop-up control is shown above it.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="control"/> is <code>null</code>.</exception>
        </member>
        <member name="M:Au.Controls.LibPopup.Show(System.Drawing.Rectangle)">
            <summary>
            Shows the pop-up window below the specified area.
            </summary>
            <param name="area">The area of desktop below which the pop-up will be shown.</param>
            <remarks>
            When there is no space below specified area, the pop-up control is shown above it.
            </remarks>
        </member>
        <member name="M:Au.Controls.LibPopup.Show(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            Shows the pop-up window below the specified area of the specified control.
            </summary>
            <param name="control">The control used to compute screen location of specified area.</param>
            <param name="area">The area of control below which the pop-up will be shown.</param>
            <remarks>
            When there is no space below specified area, the pop-up control is shown above it.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="control"/> is <code>null</code>.</exception>
        </member>
        <member name="T:Au.Controls.LibPopup.PopupAnimations">
            <summary>
            Types of animation of the pop-up window.
            </summary>
        </member>
        <member name="F:Au.Controls.LibPopup.PopupAnimations.None">
            <summary>
            Uses no animation.
            </summary>
        </member>
        <member name="F:Au.Controls.LibPopup.PopupAnimations.LeftToRight">
            <summary>
            Animates the window from left to right. This flag can be used with roll or slide animation.
            </summary>
        </member>
        <member name="F:Au.Controls.LibPopup.PopupAnimations.RightToLeft">
            <summary>
            Animates the window from right to left. This flag can be used with roll or slide animation.
            </summary>
        </member>
        <member name="F:Au.Controls.LibPopup.PopupAnimations.TopToBottom">
            <summary>
            Animates the window from top to bottom. This flag can be used with roll or slide animation.
            </summary>
        </member>
        <member name="F:Au.Controls.LibPopup.PopupAnimations.BottomToTop">
            <summary>
            Animates the window from bottom to top. This flag can be used with roll or slide animation.
            </summary>
        </member>
        <member name="F:Au.Controls.LibPopup.PopupAnimations.Center">
            <summary>
            Makes the window appear to collapse inward if it is hiding or expand outward if the window is showing.
            </summary>
        </member>
        <member name="F:Au.Controls.LibPopup.PopupAnimations.Slide">
            <summary>
            Uses a slide animation.
            </summary>
        </member>
        <member name="F:Au.Controls.LibPopup.PopupAnimations.Blend">
            <summary>
            Uses a fade effect.
            </summary>
        </member>
        <member name="F:Au.Controls.LibPopup.PopupAnimations.Roll">
            <summary>
            Uses a roll animation.
            </summary>
        </member>
        <member name="F:Au.Controls.LibPopup.PopupAnimations.SystemDefault">
            <summary>
            Uses a default animation.
            </summary>
        </member>
        <member name="F:Au.Controls.LibPopup.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Au.Controls.LibPopup.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Au.Controls.LibPopup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Au.Controls.DropDownList">
            <summary>
            Drop-down list window, similar to a menu.
            </summary>
        </member>
        <member name="P:Au.Controls.DropDownList.LibPopup">
            <summary>
            Gets the popup control.
            </summary>
        </member>
        <member name="P:Au.Controls.DropDownList.Items">
            <summary>
            Sets list items.
            Call this before <b>Show</b>.
            </summary>
        </member>
        <member name="P:Au.Controls.DropDownList.OnSelected">
            <summary>
            Sets callback function called when an item selected.
            The callback can use the <b>ResultX</b> properties to get selection info.
            Then the popup is already hidden, but not disposed.
            Call this before <b>Show</b>.
            </summary>
        </member>
        <member name="P:Au.Controls.DropDownList.ResultIndex">
            <summary>
            Gets the selected index.
            Call this from <b>OnSelected</b> callback function.
            </summary>
        </member>
        <member name="P:Au.Controls.DropDownList.ResultString">
            <summary>
            Gets the selected string.
            Call this from <b>OnSelected</b> callback function.
            </summary>
        </member>
        <member name="P:Au.Controls.DropDownList.ResultWasKey">
            <summary>
            True if the selection was made with the keyboard (Enter), false if clicked.
            Call this from <b>OnSelected</b> callback function.
            </summary>
        </member>
        <member name="M:Au.Controls.DropDownList.#ctor">
            
        </member>
        <member name="M:Au.Controls.DropDownList.Show(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            Shows the popup list.
            To add items, set <see cref="P:Au.Controls.DropDownList.Items"/> before. To get results, set <see cref="P:Au.Controls.DropDownList.OnSelected"/> before.
            </summary>
            <param name="owner">Owner control.</param>
            <param name="r">Rectangle in owner control's client area. The popup will be below or above it.</param>
        </member>
        <member name="M:Au.Controls.DropDownList.Show(System.Windows.Forms.Control)">
            <summary>
            Shows the popup list.
            To add items, set <see cref="P:Au.Controls.DropDownList.Items"/> before. To get results, set <see cref="P:Au.Controls.DropDownList.OnSelected"/> before.
            </summary>
            <param name="owner">Owner control. The popup will be below or above it.</param>
        </member>
        <member name="M:Au.Controls.DropDownList.Show(System.Drawing.Rectangle)">
            <summary>
            Shows the popup list.
            To add items, set <see cref="P:Au.Controls.DropDownList.Items"/> before. To get results, set <see cref="P:Au.Controls.DropDownList.OnSelected"/> before.
            </summary>
            <param name="r">Rectangle in screen. The popup will be below or above it.</param>
        </member>
        <member name="T:Au.Controls.AuInfoBox">
            <summary>
            Scintilla-based control to show formatted information text.
            To set text use the <see cref="M:Au.NoClass.Text(System.String,System.Object[])"/> property. For formatting and links use tags: <see cref="T:Au.Controls.SciTags"/>.
            </summary>
        </member>
        <member name="T:Au.Controls.SciText">
            <summary>
            Functions to work with Scintilla control text, code, etc.
            A SciText object is created by AuScintilla which is the SC property.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.StyleFont(System.Int32,System.Drawing.Font)">
            <remarks>Uses only font name and size. Not style etc.</remarks>
        </member>
        <member name="M:Au.Controls.SciText.StyleMeasureStringWidth(System.Int32,System.String)">
            <summary>
            Measures string width.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.StyleClearAll">
            <summary>
            Calls SCI_STYLECLEARALL, which sets all styles to be the same as STYLE_DEFAULT.
            Then also sets some special styles, eg STYLE_HIDDEN.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.StyleClearRange(System.Int32,System.Int32)">
            <summary>
            Calls SCI_STYLECLEARALL(styleFrom, styleToNotIncluding), which sets range of styles to be the same as STYLE_DEFAULT.
            If styleToNotIncluding is 0, clears all starting from styleFrom.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.GetStyleAt(System.Int32)">
            <summary>
            Gets style at position.
            Uses SCI_GETSTYLEAT.
            Returns 0 if pos is invalid.
            </summary>
        </member>
        <member name="P:Au.Controls.SciText.SC">
            <summary>
            The host AuScintilla.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.CallRetPtr(System.Int32,Au.Types.LPARAM,Au.Types.LPARAM)">
            <summary>
            Sends a Scintilla message to the control and returns LPARAM.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.Call(System.Int32,Au.Types.LPARAM,Au.Types.LPARAM)">
            <summary>
            Sends a Scintilla message to the control and returns int.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.SetString(System.Int32,Au.Types.LPARAM,System.String)">
            <summary>
            Calls a Scintilla message that sets a string which is passed using lParam.
            If the message changes control text, this function does not work if the control is read-only. At first make non-readonly temporarily.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.SetString(System.Int32,System.String,Au.Types.LPARAM)">
            <summary>
            Calls a Scintilla message that sets a string which is passed using wParam.
            If the message changes control text, this function does not work if the control is read-only. At first make non-readonly temporarily.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.SetStringString(System.Int32,System.String)">
            <summary>
            Calls a Scintilla message and passes two strings using wParam and lParam.
            wParam0lParam must be like "WPARAM\0LPARAM". Asserts if no '\0'.
            If the message changes control text, this function does not work if the control is read-only. At first make non-readonly temporarily.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.GetString(System.Int32,Au.Types.LPARAM,System.Int32)">
            <summary>
            Calls a Scintilla message that gets a string.
            Don't call this function from another thread.
            </summary>
            <param name="sciMessage"></param>
            <param name="wParam"></param>
            <param name="bufferSize">
            How much UTF8 bytes to allocate for Scintilla to store the text.
            If -1 (default), at first calls sciMessage with lParam=0 (null buffer), let it return required buffer size. Then it can get binary string (with '\0' characters).
            If 0, returns "" and does not call the message.
            If positive, it can be either known or max expected text length, without the terminating '\0' character. The function will find length of the retrieved string (finds '\0'). Then it cannot get binary string (with '\0' characters).
            The function allocates bufferSize+1 bytes and sets that last byte = 0. If Scintilla overwrites it, asserts and calls Environment.FailFast.
            </param>
        </member>
        <member name="M:Au.Controls.SciText.GetStringOfLength(System.Int32,Au.Types.LPARAM,System.Int32)">
            <summary>
            The same as <see cref="M:Au.Controls.SciText.GetString(System.Int32,Au.Types.LPARAM,System.Int32)"/>, but always uses utf8Length bytes of the result (does not find length).
            </summary>
            <param name="sciMessage"></param>
            <param name="wParam"></param>
            <param name="utf8Length">
            Known length (bytes) of the result UTF8 string, without the terminating '\0' character.
            If 0, returns "" and does not call the message.
            Cannot be negative.
            </param>
            <remarks>
            This function can get binary string (with '\0' characters).
            </remarks>
        </member>
        <member name="M:Au.Controls.SciText.ClearText(System.Boolean,System.Boolean)">
            <summary>
            Removes all text (SCI_CLEARALL).
            For InitReadOnlyAlways controls, noUndo and noNotif must be false (asserts), because Undo and notifications are disabled when creating control.
            </summary>
            <param name="noUndo">Cannot be undone; clear Undo buffer.</param>
            <param name="noNotif">Don't send 'modified' notifications.</param>
        </member>
        <member name="M:Au.Controls.SciText.SetText(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Replaces all text.
            For InitReadOnlyAlways controls, noUndo and noNotif must be false (asserts), because Undo and notifications are disabled when creating control.
            </summary>
            <param name="s">Text.</param>
            <param name="noUndo">Cannot be undone; clear Undo buffer.</param>
            <param name="noNotif">Don't send 'modified' notifications.</param>
            <param name="ignoreTags">Don't parse tags, regardless of SC.TagsStyle.</param>
        </member>
        <member name="M:Au.Controls.SciText.AppendText(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Appends text and optionally "\r\n".
            Optionally scrolls and moves current position to the end (SCI_GOTOPOS).
            </summary>
            <param name="s"></param>
            <param name="andRN">Also append "\r\n". Ignored if parses tags; then appends.</param>
            <param name="scroll">Move current position and scroll to the end. Ignored if parses tags; then moves/scrolls.</param>
            <param name="ignoreTags">Don't parse tags, regardless of SC.TagsStyle.</param>
        </member>
        <member name="M:Au.Controls.SciText.LibAddText(System.Boolean,System.Byte*,System.Int32)">
            <summary>
            Appends UTF8 text of specified length.
            Does not append newline (s should contain it). Does not parse tags. Moves current position and scrolls to the end.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.LibSetText(System.Byte*)">
            <summary>
            Sets UTF8 text.
            Does not pare tags etc, just calls SCI_SETTEXT and SCI_SETREADONLY if need.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.GetText">
            <summary>
            Gets all text.
            </summary>
        </member>
        <member name="P:Au.Controls.SciText.TextLengthBytes">
            <summary>
            Gets text length (SCI_GETTEXTLENGTH) in UTF8 bytes.
            </summary>
        </member>
        <member name="P:Au.Controls.SciText.PositionBytes">
            <summary>
            Gets or sets current caret position (SCI_GETCURRENTPOS/SCI_SETEMPTYSELECTION) in UTF8 bytes.
            The 'set' function makes empty selection; does not scroll and does not make visible like GoToPos.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.LineIndexFromPosition(System.Int32)">
            <summary>
            Gets line index from character position (UTF8 bytes).
            </summary>
            <param name="pos">A position in document text. If negative, returns 0. If greater than text length, returns the last line.</param>
        </member>
        <member name="M:Au.Controls.SciText.LineStart(System.Int32)">
            <summary>
            Gets line start position (UTF8 bytes) from line index.
            </summary>
            <param name="line">0-based line index. If negative, returns 0. If greater than line count, returns text length.</param>
        </member>
        <member name="M:Au.Controls.SciText.LineEnd(System.Int32,System.Boolean)">
            <summary>
            Gets line end position (UTF8 bytes) from line index.
            </summary>
            <param name="line">0-based line index. If negative, returns 0. If greater than line count, returns text length.</param>
            <param name="withRN">Include \r\n.</param>
        </member>
        <member name="M:Au.Controls.SciText.LineStartFromPosition(System.Int32)">
            <summary>
            Gets line start position from any position. Both are in UTF8 bytes.
            </summary>
            <param name="pos">A position in document text. If negative, returns 0. If greater than text length, uses the last line.</param>
        </member>
        <member name="M:Au.Controls.SciText.LineEndFromPosition(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets line end position from any position. Both are in UTF8 bytes.
            </summary>
            <param name="pos">A position in document text. If negative, returns 0. If greater than text length, uses the last line.</param>
            <param name="withRN">Include \r\n.</param>
            <param name="lineStartIsLineEnd">If pos is at a line start (0 or after '\n' character), return pos.</param>
        </member>
        <member name="M:Au.Controls.SciText.LineText(System.Int32)">
            <summary>
            Gets line text.
            </summary>
            <param name="line">0-based line index. If invalid, returns "".</param>
        </member>
        <member name="M:Au.Controls.SciText.RangeText(System.Int32,System.Int32)">
            <summary>
            Gets range text.
            </summary>
            <param name="from">Start index (UTF8 bytes). If less than 0, uses 0.</param>
            <param name="to">End index (UTF8 bytes). If less than 0, uses TextLengthBytes.</param>
        </member>
        <member name="M:Au.Controls.SciText.LineHeight(System.Int32)">
            <summary>
            Gets line height.
            Currently all lines are the same height.
            </summary>
        </member>
        <member name="P:Au.Controls.SciText.LineCount">
            <summary>
            Gets the number of lines.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.AnnotationText(System.Int32)">
            <summary>
            Gets annotation text of line.
            Returns "" if the line does not contain annotation or is invalid line index.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.LibAnnotationText(System.Int32)">
            <summary>
            Gets raw annotation text which can contain image info.
            AnnotationText gets text without image info.
            Returns "" if the line does not contain annotation or is invalid line index.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.AnnotationText(System.Int32,System.String)">
            <summary>
            Sets annotation text of line.
            Does nothing if invalid line index.
            If s is null or "", removes annotation.
            Preserves existing image info.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.LibAnnotationText(System.Int32,System.String)">
            <summary>
            Sets raw annotation text which can contain image info.
            If s is null or "", removes annotation.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.RangeToFullLines(System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Moves 'from' to the start of its line, and 'to' to the end of its line.
            Does not change 'to' if it is at a line start.
            </summary>
            <param name="from">Start index (UTF8 bytes).</param>
            <param name="to">End index (UTF8 bytes).</param>
            <param name="withRN">Include "\r\n".</param>
        </member>
        <member name="M:Au.Controls.SciText.DeleteRange(System.Int32,System.Int32)">
            <summary>
            SCI_DELETERANGE.
            </summary>
            <param name="pos">Start index (UTF8 bytes).</param>
            <param name="length">Length (UTF8 bytes).</param>
        </member>
        <member name="M:Au.Controls.SciText.InsertText(System.Int32,System.String)">
            <summary>
            SCI_INSERTTEXT.
            Does not parse tags.
            </summary>
            <param name="pos">Start index (UTF8 bytes).</param>
            <param name="s"></param>
        </member>
        <member name="M:Au.Controls.SciText.GoToPos(System.Int32)">
            <summary>
            SCI_GOTOPOS and ensures visible.
            </summary>
        </member>
        <member name="M:Au.Controls.SciText.GoToLine(System.Int32)">
            <summary>
            SCI_GOTOLINE and ensures visible.
            </summary>
        </member>
        <member name="T:Au.Controls.AuScintilla">
            <summary>
            This .NET control wraps native Scintilla control.
            This is not a universal Scintilla wrapper class. Designed just for purposes of this library and related software.
            Responsible for creating and initializing the control. Also used to set/change control properties.
            The ST property returns a SciText object that can be used to work with text, code styling etc.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.ST">
            <summary>
            Gets the SciText object that contains most Scintilla-related functions.
            </summary>
        </member>
        <member name="M:Au.Controls.AuScintilla.#ctor">
            
        </member>
        <member name="M:Au.Controls.AuScintilla.OnSciNotify(Au.Controls.Sci.SCNotification@)">
            <summary>
            Raises the <see cref="E:Au.Controls.AuScintilla.SciNotify"/> event.
            </summary>
            <param name="n"></param>
        </member>
        <member name="E:Au.Controls.AuScintilla.SciNotify">
            <summary>
            Occurs when any Scintilla notification is received.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.DisableModifiedNotifications">
            <summary>
            On SCN_MODIFIED notifications suppress <see cref="M:Au.Controls.AuScintilla.OnSciNotify(Au.Controls.Sci.SCNotification@)"/> and <see cref="E:Au.Controls.AuScintilla.SciNotify"/>.
            Use to temporarily disable 'modified' notifications. Don't use SCI_SETMODEVENTMASK for it, because then will not work tags and images.
            </summary>
        </member>
        <member name="M:Au.Controls.AuScintilla.CallRetPtr(System.Int32,Au.Types.LPARAM,Au.Types.LPARAM)">
            <summary>
            Sends a Scintilla message to the control and returns LPARAM.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="M:Au.Controls.AuScintilla.Call(System.Int32,Au.Types.LPARAM,Au.Types.LPARAM)">
            <summary>
            Sends a Scintilla message to the control and returns int.
            Don't call this function from another thread.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.SciLexerDllPath">
            <summary>
            Scintilla dll path.
            Default is <c>Folders.ThisApp + @"Dll\" + (Ver.Is64BitProcess ? "64" : "32") + @"bit\SciLexer.dll"</c>. If you want to change it, call this before creating first control.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.InitBorderStyle">
            <summary>
            Border style.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.InitUseDefaultContextMenu">
            <summary>
            Use the default Scintilla's context menu.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.InitReadOnlyAlways">
            <summary>
            This control is used just to display text, not to edit.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="T:Au.Controls.AuScintilla.ImagesStyle">
            <summary>
            See <see cref="P:Au.Controls.AuScintilla.InitImagesStyle"/>.
            </summary>
        </member>
        <member name="F:Au.Controls.AuScintilla.ImagesStyle.NoImages">
            <summary>Don't show images. The <see cref="P:Au.Controls.AuScintilla.Images"/> property is null.</summary>
        </member>
        <member name="F:Au.Controls.AuScintilla.ImagesStyle.ImageTag">
            <summary>Display only images specified in tags like &lt;image "image file path"&gt;, including icons of non-image file types.</summary>
        </member>
        <member name="F:Au.Controls.AuScintilla.ImagesStyle.AnyString">
            <summary>Display images specified in any string like "image file path", and only of image file types. Then limits image height to 10 lines.</summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.InitImagesStyle">
            <summary>
            Whether and how to show images.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="T:Au.Controls.AuScintilla.TagsStyle">
            <summary>
            See <see cref="P:Au.Controls.AuScintilla.InitImagesStyle"/>.
            </summary>
        </member>
        <member name="F:Au.Controls.AuScintilla.TagsStyle.NoTags">
            <summary>Don't support tags. The <see cref="P:Au.Controls.AuScintilla.Tags"/> property is null.</summary>
        </member>
        <member name="F:Au.Controls.AuScintilla.TagsStyle.AutoWithPrefix">
            <summary>Let <see cref="P:Au.Controls.AuScintilla.Text"/>, ST.SetText and ST.AppendText parse tags when the text has prefix "&lt;&gt;".</summary>
        </member>
        <member name="F:Au.Controls.AuScintilla.TagsStyle.AutoAlways">
            <summary>Let <see cref="P:Au.Controls.AuScintilla.Text"/>, ST.SetText and ST.AppendText parse tags always.</summary>
        </member>
        <member name="F:Au.Controls.AuScintilla.TagsStyle.User">
            <summary>Tags are parsed only when calling Tags.AddText.</summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.InitTagsStyle">
            <summary>
            Whether and when supports tags.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.InitWrapVisuals">
            <summary>
            Whether to show arrows etc to make wrapped lines more visible.
            Must be set before creating control handle.
            </summary>
        </member>
        <member name="P:Au.Controls.AuScintilla.WrapLines">
            <summary>
            Word-wrap.
            </summary>
        </member>
        <member name="T:Au.Controls.SciTags">
            <summary>
            Adds links and text formatting to a <see cref="T:Au.Controls.AuScintilla"/> control.
            Links and formatting is specified in text, using tags like in HTML. Reference is in Remarks.
            Tags are supported by the <b>Print</b> function when it writes to the Au script editor.
            </summary>
            <remarks>
            Links and text formatting is specified in control text using tags similar to HTML. Depending on control style, may need prefix <c><![CDATA[<>]]></c>.
            
            For most tags use this format: <c><![CDATA[<tag>text<>]]></c> or <c><![CDATA[<tag attribute>text<>]]></c>. Attribute can be enclosed in ' or " (must be enclosed if contains &gt;).
            For these tags use different format: <c><![CDATA[<_>literal text</_>]]></c>, <c><![CDATA[<code>code</code>]]></c>, <c><![CDATA[<fold>text</fold>]]></c>, <c><![CDATA[<image "attribute">]]></c>.
            Tags can be nested, like <c><![CDATA[<b><c green>text<><>]]></c> or <c><![CDATA[<b>text <c green>text<> text<>]]></c>.
            
            Simple formatting tags:
            <list type="table">
            <listheader>
            <term>Examples</term>
            <term>Comments</term>
            </listheader>
            <item>
            <description><c><![CDATA[<b>text<>]]></c></description>
            <description>Bold text.</description>
            </item>
            <item>
            <description><c><![CDATA[<i>text<>]]></c></description>
            <description>Italic text.</description>
            </item>
            <item>
            <description><c><![CDATA[<bi>text<>]]></c></description>
            <description>Bold italic.</description>
            </item>
            <item>
            <description><c><![CDATA[<u>text<>]]></c></description>
            <description>Underline.</description>
            </item>
            <item>
            <description>
            <para><c><![CDATA[<c 0xE0A000>text<>]]></c></para>
            <para><c><![CDATA[<c #E0A000>text<>]]></c></para>
            <para><c><![CDATA[<c green>text<>]]></c></para>
            </description>
            <description>
            Text color.
            Color can be 0xRRGGBB, #RRGGBB or .NET color name.
            </description>
            </item>
            <item>
            <description><c><![CDATA[<z yellow>text<>]]></c></description>
            <description>Text background color.</description>
            </item>
            <item>
            <description><c><![CDATA[<Z wheat>text<>]]></c></description>
            <description>Line background color, when followed by new line.</description>
            </item>
            <item>
            <description><c><![CDATA[<size 10>text<>]]></c></description>
            <description>
            Font height.
            Note: it can increase height of all lines.
            </description>
            </item>
            <item>
            <description><c><![CDATA[<mono>text<>]]></c></description>
            <description>Monospace font.</description>
            </item>
            </list>
            
            Links:
            <list type="table">
            <listheader>
            <term>Examples</term>
            <term>Comments</term>
            </listheader>
            <item>
            <description>
            <para><c><![CDATA[<link http://www.example.com>link text<>]]></c></para>
            <para><c><![CDATA[<link C:\files\example.exe>link text<>]]></c></para>
            <para><c><![CDATA[<link>http://www.example.com<>]]></c></para>
            <para><c><![CDATA[<link>C:\files\example.exe<>]]></c></para>
            <para><c><![CDATA[<link C:\example.exe|args>link text<>]]></c></para>
            </description>
            <description>
            Opens a web page or runs a program or any file.
            Calls function <see cref="M:Au.Shell.TryRun(System.String,System.String,Au.Types.SRFlags,Au.Types.SRMore)"/>.
            </description>
            </item>
            <item>
            <description>
            <para><c><![CDATA[<google find this>link text<>]]></c></para>
            <para><c><![CDATA[<google>find this<>]]></c></para>
            <para><c><![CDATA[<google find this|append>link text<>]]></c></para>
            </description>
            <description>
            Google.
            Uses this code:
            <c>Shell.TryRun("http://www.google.com/search?q=" + Uri.EscapeDataString(s1) + s2);</c>
            Here s1 and s2 are attribute parts separated by |.
            </description>
            </item>
            <item>
            <description>
            <c><![CDATA[<help M_Au_Wnd_Find>link text<>]]></c>
            </description>
            <description>
            Shows an Au class library help topic (file "Au Help.chm").
            Calls <see cref="M:Au.Util.Help.AuHelp(System.String)"/>.
            Attribute: right click in the help topic, click Properties, copy filename from the Address field.
            </description>
            </item>
            <item>
            <description>
            <para><c><![CDATA[<open document>link text<>]]></c></para>
            <para><c><![CDATA[<open>document<>]]></c></para>
            <para><c><![CDATA[<open document|5>link text<>]]></c></para>
            <para><c><![CDATA[<open document|5|15>link text<>]]></c></para>
            </description>
            <description>
            Should open a document or script or some other item in the program.
            This control does not implement this tag. If used, it must be implemented by the program.
            See <see cref="M:Au.Controls.SciTags.AddLinkTag(System.String,System.Action{System.String})"/>, <see cref="M:Au.Controls.SciTags.AddCommonLinkTag(System.String,System.Action{System.String})"/>.
            The 5 is 1-based line index; 15 is 1-based character index in line.
            </description>
            </item>
            <item>
            <description>
            <para><c><![CDATA[<explore>C:\files\example<>]]></c></para>
            </description>
            <description>
            Selects file or folder in File Explorer.
            Calls function <see cref="M:Au.Shell.SelectFileInExplorer(System.String)"/>.
            </description>
            </item>
            <item>
            <description>
            <para><c><![CDATA[<script script>link text<>]]></c></para>
            <para><c><![CDATA[<script>script<>]]></c></para>
            <para><c><![CDATA[<script script|args0|args1>link text<>]]></c></para>
            </description>
            <description>
            Should run/execute a script.
            This control does not implement this tag. If used, it must be implemented by the program.
            See <see cref="M:Au.Controls.SciTags.AddLinkTag(System.String,System.Action{System.String})"/>, <see cref="M:Au.Controls.SciTags.AddCommonLinkTag(System.String,System.Action{System.String})"/>.
            </description>
            </item>
            </list>
            Also you can register custom link tags that call your callback functions. See <see cref="M:Au.Controls.SciTags.AddLinkTag(System.String,System.Action{System.String})"/>, <see cref="M:Au.Controls.SciTags.AddCommonLinkTag(System.String,System.Action{System.String})"/>.
            
            Other tags:
            <list type="table">
            <listheader>
            <term>Examples</term>
            <term>Comments</term>
            </listheader>
            <item>
            <description><c><![CDATA[<_>text</_>]]></c></description>
            <description>Literal text. Tags in it are ignored.</description>
            </item>
            <item>
            <description><c><![CDATA[<code>var s="example";</code>]]></c></description>
            <description>Colored C# code. Tags in it are ignored.</description>
            </item>
            <item>
            <description><c><![CDATA[<fold>text</fold>]]></c></description>
            <description>
            Folded (hidden) lines. Adds a link to unfold (show).
            </description>
            </item>
            <item>
            <description>
            <para><c><![CDATA[<image "c:\images\example.png">]]></c></para>
            <para><c><![CDATA[<image "c:\files\example.txt">]]></c></para>
            <para><c><![CDATA[<image "image:PngBase64">]]></c></para>
            <para><c><![CDATA[<image "~:BmpCompressedBase64">]]></c></para>
            <para><c><![CDATA[<image "resource:ResourceName">]]></c></para>
            </description>
            <description>
            Image.
            Images are displayed below this line.
            Supports images of formats: png, bmp, jpg, gif, ico (only 16x16).
            For other file types and folders displays small file icon.
            Supports managed image resources of the entry assembly. Not icons.
            Image file data is encoded as Base64 string. For it can be used dialog
            "Find image or color in window" (form <b>Au.Tools.Form_WinImage</b> in Au.Tools.dll)
            or function Au.Controls.ImageUtil.ImageToString (in Au.Controls.dll).
            </description>
            </item>
            </list>
            
            Tags are supported by some existing controls based on <see cref="T:Au.Controls.AuScintilla"/>. In the Au script editor it is the output (use <b>Print</b>, like in the example below). In this library - the <see cref="T:Au.Controls.AuInfoBox"/> control. To enable tags in other <see cref="T:Au.Controls.AuScintilla"/> controls, use <see cref="P:Au.Controls.AuScintilla.InitTagsStyle"/> and optionally <see cref="P:Au.Controls.AuScintilla.InitImagesStyle"/>.
            </remarks>
            <example>
            <code><![CDATA[
            Print("<>Text with <i>tags<>.");
            ]]></code>
            </example>
        </member>
        <member name="M:Au.Controls.SciTags._ClearUserStyles">
            <summary>
            Clears user-defined (through tags) styles.
            Max number of user styles is NUM_STYLES_EX (216). Need to clear old styles before new styles can be defined.
            This func is usually called after clearing control text.
            </summary>
        </member>
        <member name="M:Au.Controls.SciTags.OutputServerProcessMessages(Au.Util.OutputServer,System.Action{Au.Util.OutputServer.Message})">
            <summary>
            Displays <see cref="T:Au.Util.OutputServer"/> messages that are currently in its queue.
            </summary>
            <param name="os">The OutputServer instance.</param>
            <param name="onMessage">A callback function that can be called when this function gets/removes a message from os.</param>
            <remarks>
            Removes messages from the queue.
            Appends text messages + "\r\n" to the control's text, or clears etc (depends on message).
            Messages with tags must have prefix "&lt;&gt;".
            Limits text length to about 4 MB (removes oldest text when exceeded).
            </remarks>
            <seealso cref="M:Au.Util.OutputServer.SetNotifications(System.Action,System.Windows.Forms.Control)"/>
        </member>
        <member name="M:Au.Controls.SciTags.AddText(System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets or appends styled text.
            </summary>
            <param name="text">Text with tags (optionally).</param>
            <param name="appendLine">Append. Also appends "\r\n". Sets caret and scrolls to the end. If false, replaces control text.</param>
            <param name="skipLTGT">If text starts with "&lt;&gt;", skip it.</param>
        </member>
        <member name="M:Au.Controls.SciTags.LibOnLinkClick(System.Int32,System.Boolean)">
            <summary>
            Called on SCN_HOTSPOTRELEASECLICK.
            </summary>
        </member>
        <member name="M:Au.Controls.SciTags.AddLinkTag(System.String,System.Action{System.String})">
            <summary>
            Adds (registers) a user-defined link tag for this control.
            </summary>
            <param name="name">
            Tag name, like "+myTag".
            Must start with '+'. Other characters must be 'a'-'z', 'A'-'Z'. Case-sensitive.
            Or can be one of predefined link tags, if you want to override or implement it (some are not implemented by the control).
            If already exists, replaces the delegate.
            </param>
            <param name="a">
            A delegate of a callback function (probably you'll use a lambda) that is called on link click.
            It's string parameter contains tag's attribute (if "&lt;name "attribute"&gt;TEXT&lt;&gt;) or link text (if "&lt;name&gt;TEXT&lt;&gt;).
            The function is called in control's thread. The mouse button is already released. It is safe to do anything with the control, eg replace text.
            </param>
            <seealso cref="M:Au.Controls.SciTags.AddCommonLinkTag(System.String,System.Action{System.String})"/>
        </member>
        <member name="M:Au.Controls.SciTags.AddCommonLinkTag(System.String,System.Action{System.String})">
            <summary>
            Adds (registers) a user-defined link tag for all controls.
            </summary>
            <param name="name">
            Tag name, like "+myTag".
            Must start with '+'. Other characters must be 'a'-'z', 'A'-'Z'. Case-sensitive.
            Or can be one of predefined link tags, if you want to override or implement it (some are not implemented by the control).
            If already exists, replaces the delegate.
            </param>
            <param name="a">
            A delegate of a callback function (probably you'll use a lambda) that is called on link click.
            It's string parameter contains tag's attribute (if "&lt;name "attribute"&gt;TEXT&lt;&gt;) or link text (if "&lt;name&gt;TEXT&lt;&gt;).
            The function is called in control's thread. The mouse button is already released. It is safe to do anything with the control, eg replace text.
            </param>
            <seealso cref="M:Au.Controls.SciTags.AddLinkTag(System.String,System.Action{System.String})"/>
        </member>
        <member name="T:Au.Controls.NamespaceDoc">
            <summary>
            Controls.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel._Node">
            <summary>
            Base of _Split, _ContentNode (_Panel and _Tab) and _DummyNode.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel._Node.IsDocked">
            <summary>
            Returns true if is docked in main window or in a floating tab.
            </summary>
            <seealso cref="M:Au.Controls.AuDockPanel._ContentNode.IsDockedOn(System.Windows.Forms.Control)"/>
        </member>
        <member name="T:Au.Controls.AuDockPanel._ContentNode">
            <summary>
            Base of _Panel and _Tab.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._ContentNode.HitTestCaption(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Returns true if x/y is in caption and this is visible and is a child of parent.
            For tabbed _Panel returns true only if x/y is in its tab button, unless there are no visible siblings.
            For _Tab returns true even if on a tab button.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._ContentNode.Show(System.Boolean)">
            <summary>
            Shows in the most recent visible state. Activates tab group panel.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._ContentNode.Hide">
            <summary>
            Hides, does not close.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._ContentNode.DockBy(Au.Controls.AuDockPanel._ContentNode,Au.Controls.AuDockPanel._DockHow)">
            <summary>
            Docks this _Panel or _Tab in an existing or new _Tab or _Split.
            If need, creates new _Tab or _Split in gcTarget place and adds gcTarget and this to it. Else reorders if need.
            This can be a new _Panel, with null ParentSplit and ParentTab, dock state not Docked.
            </summary>
            <param name="gcTarget">New sibling _Panel (side can be any) or sibling _Tab (when side is SplitX) or parent _Tab (when side is TabX).</param>
            <param name="side">Specifies whether to add on a _Tab or _Split, and at which side of gcTarget.</param>
        </member>
        <member name="T:Au.Controls.AuDockPanel._Float">
            <summary>
            Floating parent form of a _Panel.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel._Float.ShowWithoutActivation">
            <summary>
            1. Prevents activating window when showing. 2. Allows to show ToolTip for inactive window.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel._Float._DockIndicator">
            <summary>
            Calculates and shows transparent rectangles where the floating panel can be docked when dragging it.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Float._DockIndicator._OnFloatMoved(System.Drawing.Point,Au.Types.RECT@,Au.Types.RECT@)">
            <summary>
            Everything is in _manager client area.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Float._DockIndicator._CalcDockRectPart(Au.Types.RECT,System.Drawing.Point)">
            <summary>
            Returns the left, top, right or bottom half of r, depending on where p is in it.
            Sets _target.side.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Float._DockIndicator._CalcNewTabButtonRectInFullCaption(Au.Controls.AuDockPanel._Panel,Au.Types.RECT,System.Drawing.Point)">
            <summary>
            Returns a half of r (gp full caption, not just tab button), depending on where p is (even if not in r).
            Sets _target.side.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel._Float.DockTarget">
            <summary>
            _Float.Drag() and _DockIndicator.OnFloatDropped() return this if can be docked.
            </summary>
        </member>
        <member name="F:Au.Controls.AuDockPanel._Float.DockTarget.gc">
            <summary>
            The target.
            Note: when dockAsTab is true, it currently may be tabbed or not; if tabbed, may be docked or not.
            </summary>
        </member>
        <member name="F:Au.Controls.AuDockPanel._Float.DockTarget.side">
            <summary>Specifies whether to add on a _Tab or _Split, and at which side of gc.</summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel._Panel">
            <summary>
            Contains single Control.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Panel.#ctor(Au.Controls.AuDockPanel,Au.Controls.AuDockPanel._Split,System.Xml.Linq.XElement,Au.Controls.AuDockPanel._Tab)">
            <summary>
            This ctor is used at startup, when adding from XML.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel._Panel.Visible">
            <summary>
            note: this is not just !IsHidden. Returns false if in a hidden tab group even if IsHidden is false.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Panel._IsVisible(System.Boolean)">
            <summary>
            Returns true if this isn't hidden and isn't in a hidden tab group.
            </summary>
            <param name="andContentVisible">And isn't an inactive tab.</param>
        </member>
        <member name="P:Au.Controls.AuDockPanel.IPanel.Content">
            <summary>
            The child Control.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel.IPanel.Text">
            <summary>
            Panel caption text. Also tab button text.
            If null or not set, uses control's Name property.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel.IPanel.ToolTipText">
            <summary>
            Tooltip text.
            If null or not set, uses Text (default - control's Name property).
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel.IPanel.Image">
            <summary>
            Image to display on tab button if it is too small for text.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel.IPanel.Init(System.String,System.Drawing.Image)">
            <summary>
            Sets commonly used properties. Can be used to avoid several function calls (Image, ToolTipText).
            </summary>
            <param name="toolTip">Tooltip text.</param>
            <param name="image">Image to display on tab button if it is too small for text.</param>
        </member>
        <member name="P:Au.Controls.AuDockPanel.IPanel.Visible">
            <summary>
            The 'get' function returns true if the panel or its tab button is visible. Returns false if it is hidden or its parent tab group is hidden.
            The 'set' function makes the panel visible, in the most recent state (docked or floating). Activates its tab button if need.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel.IPanel.ReallyVisible">
            <summary>
            Returns true if the panel is visible.
            Returns false if it is hidden or its parent tab group is hidden or it is an inactive tab.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel.IPanel.Floating">
            <summary>
            The 'get' function returns true if the panel is floating and not hidden.
            The 'set' function: if true, makes this panel floating and visible if it is currently docked or hidden; if false, makes it docked if it is currently floating and visible.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel.IPanel.Focus">
            <summary>
            Make the panel visible (like <see cref="P:Au.Controls.AuDockPanel.IPanel.Visible"/>) and focus its control.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel.Create(System.String,System.String,System.Windows.Forms.Control[])">
            <summary>
            Loads UI layout from XML file and adds controls (panels, toolbars) to this control.
            Adjusts control properties and positions everything according to the XML.
            </summary>
            <param name="xmlFileDefault">XML file containing default panel/toolbar layout.</param>
            <param name="xmlFileCustomized">XML file containing customized panel/toolbar layout. It will be created or updated when saving customizations.</param>
            <param name="controls">Controls. Control Name must match the XML element (panel) name attribute in the XML.</param>
        </member>
        <member name="P:Au.Controls.AuDockPanel._HitTestData.ParentTab">
            <summary>
            If hit test on a tabbed _Panel, returns its parent _Tab, else null.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel._HitTestData.ContentNode">
            <summary>
            If hit test on a _ContentNode, returns it, else null.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._HitTest(System.Windows.Forms.Control,System.Int32,System.Int32,Au.Controls.AuDockPanel._HitTestData@)">
            <summary>
            If hit-test on a splitter, sets ht.gs and returns _HitTestResult.Splitter.
            Else if on a _Panel caption or _Panel tab button, sets gp and returns _HitTestResult.Caption.
            Else (if on a _Tab caption but not a  _Panel tab button) sets gt and returns _HitTestResult.Caption.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel.GetPanel(System.Windows.Forms.Control)">
            <summary>
            Gets control's host panel interface.
            Returns null if not found.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel.GetPanel(System.String)">
            <summary>
            Gets panel interface by name.
            Returns null if not found.
            </summary>
            <param name="name">Panel name, which is its control's Name property.</param>
        </member>
        <member name="M:Au.Controls.AuDockPanel.AddShowPanelsToMenu(System.Windows.Forms.ToolStripDropDown,System.Boolean,System.Boolean)">
            <summary>
            Adds menu items for all panels or toolbars, except the doc panel, to a menu.
            On menu item click will show that panel.
            </summary>
        </member>
        <member name="P:Au.Controls.AuDockPanel.ResetLayoutAfterRestart">
            <summary>
            When disposing this, delete the user's saved layout file. Then next time will use the default file.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel.EnableDisableAllFloatingWindows(System.Boolean)">
            <summary>
            Call this in main window's WndProc override on WM_ENABLE.
            </summary>
            <param name="enable">Enable or disable.</param>
        </member>
        <member name="T:Au.Controls.AuDockPanel.DPEventArgs">
            <summary>
            Used with many AuDockPanel events and othe callbacks.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel.DPEventArgs.#ctor(System.Object)">
            <summary>ctor.</summary>
            <param name="gPanel">Must be _Panel. We use object because C# compiler does not allow to use _Panel (less accessible).</param>
        </member>
        <member name="T:Au.Controls.AuDockPanel.DPEventHandler`1">
            <summary>
            Used with many AuDockPanel events and other callbacks.
            </summary>
        </member>
        <member name="E:Au.Controls.AuDockPanel.PanelContextMenu">
            <summary>
            Before showing the context menu when the user right-clicks a panel tab button or caption.
            The event handler can add/remove/etc menu items.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel.DockedToolStripRenderer">
            <summary>
            Removes rounded edges of the ToolStrip to which is assigned.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel._Split">
            <summary>
            Contains 2 _Node (_Panel, _Tab, _Split or _DummyNode) and a splitter.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.#ctor(Au.Controls.AuDockPanel,Au.Controls.AuDockPanel._Split,System.Xml.Linq.XElement)">
            <summary>
            This ctor is used at startup, when adding from XML.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.#ctor(Au.Controls.AuDockPanel,Au.Controls.AuDockPanel._Split,Au.Controls.AuDockPanel._Node,Au.Controls.AuDockPanel._Node,System.Boolean)">
            <summary>
            This ctor is used when a floating _ContentNode dropped on a docked _ContentNode.
            child1 or child2 must be docked, but not both.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.OnChildRemoved(Au.Controls.AuDockPanel._Node)">
            <summary>
            Puts gn sibling in parent split of this, in place of this.
            Makes this invalid and removes from _aSplit.
            Does not update layout.
            </summary>
            <param name="gn">One of children. The caller is removing it from this.</param>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.ReplaceChild(Au.Controls.AuDockPanel._Node,Au.Controls.AuDockPanel._Node)">
            <summary>
            Replaces child gnOld with gnNew.
            Sets gnNew.ParentSplit = this.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.RepositionChild(Au.Controls.AuDockPanel._Node,System.Boolean,System.Boolean)">
            <summary>
            Changes IsVerticalSplit, Child1 and Child2 if need.
            Does not update layout.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.DragSplitter">
            <summary>
            Called on mouse left button down on splitter.
            Returns when the drag operation ends.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.Paint(System.Drawing.Graphics)">
            <summary>
            Called from AuDockPanel.OnPaint, for its _firstSplit.
            Paints all descendants.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.SetChildFixedSize(Au.Controls.AuDockPanel._Node,System.Boolean,System.Boolean)">
            <summary>
            Sets a child (of this, or of an ancestor if need) to have fixed width or height.
            Used for context menu.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Split.IsChildFixedSize(Au.Controls.AuDockPanel._Node,System.Boolean)">
            <summary>
            Gets whether a child (of this, or of an ancestor if need) has fixed width or height.
            Used for context menu.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel._Tab">
            <summary>
            Contains multiple _Panel.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Tab.#ctor(Au.Controls.AuDockPanel,Au.Controls.AuDockPanel._Split,System.Xml.Linq.XElement)">
            <summary>
            This ctor is used at startup, when adding from XML.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Tab.#ctor(Au.Controls.AuDockPanel,Au.Controls.AuDockPanel._Split,Au.Controls.AuDockPanel._Panel,Au.Controls.AuDockPanel._Panel)">
            <summary>
            This ctor is used when a floating _Panel dropped on a docked non-tabbed _Panel caption.
            item1 or item2 must be docked, but not both.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Tab._CalcButtonsBounds(System.Drawing.Graphics)">
            <summary>
            Returns buttons width.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Tab.SetActiveItem(Au.Controls.AuDockPanel._Panel,System.Boolean)">
            <summary>
            Sets ActiveItem, shows its contents, hides previous ActiveItem contents, invalidate caption, calls DockedDocumentPanelActivated event.
            </summary>
            <param name="gp">Can be null to deactivate all.</param>
            <param name="focusControl"></param>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Tab.OnItemRemoved(Au.Controls.AuDockPanel._Panel)">
            <summary>
            Removes a child panel from Items.
            If single item left, moves it to this parent and invalidates/removes this.
            </summary>
        </member>
        <member name="M:Au.Controls.AuDockPanel._Tab.AddOrReorderItem(Au.Controls.AuDockPanel._Panel,Au.Controls.AuDockPanel._Panel,System.Boolean)">
            <summary>
            If gp is child of this, moves it to the place before or after target (a child of this).
            Else just inserts gp there.
            If target is null, adds to the end (does nothing if gp is child).
            Does not update layout.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel._AccContainer">
            <summary>
            Used by AuDockPanel and _Float.
            </summary>
        </member>
        <member name="T:Au.Controls.AuDockPanel._AccNode">
            <summary>
            AccessibleObject of _Node.
            We use separate class (don't inherit _Node from AccessibleObject) to avoid _Node cluttering and conflicts (Name, Bounds etc).
            </summary>
        </member>
        <member name="P:Au.Controls.Sci.SCNotification.Text">
            <summary>
            Converts textUTF8 to C# string.
            Returns null if textUTF8 is null.
            Don't call this property multiple times for the same notification. Store the return value in a variable and use it.
            </summary>
        </member>
        <member name="T:Au.Controls.SciImages">
            <summary>
            Gets image file paths etc from <see cref="T:Au.Controls.AuScintilla"/> control text and displays the images below that lines.
            </summary>
            <remarks>
            Draws images in annotation areas.
            Supports text annotations too, below images and in no-image lines. But it is limited:
            1. To set/get it use <see cref="M:Au.Controls.SciText.AnnotationText(System.Int32,System.String)"/>, not direct Scintilla API.
            2. You cannot hide all annotations (SCI_ANNOTATIONSETVISIBLE). This class sets it to show always.
            3. You cannot clear all annotations (SCI_ANNOTATIONCLEARALL).
            4. Setting annotation styles is currently not supported.
            </remarks>
        </member>
        <member name="M:Au.Controls.SciImages._ThreadSharedData.CompactCache">
            <summary>
            If cache is large (at least MaxCacheSize and 4 images), removes about 3/4 of older cached images.
            Will auto-reload from files etc when need.
            </summary>
        </member>
        <member name="M:Au.Controls.SciImages.#ctor(Au.Controls.AuScintilla,System.Boolean)">
            <summary>
            Prepares this variable and the Scintilla control to display images.
            Calls SCI_ANNOTATIONSETVISIBLE(ANNOTATION_STANDARD). Need it because will draw images in annotation areas.
            </summary>
            <param name="c">The control.</param>
            <param name="isEditor">Display images that are not in "&lt;image "path etc"&gt; tag. Then does not display icons of files that don't contain images. Then limits image height to 10 lines.</param>
        </member>
        <member name="M:Au.Controls.SciImages.ClearCache">
            <summary>
            Removes all cached images.
            Will auto-reload from files etc when need.
            </summary>
        </member>
        <member name="M:Au.Controls.SciImages.CompactCache">
            <summary>
            If cache is large (at least MaxCacheSize and 4 images), removes about 3/4 of older cached images.
            Will auto-reload from files etc when need.
            </summary>
        </member>
        <member name="P:Au.Controls.SciImages.MaxCacheSize">
            <summary>
            Maximal size of the image cache.
            Default 4 MB.
            </summary>
        </member>
        <member name="M:Au.Controls.SciImages._SetImagesForTextRange(System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Sets image annotations for one or more lines of text.
            </summary>
            <param name="firstLine">First line index.</param>
            <param name="text">Text that starts at line firstLine.</param>
            <param name="length">Text length.</param>
            <param name="allText">Added all text (not edited or appended).</param>
            <param name="textPos">Position where the text starts.</param>
        </member>
        <member name="M:Au.Controls.SciImages._ParseAnnotText(System.Byte*,System.Int32,System.Int32@)">
            <summary>
            Parses annotation text.
            If it starts with image info string ("\x3NNN\n\n..."), returns its length. Else returns 0.
            </summary>
            <param name="s">Annotation text. Can start with image info string or not.</param>
            <param name="length">s length.</param>
            <param name="imageInfo">The NNN part of image info, or 0.</param>
        </member>
        <member name="M:Au.Controls.SciImages.LibAnnotationText(System.Int32,System.String)">
            <summary>
            Sets annotation text, preserving existing image info.
            </summary>
            <param name="line"></param>
            <param name="s">New text without image info.</param>
        </member>
        <member name="M:Au.Controls.SciImages.LibAnnotationText(System.Int32)">
            <summary>
            Gets annotation text without image info.
            </summary>
        </member>
        <member name="M:Au.Controls.SciImages._GetTextRange(System.Int32,System.Int32)">
            <summary>
            Copies text range to BufferForText.
            If cannot get from-to length text, asserts and returns null.
            Does not validate arguments.
            </summary>
        </member>
        <member name="P:Au.Controls.SciImages.Visible">
            <summary>
            Hides/shows all images, or changes the display style of annotation areas.
            Default is ANNOTATION_STANDARD (images visible).
            When hiding, it just removes images, does not hide text annotations (SCI_ANNOTATIONGETVISIBLE remains unchanged).
            </summary>
        </member>
        <member name="F:Au.Controls.AuStripManagerPropertiesDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Au.Controls.AuStripManagerPropertiesDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Au.Controls.AuStripManagerPropertiesDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Au.Controls.IGStripManagerCallbacks">
            <summary>
            <see cref="T:Au.Controls.AuStripManager"/> uses this interface to get properties of menu/toolbar items that it cannot get from XML (Click event handlers, images etc).
            Also used to notify about some events.
            </summary>
        </member>
        <member name="M:Au.Controls.IGStripManagerCallbacks.GetImage(System.String)">
            <summary>
            Gets menu/toolbar item image.
            </summary>
            <param name="imageName">XML i attribute.</param>
        </member>
        <member name="M:Au.Controls.IGStripManagerCallbacks.GetClickHandler(System.String)">
            <summary>
            Gets menu/toolbar item Click event handler.
            Returns null if the item is not a command, for example if it is a submenu-item or control-item.
            Called before creating the ToolStripItem.
            </summary>
            <param name="itemName">Menu/toolbar item name (XML tag).</param>
        </member>
        <member name="M:Au.Controls.IGStripManagerCallbacks.ItemAdding(System.Windows.Forms.ToolStripItem,System.Windows.Forms.ToolStrip)">
            <summary>
            Called before adding an item to a toolbar or menu/submenu.
            </summary>
            <param name="item">Can be ToolStripMenuItem, ToolStripButton, ToolStripSplitButton, ToolStripDropDownButton, ToolStripSpringTextBox, ToolStripSpringComboBox, ToolStripSeparator. Its Tag property is XElement.</param>
            <param name="owner">ToolStrip, MenuStrip or ToolStripDropDownMenu to which will be added this item. Its Tag property is XElement.</param>
        </member>
        <member name="P:Au.Controls.AuStripManager.MenuBar">
            <summary>
            Menu bar.
            </summary>
        </member>
        <member name="P:Au.Controls.AuStripManager.Toolbars">
            <summary>
            Toolbars.
            </summary>
        </member>
        <member name="P:Au.Controls.AuStripManager.Submenus">
            <summary>
            Submenus.
            </summary>
        </member>
        <member name="M:Au.Controls.AuStripManager.#ctor(System.Windows.Forms.Form,Au.Controls.IGStripManagerCallbacks)">
            <param name="form">Form used as owner of dialog boxes.</param>
            <param name="callbacks"></param>
        </member>
        <member name="M:Au.Controls.AuStripManager.BuildAll(System.String,System.String,System.Windows.Forms.ToolStripRenderer)">
            <summary>
            Opens XML file and creates toolbars/menus/submenus from XML tags.
            </summary>
            <param name="xmlFile">XML file containing menus/toolbars without user customizations.</param>
            <param name="xmlFileCustom">XML file containing user customizations. It will be created or updated when saving customizations.</param>
            <param name="tsRenderer"></param>
        </member>
        <member name="M:Au.Controls.AuStripManager._AddChildItems(System.Xml.Linq.XElement,System.Windows.Forms.ToolStrip,System.Boolean)">
            <summary>
            Adds toolbar buttons or menu bar items.
            Call this for each top-level toolstrip (toolbar or menu bar).
            </summary>
            <param name="xParent">XML element of the toolbar or menu bar.</param>
            <param name="owner">The toolbar or menu bar.</param>
            <param name="isMenu">true if menu, false if toolbar.</param>
        </member>
        <member name="M:Au.Controls.AuStripManager._AddChildItem(System.Xml.Linq.XElement,System.Windows.Forms.ToolStripItem,System.Windows.Forms.ToolStrip,System.Int32)">
            <summary>
            Adds item to owner.
            Before it calls <see cref="M:Au.Controls.IGStripManagerCallbacks.ItemAdding(System.Windows.Forms.ToolStripItem,System.Windows.Forms.ToolStrip)"/>.
            </summary>
            <param name="x">item's element. This function assigns item to its annotation. Caller must assign x to item.Tag before calling this function.</param>
            <param name="item">Can be ToolStripMenuItem, ToolStripButton, ToolStripSplitButton, ToolStripDropDownButton, ToolStripSpringTextBox, ToolStripSpringComboBox, ToolStripSeparator.</param>
            <param name="owner">ToolStrip, MenuStrip or ToolStripDropDownMenu to which to add this item.</param>
            <param name="insertAt">If not negative, inserts at this index. If negative, adds to the end.</param>
        </member>
        <member name="M:Au.Controls.AuStripManager._CreateChildItem(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Creates a menu or toolbar item.
            </summary>
            <param name="x">XML element containing item properties.</param>
            <param name="isMenu">false if toolbar item, true if menu item (also if menu bar item).</param>
        </member>
        <member name="M:Au.Controls.AuStripManager._GetDefaultItemText(System.Xml.Linq.XElement)">
            <summary>
            If x has attribute t, gets its value.
            Else gets its name and converts to text, eg "File_OneTwo" to "One Two".
            </summary>
        </member>
        <member name="M:Au.Controls.AuStripManager._MergeCustom(System.Xml.Linq.XElement,System.Xml.Linq.XElement@,System.String,System.Boolean)">
            <summary>
            Merges custom attributes into default menubar or toolbar XML.
            Reorders toolbar buttons if need.
            </summary>
            <param name="xCustom">Root element of customizations file.</param>
            <param name="xtsDef">Default menustrip or toolstrip. For custom toolbars the function can replace it.</param>
            <param name="name">xtsDef name, just to avoid getting it again.</param>
            <param name="isMenu"></param>
        </member>
        <member name="M:Au.Controls.AuStripManager._DiffCustom">
            <summary>
            Extracts differences between _xmlFileDefault and _xStrips and saves to _xmlFileCustom.
            </summary>
        </member>
        <member name="M:Au.Controls.AuStripManager._OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Toolbar button MouseUp handler. Implements context menu that allows to customize.
            </summary>
        </member>
        <member name="M:Au.Controls.AuStripManager._Strips_Customize(System.UInt32,System.Windows.Forms.ToolStripItem,System.Windows.Forms.ToolStrip,System.Object)">
            <summary>
            Implements toolbar button customization.
            </summary>
            <param name="action">1 copy, 2 move, 3 remove, 4 separator, 5 hide/unhide, 6 properties.</param>
            <param name="item">Button.</param>
            <param name="tsTo">Destination toolbar, or null if don't need.</param>
            <param name="etc">
            With action 2 (move) can be the target button as ToolStripItem; if null, moves to the end.
            With action 6 (properties) - AuStripManagerPropertiesDialog.
            </param>
        </member>
        <member name="M:Au.Controls.AuStripManager._OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Toolbar button MouseDown handler. Implements toolbar button reordering with Alt+drag.
            </summary>
        </member>
        <member name="M:Au.Controls.AuStripManager.Find(System.String)">
            <summary>
            Gets menu items and toolbar buttons that have the specified name (XML tag).
            If not found, returns empty List.
            </summary>
            <param name="name">XML tag.</param>
        </member>
        <member name="T:Au.Controls.ScrollableControl_">
            <summary>
            Allows to set/get scroll info and receive scroll notifications.
            This class exists because .NET ScrollableControl does not work when AutoScroll is false.
            </summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.LibBitmapFileInfo.biHeader">
            <summary>
            Can be BITMAPINFOHEADER/BITMAPV5HEADER or BITMAPCOREHEADER.
            </summary>
        </member>
        <member name="M:Au.Controls.ImageUtil.LibGetBitmapFileInfo(System.Byte[],Au.Controls.ImageUtil.LibBitmapFileInfo@)">
            <summary>
            Gets some info from BITMAPINFOHEADER or BITMAPCOREHEADER.
            Checks if it is valid bitmap file header. Returns false if invalid.
            </summary>
        </member>
        <member name="T:Au.Controls.ImageUtil.ImageType">
            <summary>
            Image type as detected by <see cref="M:Au.Controls.ImageUtil.ImageTypeFromString(System.Boolean,System.String)"/>.
            </summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.None">
            <summary>The string isn't image.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.Base64CompressedBmp">
            <summary>Compressed and Base64-encoded .bmp file data with "~:" prefix. See <see cref="M:Au.Controls.ImageUtil.ImageToString(System.String)"/>.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.Base64PngGifJpg">
            <summary>Base64-encoded .png/gif/jpg file data with "image:" prefix.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.Resource">
            <summary>"resource:name". An image resource name from managed resources of the entry assembly.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.Bmp">
            <summary>.bmp file path.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.PngGifJpg">
            <summary>.png, .gif or .jpg file path.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.Ico">
            <summary>.ico file path.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.Cur">
            <summary>.cur or .ani file path.</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.IconLib">
            <summary>Icon from a .dll or other file containing icons, like @"C:\a\b.dll,15".</summary>
        </member>
        <member name="F:Au.Controls.ImageUtil.ImageType.ShellIcon">
            <summary>None of other image types, when <i>anyFile</i> is true.</summary>
        </member>
        <member name="M:Au.Controls.ImageUtil.ImageTypeFromString(System.Boolean,System.Byte*,System.Int32)">
            <summary>
            Gets image type from string.
            </summary>
            <param name="anyFile">When the string is valid but not of any image type, return ShellIcon instead of None.</param>
            <param name="s">File path etc. See <see cref="T:Au.Controls.ImageUtil.ImageType"/>.</param>
            <param name="length">If -1, calls LibCharPtr.Length(s).</param>
        </member>
        <member name="M:Au.Controls.ImageUtil.ImageTypeFromString(System.Boolean,System.String)">
            <summary>
            Gets image type from string.
            </summary>
            <param name="anyFile">When the string is valid but not of any image type, return ShellIcon instead of None.</param>
            <param name="s">File path etc. See <see cref="T:Au.Controls.ImageUtil.ImageType"/>.</param>
        </member>
        <member name="M:Au.Controls.ImageUtil.BmpFileDataFromString(System.String,Au.Controls.ImageUtil.ImageType,System.Boolean)">
            <summary>
            Loads image and returns its data in .bmp file format.
            </summary>
            <param name="s">Depends on t. File path or resource name without prefix or Base64 image data without prefix.</param>
            <param name="t">Image type and string format.</param>
            <param name="searchPath">Use <see cref="M:Au.File_.SearchPath(System.String,System.String[])"/></param>
            <remarks>Supports environment variables etc. If not full path, searches in <see cref="P:Au.Folders.ThisAppImages"/>.</remarks>
        </member>
        <member name="M:Au.Controls.ImageUtil.BmpFileDataToString(System.Byte[])">
            <summary>
            Compresses .bmp file data (<see cref="M:Au.Convert_.Compress(System.Byte[])"/>) and Base64-encodes.
            Returns string with "~:" prefix.
            </summary>
        </member>
        <member name="M:Au.Controls.ImageUtil.ImageToString(System.String)">
            <summary>
            Converts image file data to string that can be used in source code instead of file path. It is supported by some functions of this library, for example <see cref="M:Au.WinImage.Find(Au.Types.WIArea,System.Object,Au.Types.WIFlags,System.Int32,System.Func{Au.WinImage,Au.Types.WIAlso})"/>.
            Returns string with prefix "image:" (Base-64 encoded .png/gif/jpg file data) or "~:" (Base-64 encoded compressed .bmp file data).
            Supports all <see cref="T:Au.Controls.ImageUtil.ImageType"/> formats. For non-image files gets icon. Converts icons to bitmap.
            Returns null if path is not a valid image string or the file does not exist or failed to load.
            </summary>
            <remarks>Supports environment variables etc. If not full path, searches in Folders.ThisAppImages and standard directories.</remarks>
        </member>
    </members>
</doc>
