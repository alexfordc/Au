<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TreeList</name>
    </assembly>
    <members>
        <member name="T:Au.Controls.AuScrollableControl">
            <summary>
            Allows to set/get scroll info and receive scroll notifications.
            This class exists because .NET ScrollableControl does not work when AutoScroll is false.
            </summary>
        </member>
        <member name="T:Aga.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Aga.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Aga.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Aga.Controls.Properties.Resources.check">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Aga.Controls.Properties.Resources.DVSplit">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Aga.Controls.Properties.Resources.minus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Aga.Controls.Properties.Resources.plus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Aga.Controls.Properties.Resources.uncheck">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Aga.Controls.Properties.Resources.unknown">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="F:Aga.Controls.Tree.ImageScaleMode.Clip">
            <summary>
            Don't scale
            </summary>
        </member>
        <member name="F:Aga.Controls.Tree.ImageScaleMode.Fit">
            <summary>
            Scales image to fit the display rectangle, aspect ratio is not fixed.
            </summary>
        </member>
        <member name="F:Aga.Controls.Tree.ImageScaleMode.ScaleDown">
            <summary>
            Scales image down if it is larger than display rectangle, taking aspect ratio into account
            </summary>
        </member>
        <member name="F:Aga.Controls.Tree.ImageScaleMode.ScaleUp">
            <summary>
            Scales image up if it is smaller than display rectangle, taking aspect ratio into account
            </summary>
        </member>
        <member name="F:Aga.Controls.Tree.ImageScaleMode.AlwaysScale">
            <summary>
            Scales image to match the display rectangle, taking aspect ratio into account
            </summary>
        </member>
        <member name="M:Aga.Controls.Tree.InputState.MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            handle OnMouseMove event
            </summary>
            <param name="args"></param>
            <returns>true if event was handled and should be dispatched</returns>
        </member>
        <member name="F:Aga.Controls.Tree.NodeControls.BaseTextControl.FontNeeded">
            <summary>
            Invoked when calculating row height and before drawing.
            </summary>
        </member>
        <member name="E:Aga.Controls.Tree.NodeControls.BaseTextControl.DrawText">
            <summary>
            Fires when control is going to draw a text. Can be used to change text or back color
            </summary>
        </member>
        <member name="F:Aga.Controls.Tree.NodeControls.BaseTextControl.NeedDrawTextEvent">
            <summary>
            If not null, invoked before DrawText event, and does not fire the event if you return false.
            It is for performance.
            </summary>
        </member>
        <member name="M:Aga.Controls.Tree.TreeModelEventArgs.#ctor(Aga.Controls.Tree.TreePath,System.Object[])">
            <summary>
            
            </summary>
            <param name="parent">Path to a parent node</param>
            <param name="children">Child nodes</param>
        </member>
        <member name="M:Aga.Controls.Tree.TreeModelEventArgs.#ctor(Aga.Controls.Tree.TreePath,System.Int32[],System.Object[])">
            <summary>
            
            </summary>
            <param name="parent">Path to a parent node</param>
            <param name="indices">Indices of children in parent nodes collection</param>
            <param name="children">Child nodes</param>
        </member>
        <member name="P:Aga.Controls.Tree.TreeNodeAdv.IsVisible">
            <summary>
            Returns true if all parent nodes of this node are expanded.
            </summary>
        </member>
        <member name="M:Aga.Controls.Tree.TreeNodeAdv.TryGetFirstChild(Aga.Controls.Tree.TreeNodeAdv@)">
            <summary>
            If has children, gets first child node and returns true.
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Aga.Controls.Tree.TreeViewAdv">
            <summary>
            Extensible advanced <see cref="T:System.Windows.Forms.TreeView"/> implemented in 100% managed C# code.
            Features: Model/View architecture. Multiple column per node. Ability to select
            multiple tree nodes. Different types of controls for each node column: 
            <see cref="T:System.Windows.Forms.CheckBox"/>, Icon, Label... Drag and Drop highlighting. Load on
            demand of nodes. Incremental search of nodes.
            </summary>
        </member>
        <member name="M:Aga.Controls.Tree.TreeViewAdv.GetNodeControlInfoAt(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="point">Point in client area.</param>
            <remarks>
            Gets virtual bounds. They don't include scroll offsets and header height. To get real bounds in client area, subtract OffsetX and OffsetY.
            </remarks>
        </member>
        <member name="M:Aga.Controls.Tree.TreeViewAdv.EnsureVisible(Aga.Controls.Tree.TreeNodeAdv)">
            <summary>
            Expand all parent nodes, andd scroll to the specified node
            </summary>
        </member>
        <member name="M:Aga.Controls.Tree.TreeViewAdv.ScrollTo(Aga.Controls.Tree.TreeNodeAdv)">
            <summary>
            Make node visible, scroll if needed. All parent nodes of the specified node must be expanded
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Aga.Controls.Tree.TreeViewAdv.GetNodeControls(Aga.Controls.Tree.TreeNodeAdv)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <remarks>
            Gets virtual bounds. They don't include scroll offsets and header height. To get real bounds in client area, subtract OffsetX and OffsetY.
            </remarks>
        </member>
        <member name="M:Aga.Controls.Tree.TreeViewAdv.UpdateNode(Aga.Controls.Tree.TreeNodeAdv)">
            <summary>
            Invalidates node's rectangle.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Aga.Controls.Tree.TreeViewAdv.GetNodeBounds(Aga.Controls.Tree.TreeNodeAdv)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <remarks>
            Gets virtual bounds. They don't include scroll offsets and header height. To get real bounds in client area, subtract OffsetX and OffsetY.
            </remarks>
        </member>
        <member name="M:Aga.Controls.Tree.TreeViewAdv.GetNodeBoundsInClient(Aga.Controls.Tree.TreeNodeAdv,System.Boolean)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="fullRow">
            If true, X will be always 0 and Width will be client area width.
            If false, it will be node bounds; it is not full row if !UseColumns; it can be negative if scrolled horizontally.
            </param>
        </member>
        <member name="M:Aga.Controls.Tree.TreeViewAdv.OnKeyDown2(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Can be used to simulate key down event, even if the control is not focused.
            </summary>
        </member>
        <member name="P:Aga.Controls.Tree.TreeViewAdv.VisibleNodes">
            <summary>
            returns all nodes, which parent is expanded
            </summary>
        </member>
        <member name="P:Aga.Controls.Tree.TreeViewAdv.CurrentPageSize">
            <summary>
            Number of rows fits to the current page
            </summary>
        </member>
        <member name="P:Aga.Controls.Tree.TreeViewAdv.RowCount">
            <summary>
            Number of all visible nodes (which parent is expanded)
            </summary>
        </member>
        <member name="P:Aga.Controls.Tree.TreeViewAdv.OffsetX">
            <summary>
            How many pixels scrolled horizontally.
            </summary>
            <remarks>
            Some functions and events give virtual bounds of node controls. They don't include scroll offsets and header height. To get real bounds in client area, subtract OffsetX and OffsetY.
            </remarks>
        </member>
        <member name="P:Aga.Controls.Tree.TreeViewAdv.OffsetY">
            <summary>
            How many pixels scrolled vertically, minus ColumnHeaderHeight.
            </summary>
            <remarks>
            Some functions and events give virtual bounds of node controls. They don't include scroll offsets and header height. To get real bounds in client area, subtract OffsetX and OffsetY.
            </remarks>
        </member>
        <member name="P:Aga.Controls.Tree.TreeViewAdv.Model">
            <Summary>
            The model associated with this <see cref="T:Aga.Controls.Tree.TreeViewAdv"/>.
            </Summary>
            <seealso cref="T:Aga.Controls.Tree.ITreeModel"/>
            <seealso cref="!:TreeModel"/>
        </member>
        <member name="P:Aga.Controls.Tree.TreeViewAdv.AutoRowHeight">
            <summary>
            Set to true to expand each row's height to fit the text of it's largest column.
            </summary>
        </member>
        <member name="P:Aga.Controls.Tree.TreeViewAdv.ZAccessibleCount">
            <summary>
            Max count of accessible objects that can be created for items.
            Default 1000.
            </summary>
            <remarks>
            Controls with large number of visible items consume much memory for accessible objects, because of very inefficient accessibility implementation of .NET. For example 120 MB of physical memory for 10000 items. Luckily accessible objects are created only when/if some accessibility/automation/etc app wants to use them.
            This property limits the number of accessible objects when some app wants to get all objects, but not when wants to get object from point or the focused/selected object.
            </remarks>
        </member>
        <member name="T:Aga.Controls.NumericTextBox">
            <summary>
            Restricts the entry of characters to digits, the negative sign,
            the decimal point, and editing keystrokes (backspace).
            It does not handle the AltGr key so any keys that can be created in any
            combination with AltGr these are not filtered
            </summary>
        </member>
        <member name="M:Aga.Controls.NumericTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Restricts the entry of characters to digits, the negative sign,
            the decimal point, and editing keystrokes (backspace).
            It does not handle the AltGr key
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aga.Controls.NumericTextBox.invalidNumeric(System.Char)">
            <summary>
            Main method for verifying allowed keypresses.
            This does not catch cut paste copy ... operations.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Aga.Controls.NumericTextBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Method invoked when Windows sends a message.
            </summary>
            <param name="m">Message from Windows.</param>
            <remarks>
            This is over-ridden so that the user can not use
            cut or paste operations to bypass the TextChanging event.
            This catches ContextMenu Paste, Shift+Insert, Ctrl+V,
            While it is generally frowned upon to override WndProc, no
            other simple mechanism was apparent to simultaneously and
            transparently intercept so many different operations.
            </remarks>
        </member>
        <member name="M:Aga.Controls.ResourceHelper.GetCursor(System.Byte[])">
            <summary>
            Help function to convert byte[] from resource into Cursor Type 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
    </members>
</doc>
