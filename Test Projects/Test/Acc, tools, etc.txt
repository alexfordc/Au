
	static void TestAcc()
	{
		//Acc.Misc.WorkaroundToolbarButtonName = true;
		//Acc a = Acc.FromPoint(644, 1138); //BUTTON
		////Acc a = Acc.FromPoint(225, 1138); //SPLITBUTTON
		////Acc a = Acc.FromPoint(453, 1138); //SEPARATOR
		//Print(a);
		//0.1.s();
		////return;
		//var cont = a.WndContainer;
		//Perf.SpinCPU(100);
		//for(int i1 = 0; i1 < 8; i1++) {
		//	int n2 = 1000;
		//	Perf.First();
		//	for(int i2 = 0; i2 < n2; i2++) { var k = a.WndContainer; }
		//	Perf.Next();
		//	for(int i2 = 0; i2 < n2; i2++) { var k = cont.ClassNameIs("ToolbarWindow32"); }
		//	Perf.Next();
		//	for(int i2 = 0; i2 < n2; i2++) { var k = cont.Is64Bit; }
		//	//Perf.Next();
		//	//for(int i2 = 0; i2 < n2; i2++) { var k = a.RoleInt; }
		//	Perf.Next();
		//	for(int i2 = 0; i2 < n2; i2++) { var k = a.Name; }
		//	//Perf.Next();
		//	//for(int i2 = 0; i2 < n2; i2++) { var k = a.RectInClientOf(cont); }
		//	Perf.NW();
		//}
		//return;

		//_StartMemoryMonitorThread();

		//Acc.Misc.WorkaroundToolbarButtonName = Keyb.IsScrollLock;
		//Print(Acc.Misc.WorkaroundToolbarButtonName);
		//Print(Acc.FromPoint(257, 1138)); return; //QM toolbar button Properties
		//Print(Acc.FromPoint(1147, 1092)); return; //QM floating toolbar button Mouse

		//Wnd w = Wnd.Find(className: "Shell_TrayWnd");
		//Wnd w = Wnd.Find(className: "QM_Editor");
		//Wnd w = Wnd.Find("QM TOOLBAR");
		//Wnd w = Wnd.Find("Options");
		//Wnd w = Wnd.Find("Dialog Editor");
		Wnd w = Wnd.Find("* - Mozilla Firefox", "MozillaWindowClass");
		//Wnd w = Wnd.Find("*- Google Chrome");
		//Wnd w = Wnd.Find("* Internet Explorer");
		//Wnd w = Wnd.Find(null, "CabinetWClass");
		//Wnd w = Wnd.Find("FileZilla");
		//Wnd w = Wnd.Find("ILspy");
		//Wnd w = Wnd.Find("app -*");
		//Wnd w = Wnd.Find("QM# -*");
		//Wnd w = Wnd.Find("WinDbg*");
		//Wnd w = Wnd.GetWnd.Root;
		//w.Activate(); .2.s();
		//w= w.ChildById(2216);
		//Wnd w = Wnd.Find(className: "QM_Editor").ChildById(2052);
		//Acc a = Acc.FromWindow(w);
		//Print(a);
		//a = a.Child(2);
		//Print(a);

		for(int i = 0; i < 1; i++) {
			Perf.First();
#if false
			x.TestAcc(w);

			//foreach(Wnd ww in Wnd.GetWnd.AllWindows(true)) x.TestAcc(ww);

			Perf.NW();
			x.PrintMemory();

			//var a =Acc.deb; for(int j = 0; j < a.Length; j++) Print(j, a[j]);
#else
			//var a = Acc.Find(w, "LINK", "Bug Reports");
			//var a = Acc.Find(w, "web:LINK", "Bug Reports");
			//var a = Acc.Find(w, "web:LINK", "Bug Reports", AFFlags.Reverse);
			//var a = Acc.Find(w, "web:DOCUMENT");
			//var a = Acc.Find(w, "web:PANE");
			//var a = Acc.Find(w, "TITLEBAR", "Solution Explorer", AFFlags.NonClientToo);
			//var a = Acc.Find(w, "LISTITEM", "Portable", 0);
			//var a = Acc.Find(w, "class=Internet Explorer_Server:LINK", "Bug Reports", 0);
			//var a = Acc.Find(w, "web:LINK", also: o => ++o.Counter == 4);
			//var a = Acc.Find(w, "web:LINK", also: o => ++o.Counter == 4); //find 4-th LINK

			//var a = Acc.Find(w, "BUTTON", "History");
			//var a = Acc.Find(w, "web:DOCUMENT/div/BUTTON", "Bookmarks");
			//var a = Acc.Find(w, "APPLICATION/GROUPING/PROPERTYPAGE/browser/DOCUMENT/div/BUTTON", "History");

			//var a = Acc.Find(w, "LINK", "Programming", AFFlags.HiddenToo); //1126 (depends on hidden tabs)
			//var a = Acc.Find(w, "LINK", "Programming"); //225
			//var a = Acc.Find(w, "web:LINK", "Programming"); //120
			//var a = Acc.Find(w, "web:DOCUMENT/div/div/div/div/LIST/LISTITEM/LIST/LISTITEM/LINK", "Programming"); //74
			//var a = Acc.Find(w, "web:DOCUMENT/div/div[4]/div[5]/div/LIST[3]/LISTITEM[2]/LIST/LISTITEM/LINK", "Programming"); //47
			//var a = Acc.Find(w, "APPLICATION/GROUPING/PROPERTYPAGE/browser/DOCUMENT/div/div/div/div/LIST/LISTITEM/LIST/LISTITEM/LINK", "Programming"); //94
			//var a = Acc.Find(w, "APPLICATION[4]/GROUPING[-4]/PROPERTYPAGE[-4]/browser/DOCUMENT/div/div[4]/div[5]/div/LIST[3]/LISTITEM[2]/LIST/LISTITEM/LINK", "Programming"); //58
			//var a = Acc.Find(w, "web://[4]/[5]//[3]/[2]///LINK", "Programming"); //47

			//var a = Acc.Find(w, "BUTTON", "Resources    Alt+F6"); //6.4 s
			//var a = Acc.Find(w, "class=ToolbarWindow32:BUTTON", "Resources    Alt+F6"); //120
			//var a = Acc.Find(w, "CLIENT/WINDOW/TOOLBAR/BUTTON", "Resources    Alt+F6"); //139

			//var f = new Acc.Finder("web:LINK", "Bug Reports");

			//f.FindIn(w); var a = f.Result;

			//var a = Acc.Find(w, "TEXT", "Address and*", AFFlags.Reverse);

			//var a = Acc.Find(w, "web:LINK", "Programming", AFFlags.NoThrow);
			var a = Acc.Find(w, "web:DOCUMENT/div/div[4!]/div[5!]/div/LIST[3]/LISTITEM[2]/LIST/LISTITEM/LINK", "Programming"); //47

			//Acc aa=null;
			////int n = 0;
			//AFFlags fl = 0;
			////fl |=AFFlags.HiddenToo;
			//var a = Acc.Find(w, "web:", null, fl, also: o =>
			// {
			//	 //n++;
			//	 //var s = o.ToString(v.Level);
			//	 //Print(s);
			//	 //aa = o;
			//	 //aa = o.ToAcc();
			//	 //o.Stop();
			//	 //o.SkipChildren();

			//	 //Perf.First();
			//	 // var r = o.Role;
			//	 // Perf.Next();
			//	 // var st = o.State;
			//	 // Perf.Next();
			//	 // Perf.Write();
			//	 //Print(o.ToString(o.Level));

			//	 //if(++o.Counter == 10) throw new AuException("TEST");

			//	 return false;
			// });
			//if(aa != null) { Print(aa); aa.Dispose(); }

			Perf.NW();

			Print(a);
			a?.Dispose();
#endif
		}

		//using(var a = Acc.FromWindow(w)) {
		//	Print(a);
		//	Print(a.Parent);
		//}
	}

	//static void TestAccNavigate()
	//{
	//	Wnd w;

	//	//w = Wnd.Find("* - Mozilla Firefox", "MozillaWindowClass");
	//	//var a = Acc.Find(w, "web:LINK", "General", navig: "pa3 ne fi3");
	//	//Print(a);
	//	//a?.Dispose();

	//	//return;

	//	//w = Wnd.Find("* - Mozilla Firefox", "MozillaWindowClass");
	//	//var a = Acc.Find(w, "web:LINK", "General");
	//	//Print(a);
	//	//var b = a.Navigate("parent3 next first3");
	//	////var b = a.Navigate("pa3 ne fi3");
	//	////var b = a.Navigate("p3 n f3");
	//	////var b = a.Navigate("#9,3 #5 #7,3");
	//	////var b = a.Navigate("parent,3 next first,3");

	//	////w = Wnd.Find("* Studio ");
	//	////Print(w);
	//	////var a = Acc.Find(w, "BUTTON", "Search Control");
	//	////Print(a);
	//	//////var b = a.Navigate("pr fi2 ne2");
	//	//////var b = a.Navigate("pr fi ch3");
	//	////var b = a.Navigate("pa fi2 ch3");

	//	////w = Wnd.Find("* - Mozilla Firefox", "MozillaWindowClass");
	//	////var a = Acc.FromWindow(w, AccOBJID.CLIENT);
	//	////Print(a);
	//	//////var b = a.Navigate((AccNAVDIR)0x1009);
	//	////var b = a.Navigate("#0x1009");

	//	//Print(b);
	//	//a.Dispose();
	//	//b?.Dispose();

	//	//return;

	//	//foreach(var v in Wnd.GetWnd.AllWindows()) {
	//	//	foreach(var a in )
	//	//}

	//	Wnd wSkip = Wnd.Find("Quick*").Child(2202);
	//	w = Wnd.GetWnd.Root;
	//	//w = Wnd.Find("app -*");
	//	//w = Wnd.Find("* - Notepad");
	//	//Perf.First();
	//	w = Wnd.Find("* Mozilla Firefox");
	//	//w = Wnd.Find("* Google Chrome");
	//	//w = Wnd.Find("* Internet Explorer");
	//	//w = Wnd.Find("Quick*").ChildById(2053);
	//	//w = (Wnd)(IntPtr)5965264;

	//	//w = Wnd.Find("QM# - Q*");

	//	//var a = Acc.Find(w, "TOOLBAR", "Help");
	//	//Print(a);
	//	//var p = a.Parent();
	//	//Print(p);
	//	//Print(p.Navigate(AccNAVDIR.FIRSTCHILD));

	//	////var a = Acc.Find(w, "CLIENT", "Panels");
	//	////Print(a);
	//	////Print(a.Navigate(AccNAVDIR.CHILD, 14));

	//	//return;

	//	//Perf.Incremental = true;
	//	using(var aRoot = Acc.FromWindow(w)) {
	//		aRoot.EnumChildren(true, a =>
	//		{
	//			if(a.WndContainer == wSkip) { a.SkipChildren(); return; }
	//			if(a.IsInvisible) { a.SkipChildren(); return; }
	//			//switch(a.Role) { case "TITLEBAR": case "SCROLLBAR": case "MENUBAR": case "GRIP": a.SkipChildren(); return; }
	//			var s = a.ToString(a.Level);
	//			//Perf.First();
	//			using(var aa = a.Navigate(AccNAVDIR.PARENT)) {
	//				//Perf.Next();
	//				if(aa == null) Print(s, a.WndContainer, a.WndTopLevel);
	//				//if(aa == null) Print(s);
	//				//else Print("<><c 0x8000>" + s + "</c>\r\n<c 0xff0000>" + aa.ToString(a.Level+1) + "</c>");
	//			}
	//		});
	//		//_TestAccNavigate(aRoot, 0, out _, out _, out _);
	//	}
	//	//Perf.Write();
	//	//Perf.NW();
	//	Print("END");
	//}

	//static void _TestAccNavigate(Acc parent, int level, out int nChildren, out Acc firstChild, out Acc lastChild)
	//{
	//	nChildren = 0; firstChild = lastChild = null;
	//	var w = parent.WndContainer;
	//	if(!w.IsVisible || w.ControlId == 2202) return;

	//	var k = parent.Children(false); if(k.Length == 0) return;
	//	bool testFirstLast = false;
	//	for(int i = 0; i < k.Length; i++) {
	//		Acc a = k[i];
	//		if(a.IsInvisible) continue;
	//		if(!testFirstLast) {
	//			if(i > 0 || i < k.Length - 1) {
	//				Print(a.ToString(level));
	//				Native.ClearError();
	//				bool checkInvisible = false;
	//				if(i > 0) {
	//					using(var g = a.Navigate(AccNAVDIR.PREVIOUS)) {
	//						if(g == null && !(checkInvisible && k[i - 1].IsInvisible)) Print("<><c 0xff>previous  </c>" + Native.GetErrorMessage());
	//					}
	//				}
	//				if(i < k.Length - 1) {
	//					using(var g = a.Navigate(AccNAVDIR.NEXT)) {
	//						if(g == null && !(checkInvisible && k[i + 1].IsInvisible)) Print("<><c 0xff>next  </c>" + Native.GetErrorMessage());
	//					}
	//				}
	//			}
	//		}

	//		_TestAccNavigate(a, level + 1, out var nc, out var fc, out var lc);

	//		if(testFirstLast && nc != 0) {
	//			Print(a.ToString(level));
	//			Native.ClearError();
	//			bool checkInvisible = false;
	//			using(var g = a.Navigate(AccNAVDIR.FIRSTCHILD)) {
	//				if(g == null && !(checkInvisible && fc.IsInvisible)) Print("<><c 0xff>first  </c>" + Native.GetErrorMessage());
	//			}
	//			using(var g = a.Navigate(AccNAVDIR.LASTCHILD)) {
	//				if(g == null && !(checkInvisible && lc.IsInvisible)) Print("<><c 0xff>last  </c>" + Native.GetErrorMessage());
	//			}
	//			fc.Dispose(); if(lc != fc) lc.Dispose();
	//		}
	//	}
	//	if(testFirstLast) {
	//		nChildren = k.Length; firstChild = k[0]; lastChild = k[k.Length - 1];
	//		for(int i = 1; i < k.Length - 1; i++) k[i].Dispose();
	//	} else {
	//		for(int i = 0; i < k.Length; i++) k[i].Dispose();
	//	}
	//}

	static void TestAccExamples()
	{
		//var f = new Acc.Finder("BUTTON", "Apply"); //object properties
		//Wnd w = Wnd.Find(className: "#32770", also: t => f.FindIn(t));
		//Print(w);
		//Print(f.Result);

		//var w = Wnd.Find("Find");
		////var a = Acc.Find(w, "BUTTON", also: o => o.GetRect(out var r, o.WndWindow) && r.Contains(266, 33));
		////var a = Acc.Find(w, "BUTTON", also: o => o.GetRect(out var r, o.WndWindow) && r.left==234);
		////var a = Acc.Find(w, "BUTTON", also: o => ++o.Counter == 2, navig: "pa pr2");
		//var a = Acc.Find(w, "BUTTON", also: o => o.Level == 2);

		var w = Wnd.Find("*Mozilla Firefox");
		//var a = Acc.Find(w, "LINK", also: o => o.Value == "http://www.quickmacros.com/forum/viewforum.php?f=3&sid=720fc3129e6c70e07042b446be23a646");
		//var a = Acc.Find(w, "LINK", also: o => o.Value.Like_("http://www.example.com/x.php?*"));
		//var a = Acc.Find(w, "LINK", also: o => o.Value?.Like_("http://www.example.com/x.php?*") ?? false);
		//var a = Acc.Find(w, "web:LINK", "General");
		//var a = Acc.Find(w, "web:LINK", "**m Untitled||General");

		var f = new Acc.Finder("web:LINK", "General");
		//f.MaxLevel = 10;
		if(!f.Find(w)) return;
		var a = f.Result;

		//var w = Wnd.Find("*Sandcastle*");
		////var a = Acc.Find(w, "web:LINK", "**m Untitled||General");
		//Print(Acc.FromWindow(w).Children(true).Where(o=>!o.IsInvisible));

		//var w = Wnd.Find("Find");
		////var a = Acc.Find(w, "class=button:BUTTON");
		////var a = Acc.Find(w, "class=button:");
		//var a = Acc.Find(w, "id=1132:BUTTON");

		Print(a);
		a?.Dispose();

		//Print(AuDialog.ShowEx(buttons: "One|Two|50 Three|51Four", flags: DFlags.CommandLinks));
	}

	static void TestAccWeb()
	{
		Debug_.TextPrefix = "<><Z 0xffff>"; Debug_.TextSuffix = "</Z>";

		//Print(Ver.Is64BitProcess);
		//var w = Wnd.Find("*Mozilla Firefox");
		var w = Wnd.Find("*Google Chrome");
		//var w = Wnd.Find("*Internet Explorer");

#if true
		//using(var a = Acc.Find(w, "web:LINK", also: o => o.Match("href", "*forum*")).OrThrow()) {
		//using(var a = Acc.Find(w, "web:LINK", "\0 a:href=*forum*").OrThrow()) {
		//using(var a = Acc.Find(w, "web:LINK", "name=P*\0 a:href=*forum*").OrThrow()) {
		using(var a = Acc.Find(w, "web:LINK", "name=P*\0 a:href=**r forum").OrThrow()) {
			Print(a);
		}
#elif false
		var a = Acc.Find(w, "web:LINK", "Board index").OrThrow();
		//var a = Acc.Find(w, "web:LISTITEM", "FAQ").OrThrow();
		//var a = Acc.Find(w, "web:BUTTON", "Search").OrThrow();
		//var a = Acc.Find(w, "web:TEXT", "Search for keywords").OrThrow();
		//var a = Acc.Find(w, "web:LIST").OrThrow();
		Print(a);
		string attr;
		attr = "href";
		//attr = "HREF";
		//attr = "class";
		//attr = "type";
		//attr = "value";
		//attr = "id";
		//attr = "ID";
		//attr = "name";
		//attr = "title";
		//attr = "onclick";

		Perf.First();
		for(int i = 0; i < 5; i++) {
			//var s = a.HtmlAttribute(attr, interpolated: false);
			var s = a.HtmlAttribute(attr, AccBrowser.InternetExplorer);
			//var s = a.HtmlAttributes();
			//var s = a.Html(true);
			Perf.Next();
			Print(s);
		}
		Perf.Write();

		//Print(a.HtmlAttributes());
		a.Dispose();
#else
		//var a = Acc.FromWindow(w, AccOBJID.CLIENT);
		//Perf.First();
		var a = Acc.Find(w, "web:").OrThrow();
		//var a = Acc.Find(w, "web:", flags: AFFlags.WebBusy).OrThrow();
		//Perf.NW(); return;

		//Print(a.Html(true)); return;

		//a.EnumChildren(true, o =>
		//{
		//	if(o.IsInvisible) return;
		//	Print("<><c 0xE00000>" + o.ToString(o.Level) + "</c>");

		//	//var d = o.HtmlAttributes();
		//	//if(d.Count > 0) {
		//	//	if(d.Count >= 16) Print("<><Z 0xff00>" + d.Count + "</Z>");
		//	//	Print(d);
		//	//}

		//	Print(o.Html(true));
		//});

		Perf.First();
		var t = a.Children(true);
		Perf.Next();
		foreach(var k in t) {
			//var d = k.HtmlAttributes();
			//if(d.Count > 15) Print(d.Count);

			var p = Perf.StartNew();
			var s = k.HtmlAttribute("href");
			p.NW();
			if(!Empty(s)) Print(s);

			//if(k.Match("a:href", "*forum*")) {
			if(k.Match("a:class", "forumtitle", "a:href", "*forum*")) {
				//Print(k);
				Print(k.HtmlAttributes());
			}

			//Print(k);
			k.Dispose();
		}
		Perf.NW();
		a.Dispose();
#endif
	}

	static void Test1()
	{
		var w = Wnd.Find("Quick*");

		//var cf = new Wnd.ChildFinder("name");
		//var a = Acc.Find(w, "role", controls:cf);

		var af = new Acc.Finder("role");
		w.Child("name", also: o => af.Find(o));
		var b = af.Result;

		var k = Acc.Find(w.Child("name"), "role");

		//var a1 = Acc.Find(w, "role", waitS: 5);
		//var a2 = Acc.WaitFor(5, w, "role");
	}

	static void TestAccOpenLibreOffice()
	{
		//int r = 0;
		//Api.SystemParametersInfo(Api.SPI_GETSCREENREADER, 0, &r, 0);
		//Print(r);
		//Api.SystemParametersInfo(Api.SPI_SETSCREENREADER, 0, 0, 0);
		////Api.SystemParametersInfo(Api.SPI_SETSCREENREADER, 1, 0, 0);
		////Api.SystemParametersInfo(Api.SPI_SETSCREENREADER, 0, 0, 0);
		//Api.SystemParametersInfo(Api.SPI_GETSCREENREADER, 0, &r, 0);
		//Print(r);

		//return;

		//var w = Wnd.Find("*LibreOffice *", "SALFRAME").OrThrow();
		var w = Wnd.Find("*OpenOffice *", "SALFRAME").OrThrow();
		Print(w);
		//using(var a= Acc.FromWindow(w, AccOBJID.CLIENT)) {
		//	//Print(a.Children(true));
		//	Print(a);
		//	Print(a.ChildCount);
		//	//Print(a.Navigate("first"));
		//}
		//using(var a = Acc.Find(w, "BUTTON", "Paste*").OrThrow()) {
		//	Print(a);
		//}
		//using(var a = Acc.FromWindow(w, AccOBJID.CLIENT)) {
		//	a.EnumChildren(true, o =>
		//	{
		//		//Print(o.Level, o.Role);
		//		Print(o);
		//		//100.ms();
		//	});
		//}
		Print("END");
	}

	static void TestAccVariousApps()
	{
		//var w = Wnd.Find("VLC leistuvė", "QWidget").OrThrow();
		//Print(w);
		//using(var a = Acc.Find(w, "CHECKBOX", "\0 description=Maišymo veiksena").OrThrow()) Print(a);

		//var w = Wnd.Find("Welcome Guide — Atom", "Chrome_WidgetWin_1").OrThrow();
		//Print(w);
		//using(var a = Acc.Find(w, "web:BUTTON", "*Learn Keyboard Shortcuts").OrThrow()) Print(a);

		//Acc.Misc.MaxChildren *= 2;
		var w = Wnd.Find("Quick*");
		//using(var a = Acc.FromWindow(w)) {
		//	a.EnumChildren(true, o =>
		//	 {
		//		 Print(o);
		//	 });
		//}
	}

	static void TestAccPreferLink()
	{
		//using(var a = Acc.FromXY(1150, 1469, preferLINK: true)) Print(a);
		for(int i = 0; i < 30; i++) {
			1.s();
			using(var a = Acc.FromMouse(AXYFlags.PreferLink)) {
				Print(a);
			}
		}
	}

	//static void TestAccFromXY()
	//{
	//	Wnd w;
	//	w = Wnd.Find("Quick*", "QM_Editor");
	//	//w = Wnd.Find("* Internet Explorer");
	//	//w = Wnd.Find("* Mozilla Firefox");
	//	w = Wnd.Find("* Google Chrome");
	//	//w = Wnd.Find("* OpenOffice*");

	//	//using(var a = Acc.FromWindow(w, AccOBJID.CLIENT)) {
	//	//	Print(a);
	//	//	using(var b = a.ChildFromXY(65, 65, screenCoord: false)) {
	//	//		Print(b);
	//	//	}
	//	//}
	//	int x, y;
	//	//x = 65; y = 65;
	//	//x = 277; y = 536;
	//	//x = 65; y = -10;
	//	//x = -1; y = 0;
	//	//x = 94; y = 365;
	//	//x = 60; y = 32;
	//	//x = 428; y = 337;
	//	x = 77; y = 178;
	//	//x = 516; y = 39;
	//	using(var a = Acc.FromXY(w, x, y)) {
	//		//using(var a = Acc.FromXY(1160, 1467)) {
	//		//using(var a=Acc.FromXY(w, 65, 65)) {
	//		//using(var a=Acc.FromXY(w, 277, 536)) {
	//		//using(var a=Acc.FromXY(w, 65, -10)) {
	//		//using(var a = Acc.FromXY(w, -1, 0)) {
	//		Print(a);
	//		//Print(a.Navigate("pa"));
	//	}
	//}

	static void TestAccFromFocus()
	{
		Wnd w;
		w = Wnd.Find("Quick*", "QM_Editor");
		//w = Wnd.Find("* Internet Explorer");
		//w = Wnd.Find("*Mozilla Firefox");
		//w = Wnd.Find("* Google Chrome");
		//w = Wnd.Find("* Opera");
		//w = Wnd.Find("* OpenOffice*");
		//w = Wnd.Find("Options");
		//w = Wnd.Find("Java *");
		//w = Wnd.Find("Settings");
		//w = Wnd.Find("QM# - Q*", "WindowsForms*");
		w.Activate();

		//using(var a = Acc.FromWindow(w, AccOBJID.CLIENT)) {
		//	Print(a);
		//	using(var b = a.ChildFromXY(65, 65, screenCoord: false)) {
		//		Print(b);
		//	}
		//}
		using(var a = Acc.Focused()) {
			Print(a);
			//Print(a.Navigate("pa"));
		}
	}

	static void TestAccFromEvent()
	{
		using(new AccHook(AccEVENT.OBJECT_FOCUS, 0, x =>
		{
			Print(x.wnd);
			var a = x.GetAcc();
			if(a == null) Print(Native.GetErrorMessage());
			else Print(a);
		})) MessageBox.Show("hook");
	}

	//static void TestAccFromComObject()
	//{
	//	Wnd w = Wnd.Find("* Internet Explorer").Child(null, "Internet Explorer_Server");
	//	Print(w);
	//	var res = w.Send(WM_HTML_GETOBJECT);
	//	var guid = typeof(MSHTML.IHTMLDocument2).GUID;
	//	if(0 != ObjectFromLresult(res, ref guid, 0, out IntPtr ip)) return;

	//	var doc = Marshal.GetTypedObjectForIUnknown(ip, typeof(MSHTML.IHTMLDocument2)) as MSHTML.IHTMLDocument2;
	//	var body = doc.body;
	//	//Print(body.outerHTML);
	//	Print(Acc.FromComObject(body));

	//	Marshal.ReleaseComObject(body);
	//	Marshal.ReleaseComObject(doc);
	//	Print(Marshal.Release(ip));
	//}
	//static uint WM_HTML_GETOBJECT = Api.RegisterWindowMessage("WM_HTML_GETOBJECT");

	[DllImport("oleacc.dll", PreserveSig = true)]
	internal static extern int ObjectFromLresult(LPARAM lResult, in Guid riid, LPARAM wParam, out IntPtr ppvObject);

	static void TestAccMiscMethods()
	{
		//var w = Wnd.FromMouse();
		//w.MouseClick();
		//return;

		//var w = Wnd.Find("Options");
		//w.Activate();
		Output.Clear();
		//using(var a = Acc.Find(w, null, "Mouse").OrThrow()) {
		//using(var a = Acc.Find(w, "CHECKBOX", "Mouse").OrThrow()) {
		//using(var a = Acc.Find(w, nameof(AccROLE.CHECKBOX), "Mouse").OrThrow()) {
		//5.s();
		for(int i = 0; i < 1; i++) {
			Perf.First();
			//using(var a = Acc.FromMouse(preferLINK: true)) {
			using(var a = Acc.FromMouse()) {
				//Print(a);
				//a.Select(AccSELFLAG.TAKESELECTION);
				//a.Select(AccSELFLAG.ADDSELECTION);
				//a.Select(AccSELFLAG.EXTENDSELECTION);
				//a.Select(AccSELFLAG.REMOVESELECTION);
				//a.Focus();
				//Print(a.DefaultAction);
				//a.DoAction();
				//Print(a.Rect);
				//a.MouseMove();
				//a.MouseClick();
				//a.MouseClick(1, 1, MButton.Right);

				Perf.Next();
				var w1 = a.WndContainer;
				Perf.Next();
				//using(var ap = a.Navigate("pa")) {
				//	Perf.Next();
				//	var w2 = ap.WndContainer;
				//	Perf.NW();

				//	//Print(a);
				//	//Print(ap);
				//	Print(!w1.Is0, !w2.Is0);
				//}
				if(i == 0) Perf.Cpu(100);
			}
		}
		//100.ms();
		//Print(Wnd.Active);
	}

	static void TestAccWebPageProp()
	{
		//var w = Wnd.Find("* Mozilla Firefox");
		var w = Wnd.Find("* Google Chrome");
		//var w = Wnd.Find("* Internet Explorer");
		//var w = Wnd.Find("FileZilla");
		//var w = Wnd.Find("Au - Microsoft Visual Studio ", "HwndWrapper[DefaultDomain;*");
		//using(var a = Acc.Find(w, "web:")) {
		//using(var a = Acc.Find(w, "web:LINK", "\0 a:href=*forum*")) {
		using(var a = Acc.Find(w, "web:LINK", "Programming", null, AFFlags.HiddenToo).OrThrow()) {
			//using(var a = Acc.Find(w, "TREEITEM", "Other Bookmarks", AFFlags.HiddenToo).OrThrow()) { //no scroll
			//using(var a = Acc.Find(w, "TREEITEM", "Temp", AFFlags.HiddenToo).OrThrow()) { //no scroll
			//using(var a = Acc.Find(w, "TREEITEM", "Structs.cs", AFFlags.HiddenToo).OrThrow()) { //no scroll
			Print(a);

			//Print(a.Name);
			//Print(a.Value);

			//var x = a;
			////var x = a.Navigate("first");
			////Print(x.WebPage.URL);
			//Print(x.Html(true));

			a.ScrollTo(); //works with Firefox, Chrome, IE. Not with .
		}
	}

	static void TestAccSelectedChildren()
	{
		//var w = Wnd.Find(null, "QM_Editor").OrThrow();
		//var w = Wnd.Find("Options").OrThrow();
		//var w = Wnd.Find("*Mozilla Firefox").OrThrow();
		//var w = Wnd.Find("*Google Chrome").OrThrow();
		var w = Wnd.Find("*Internet Explorer").OrThrow();
		//using(var a=Acc.Find(w, "TREE").OrThrow()) {
		//using(var a=Acc.Find(w, "LIST").OrThrow()) {
		//using(var a=Acc.Find(w, "LIST", also:o=>++o.Counter==2).OrThrow()) {
		//using(var a=Acc.Find(w, "web:LIST", "\0 a:name=cars").OrThrow()) {
		//using(var a=Acc.Find(w, "web:COMBOBOX", "\0 a:name=cars").OrThrow()) {
		using(var a = Acc.Find(w, "web:ALERT", "\0 a:name=cars").OrThrow()) { //IE
			Print(a);
			Print("---- selected children ----");
			Print(a.SelectedChildren);
		}
	}

	static void TestChromeEnableAcc()
	{
		var w = Wnd.Find("* Google Chrome").OrThrow();
		w.Activate();

		//w.GetWindowAndClientRectInScreen(out var rw, out var r);
		//Print(Acc.FromXY(w, -1, 0));
		//Print(Acc.FromXY(w, 1, 1));
		//Print(Acc.FromXY(w, 88, 178));

		//for(int i = 0; i < 10; i++) {
		//	1.s();
		//	using(var a = Acc.FromMouse(preferLINK: true)) {
		//		Print(a);
		//	}
		//}

		Print(Acc.Focused());
	}

	static void TestJava()
	{
		var w = Wnd.Find("Java Control Panel").OrThrow();
		w.Activate();

		//Print(Acc.Find(w, "java:push button", "Netw*"));

		//using(var a = Acc.FromXY(1440, 1308)) {
		//	Print(a);
		//}

		for(int i = 0; i < 10; i++) {
			1.s();
			using(var a = Acc.FromMouse(AXYFlags.PreferLink)) {
				Print(a);
			}
		}

		//Print(Acc.Focused());
	}

	static void TestAccInOtherFunctions()
	{
		//Acc.Find(Wnd.Find("Quick*"), "BUTTON", "Options*").MouseClick();

		//var w = Wnd.Find("**c *Firefox").OrThrow();
		//Print(w);
		//var a = Acc.Find(w, "div", "Google").OrThrow();
		////a.MouseMove();
		//Perf.First();
		//for(int i = 0; i < 5; i++) {
		//	var si = WinImage.Find(a, @"Q:\app\Au\Tests\Images\google.bmp", WIFlags.WindowDC).OrThrow();
		//	Perf.Next();
		//}
		//Perf.Write();
		////si.MouseMove();

		//var w = Wnd.Find("Options*").ChildById(1571);
		//Print(w.NameAcc);

		//var w = Wnd.Find("Options*").Child("***accName Run as", "combo*").OrThrow();
		//Print(w);

		//var w = Wnd.Find("Options*");
		//var af = new Acc.Finder("COMBOBOX", "Run as");
		//Print(w.HasAcc(af));

		//var w = Wnd.Find("Options*").ChildById(1099);
		//w.AsButton.Click(true);
	}

	static void TestAccTODO()
	{
		var w = Wnd.Find("Quick*");
		Acc a = null;
		Perf.First();
		for(int i = 0; i < 9; i++) {
			a = Acc.Find(w, "LISTITEM", "ngen");
			Perf.Next();
		}
		Perf.Write();
		Print(a);
	}

	static void TestAccSkipAndWait()
	{
		var w = Wnd.Find("Options");
		//var a = Acc.Find(w, "CHECKBOX", skip:2).OrThrow();
		//var a = Acc.WaitFor(0, w, "CHECKBOX", "Mouse").OrThrow();
		var f = new Acc.Finder("CHECKBOX", "Mouse");
		Print(f.Wait(-2, w));
		var a = f.Result;
		Print(a);
	}

#if false
	static void TestAccFromUIA()
	{
		var w = Wnd.Find("*Firefox");
		Print(w);
		var a = Acc.Find(w, "web:LINK", "Programming").OrThrow();
		Print(a);
		var e1 = AElement.FromAcc(a);

		var e = e1 as UIA.IElement4;

		Print(e.Name);
		var a2 = Acc.FromComObject(e);
		Print(a2);

	}

	static void TestUiaSpeed()
	{
		Wnd w = Wnd.Find("*a Firefox").OrThrow();
		for(int i = 0; i < 5; i++) {
			Perf.First();
			var a = Acc.Find(w, "LINK", "Bug Reports").OrThrow();
			Perf.NW();
			Print(a.Name);
			a.Dispose();
			1.s();
		}
	}

	static void TestUia2()
	{
		//ComMemberType mt = 0;
		//var m = Marshal.GetMethodInfoForComSlot(typeof(U2.IUIAutomationProxyFactoryEntry), 5, ref mt);
		//Print(m);
		//Print(mt);


		//Wnd w = Wnd.Find("* Firefox").OrThrow();
		//Perf.First();
		//var u = new UIA.CUIAutomation8() as UIA.IUIAutomation2;
		//Perf.Next();
		//var ew = u.ElementFromHandle(w);
		//Perf.Next();
		//string s1 = ew.Name, s2 = null;
		//for(int i = 0; i < 5; i++) {
		//	var cond = u.CreatePropertyCondition(UIA.PropertyId.Name, "Bug Reports");
		//	var e = ew.FindFirst(UIA.TreeScope.Descendants, cond);
		//	Perf.Next();
		//	s2 = e.Name;
		//}
		//Perf.Write();
		//Print(s1);
		//Print(s2);

		//Wnd w = Wnd.Find("*- Notepad").OrThrow();
		//var ew = AElement.Factory.ElementFromHandle(w);
		//var e = ew.FindFirst(UIA.TreeScope.Descendants, new ACondition().Name("Edit").Type(UIA.TypeId.MenuItem).Offscreen(false).Condition);
		//Print(e.Name);
	}

	static void TestAElementFromAcc()
	{
		var w = Wnd.Find("* Google Chrome", "Chrome*").OrThrow();
		var a = Acc.Find(w, "web:LINK", "General").OrThrow();
		Print(a);
		var e1 = AElement.FromAcc(a, true);
		Print(AElement.LibToString_(e1));
	}

	static void TestAElementFind()
	{
		//var w = WaitFor.WindowActive(15, "* Internet Explorer", "Windows.UI.Core.CoreWindow");
		////var w = Wnd.Find("* Internet Explorer", "Windows.UI.Core.CoreWindow").OrThrow();
		//Print(w);
		////w.Activate();
		//1.s();

		//Acc.Find()
		var w = Wnd.Find("* Mozilla Firefox").OrThrow();
		//var w = Wnd.Find("* Google Chrome", "Chrome*").OrThrow();
		//var w = Wnd.Find("* Internet Explorer").OrThrow();
		//var w = Wnd.Find("* Internet Explorer").Child(null, Api.s_IES).OrThrow();
		//var w = Wnd.Find("* Microsoft Edge").OrThrow();
		//var w = Wnd.Find("* Opera").OrThrow();
		//var w = Wnd.Find("Options").OrThrow();
		//var w = Wnd.Find("*- OpenOffice Writer").OrThrow();
		Print(w);
		//w.Activate(); 100.ms();

		//var ew = AElement.FromWindow(w);
		//var a = ew.FindAll(UIA.TreeScope.Descendants, new ACondition().Type(UIA.TypeId.Hyperlink).Name("RSS").Condition);
		//Print(a.Length);

		//UIA.IElement e = null;
		//for(int i = 0; i < 5; i++) {
		//	//if(i > 0) {
		//	//	e = null;
		//	//	GC.Collect();
		//	//	GC.WaitForPendingFinalizers();
		//	//	100.ms();
		//	//}
		//	Perf.First();
		//	e = AElement.FindCurrentWebPage(w);
		//	Perf.NW();
		//	100.ms();
		//}
		//Print(e != null, e?.Name);

		AElement.s_testMethod = AElement.TestMethod.Find;
		//AElement.s_testMethod = AElement.TestMethod.FindAll;
		//AElement.s_testMethod = AElement.TestMethod.FindAllCache;
		//AElement.s_testMethod = AElement.TestMethod.Walker;
		//AElement.s_testMethod = AElement.TestMethod.WalkerCache;
		UIA.IElement e = null;
		//Acc e = null;
		for(int i = 0; i < 7; i++) {
			100.ms();
			Perf.First();
			//e = Acc.Find(w, "LINK", "Bug Reports"); //FF 300, Chr 230
			//e = Acc.Find(w, "web:LINK", "Bug Reports"); //FF 190, Chr 230
			//e = Acc.Find(w, "web:LINK", "Untitled-"); //FF 230, Chr 300

			//e = AElement.Find(w, "Bug Reports");
			//e = AElement.Find(w, "Bug Reports", UIA.TypeId.Hyperlink); //FF 260, Chr 60
			//e = AElement.Find(w, "Untitled-", UIA.TypeId.Hyperlink); //FF 390, Chr 130
			e = AElement.WebFind(w, "Bug Reports", UIA.TypeId.Hyperlink); //FF 100, Chr 60
																		  //e = AElement.WebFind(w, "SHOW MORE", UIA.TypeId.Button); //FF 100, Chr 60
																		  //e = AElement.WebFind(w, "Untitled-", UIA.TypeId.Hyperlink); //FF 110, Chr 70

			//e = AElement.WebFind(w, "partial", UIA.TypeId.Hyperlink);
			//e = AElement.WebFind(w, "Sheppy", UIA.TypeId.Hyperlink);
			//e = AElement.Find(w, "Advanced search", UIA.TypeId.Hyperlink);
			//e = AElement.WebFind(w, "Advanced search", UIA.TypeId.Hyperlink);
			//e = AElement.Find(w, null, UIA.TypeId.Pane);
			//e = AElement.Find(w, "Debug...");
			//e = AElement.Find(w, "Debug...", UIA.TypeId.Button);
			//e = AElement.Find(w, "Bold");
			Perf.NW();
			Print(e != null, e?.Name);
			//if(e != null) break;
		}

		//Wnd.Find(null, "QM_Editor").Activate();

		new ACondition().Add(UIA.PropertyId.AutomationId, "hhhh").AddOr(UIA.PropertyId.ClassName, "cn1", "cn2");
	}

	static void TestAElementFromPoint()
	{
		for(; !Keyb.IsCtrl; 1.s()) {
			UIA.IElement e = null;
			try { e = AElement.FromMouse(true); } catch(Exception ex) { Print(ex); }

			//var p = Mouse.XY;
			//var w = Wnd.FromXY(p, WXYFlags.NeedWindow);
			//var e = AElement.FromPoint(w, p);

			Print(e.LibToString_());
		}
	}

	static void TestAccToUIElem()
	{
		var w = Wnd.Find("Properties*").OrThrow();
		var a = Acc.Find(w, "BUTTON", "OK").OrThrow();
		var e = AElement.FromAcc(a, false);
		if(e == null) { Print("failed"); return; }
		Print(e.Name);
		Print(e.AutomationId);
	}
#endif


	//static void TestDllInProcThisThread()
	//{
	//	var f = new Form();
	//	f.Text = "Form55";
	//	var b = f.Add_<Button>(4, 4, 100, 30, "Five");
	//	f.Click += (unu, sed) => { TestDllInProc(); };
	//	f.ShowDialog();
	//}

	static void TestDllInProc()
	{
		//var w = Wnd.Find(null, "MozillaWindowClass").OrThrow();
		var w = Wnd.Find("* Google Chrome", "Chrome*").OrThrow();
		//var w = Wnd.Find("* Google Chrome", "Chrome*").Child(null, "Chrome_Render*").OrThrow();
		//var w = Wnd.Find("* Internet Explorer").OrThrow();
		//var w = Wnd.Find("* Internet Explorer").Child(null, Api.s_IES).OrThrow();
		//var w = Wnd.Find("* Internet Explorer").Child(null, "TabWindowClass").OrThrow().Get.DirectParent;
		//var w = Wnd.Find("* Internet Explorer").Child(null, "Shell DocObject View").OrThrow();
		//var w = Wnd.Find("* Microsoft Edge").OrThrow();
		//var w = Wnd.Find("* Microsoft Edge").Child(null, "Windows.UI.Core.CoreWindow").OrThrow();
		//var w = Wnd.Find("* Microsoft Edge").Child(null, "ApplicationFrameInputSinkWindow").OrThrow();
		//var w = Wnd.Find("* Opera").OrThrow();
		//var w = Wnd.Find("Options").OrThrow();
		//var w = Wnd.Find("ipc_server").OrThrow();
		//var w = Wnd.Find(null, "QM_Editor").OrThrow();
		//var w = Wnd.Find(null, "QM_Editor").ChildById(2051).OrThrow();
		//var w = Wnd.Find("QM Dialog").OrThrow();
		//var w = Wnd.Find("QM# - Q*").OrThrow();
		//var w = Wnd.Find("Calculator").OrThrow();
		//var w = Wnd.Find("Calculator").Child(null, "Windows.UI.Core.CoreWindow").OrThrow();
		//var w = Wnd.Find("ILSpy").OrThrow();
		//var w = Wnd.Find("Java *").OrThrow();
		//var w = Wnd.Find("* Sandcastle *").OrThrow();
		//var w = Wnd.Find("* C# Converter *").OrThrow();
		//var w = Wnd.Find("* OpenOffice *").OrThrow();
		//var w = Wnd.Find("* - Notepad").OrThrow();
		//var w = Wnd.Find("* - Paint").OrThrow();
		//var w = Wnd.Find("* Help Viewer *").OrThrow();
		//var w = Wnd.Find("*Visual Studio ").OrThrow();
		//var w = Wnd.Find("app -*").OrThrow();
		//var w = Wnd.Find(null, "QM_Editor").ChildById(2053).OrThrow();
		//var w = Wnd.Find("FileZilla").OrThrow();
		//var w = Wnd.Find("FileZilla").ChildById(-31801).OrThrow(); //toolbar
		//var w = Wnd.Find("*cmd.exe").OrThrow(); //fails to inject
		//var w = Wnd.Find("Character Map").OrThrow();
		//var w = Wnd.Find("Form55").OrThrow();
		//var w = Wnd.Find("Registry Editor").OrThrow();
		Print(w);
		//Print(w.ProcessId);

		//var a1=Acc.Find(w, "LINK", "Bug Reports");
		//Print(a1);
		//return;

		try {
#if true
			AFFlags flags = 0;
			//flags |= AFFlags.NotInProc;

			string role = null, name = null, prop = null;

			role = "web:LINK";
			//role = "LINK";
			//role = "id=:LINK";
			//role = "BUTTON";

			//name = "Bug Reports";
			name = "???????*";
			//name = "Five";
			//name = "Board index";
			//name = "**r -(Untitled";

			//Acc ap = Acc.FromWindow(w);
			//if(0!=Cpp.Cpp_AccFromWindow(true, w, 0, out var iacc)) return; Acc ap = new Acc(iacc);
			//Print(ap);

			for(int i = 0; i < 1; i++) {
				100.ms();
				Perf.First();
				var a = Acc.Find(w, role, name, prop, flags);
				Perf.NW();
				if(a != null) {
					Print(a);
				} else {
					Print("not found");
					break;
				}
			}
#else
			//using(var aParent = Acc.FromWindow(w)) {

			//Perf.First(); Perf.NW();

			var k = new List<Acc>();
			Cpp.AccCallbackT callback = (ref Cpp.Cpp_Acc r) =>
			 {
				 //Perf.First(); int n=Marshal.Release(r.iacc); Perf.NW('R');
				 ////Print(n);
				 //return 0;
//#if true
				// Perf.First(); Marshal.AddRef(r.iacc); Perf.NW();
				 var a = new Acc(r.iacc, r.elem);
				 //var a = new Acc(r.iacc, r.elem, addRef: true);
				 //Print(a);
				 //Print(a.Role);
				 k.Add(a);
//#else
//		using(var a = new Acc(r.iacc, r.elem)) {
//			r.iacc = default;
//			//Print(a);
//		}
//#endif
				// if(a.Name == "RSS") return 1;
				 if(a.Name.Contains("i")) return 1;
				 return 0;
			 };

			//Wnd wAgent = default;
			Acc.IAccessible iaccParent = default;
			//int hr1 = Cpp.Cpp_AccFromWindow(true, w, 0, out iaccParent);
			//if(hr1 != 0) { PrintHex(hr1); return; }
			//Print(iaccParent); return;

			Cpp.Cpp_AccParams p = default;

			//p.role = "LINK";
			p.role = "web:LINK";
			//p.role = "web:BUTTON";
			//p.role = "LISTITEM";
			//p.role = "id=-31772:LISTITEM";
			//p.role = "class=SysListView32:LISTITEM";
			//p.role = "id=7:LINK";
			//p.role = "id=0xa:LINK";
			//p.role = "class=Butt*:BUTTON";
			//p.role = "id=bad:LINK";
			//p.role = "ONE/TWO[5]/THREE[7!]/FOUR[-0xa]//SEVEN";
			//p.role = "web:/ONE/TWO";
			//p.role = "WINDOW[4!]/CLIENT/CLIENT/CLIENT/DOCUMENT";
			//p.role = "TEXT";

			p.name = "Bug Reports";
			//p.name = "Show more";
			//p.name = "Board index";
			//p.name = "scintilla";
			//p.name = "?*";
			//p.name = "**r ^U.+d$";
			//p.name = "**g Untitled";
			//p.prop = "value=XXX\0  a:href=YYY\0\r\n description=DDD";
			//p.prop = "maxLevel=15";
			//p.prop = "notin=ONE,TWO,THREE";
			//p.prop = "notin=BUTTON,MENUBAR,STATICTEXT";
			//p.name = "Select";
			//p.prop = "value=test\r";
			//p.prop = "description=Used*";
			//p.flags |= AFFlags.HiddenToo;
			//p.prop = "action=press";
			//p.prop = "key=alt+s";
			//p.prop = "help=* notification";

			//p.skip = 2;

			for(int i = 0; i < 1; i++) {
				//100.ms();
				//Perf.First();
				//foreach(var v in k) v.Dispose();
				//Perf.NW();

				k.Clear();
				100.ms();
				Perf.First();
				//var hr = Cpp.Cpp_AccFind(true, w, default, "LINK", "Bug Reports", 0, null, 0, out var r);
				//var hr = Cpp.Cpp_AccFind(true, default, iaccParent, "LINK", "Bug Reports", 0, null, 0, out var r);
				//var hr = Cpp.Cpp_AccFind(true, w, default, null, null, 0, null, 0, out var r);
				//var hr = Cpp.Cpp_AccFind(true, default, iaccParent, null, null, 0, null, 0, out var r);
				//var hr = Cpp.Cpp_AccFind(true, w, default, "GROUPING", "Extensions", 0, null, 0, out var r);
				//var hr = Cpp.Cpp_AccFind(true, w, default, "BUTTON", "Infobar Container", 0, null, 0, out var r);
				var hr = Cpp.Cpp_AccFind(true, w, default, ref p, null, out var r, out var errStr);
				//var hr = Cpp.Cpp_AccFind(true, w, default, ref p, callback, out var r, out var errStr);
				//var hr = Cpp.Cpp_AccFind(true, default, iaccParent, ref p, null, out var r, out var errStr);
				//var hr = Cpp.Cpp_AccFind(true, w, default, null, null, 0, callback, 0, out var r);
				//var hr = Cpp.Cpp_AccFind(true, w, aParent._iacc, "LINK", "Bug Reports", 0, null, 0, out var r);
				//var hr = Cpp.Cpp_AccFromWindow(true, w, 0, out var r);
				//var hr = Cpp.Cpp_AccFromWindow(true, w, (int)AccOBJID.CLIENT, out var r);
				//var hr = Cpp.Cpp_AccFromPoint(true, Mouse.XY, out var r);
				//var hr = Cpp.Cpp_AccFind(true, w, default, "BUTTON", null, 0, null, 0, out var r);
				//var hr = Cpp.Cpp_AccFind(true, w, default, null, "New macro    Ctrl+N", 0, null, 0, out var r);
				//var hr = Cpp.Cpp_AccFind(true, w, default, null, "Record    Ctrl+K", 0, null, 0, out var r);

				//var hr = Cpp.Cpp_AccFind2(true, w, ref wAgent, ref iaccParent, null, null, 0, null, 0, out var r);

				//Cpp.Cpp_Acc r = default;
				//var hr=Cpp.Cpp_AccFromWindow(true, w, 0, out r.iacc);

				Perf.NW();
				if(hr != 0) {
					//Perf.NW();
					PrintHex(hr);
					if(errStr!=null) Print(errStr);
					continue;
				}
				//continue;
				//var aa = Acc.Find(w, "BUTTON");
				using(var a = new Acc(r.iacc, r.elem)) {
				//using(var a=aa) {
					Print(a);
					//111.ms();
					//string s = null;
					//Perf.First();
					//for(int j=0; j<7; j++) {
					//	s = a.Name;
					//	Perf.Next();
					//}
					//Perf.Write();
					//Print(s);
					////speed:
					////found out-proc: 2260  1139  1072  1721  1640  932  678
					////found in-proc: 1219  482  478  473  489  472  478

					//var e = AElement.FromAcc(a, false);
					//Print(e != null);
				}
			}
			iaccParent.Dispose();

			Print(k.Count);
			Print(k);
			//foreach(var v in k) {
			//	Print($"{(IntPtr)v._iacc} {v._elem},  {v.ToString()}");
			//}
			//}
#endif
		}
		finally { Cpp.Cpp_Unload(); }
	}

	//static void TestDllInProcManyWindows()
	//{
	//	try {
	//		var aw = Wnd.GetWnd.AllWindows(true);
	//		foreach(var w in aw) {
	//			if(!w.ClassNameIs("Mozilla*")) continue;
	//			Print($"<><c 0xFF8000>{w}</c>");
	//			//continue;
	//			var a = new List<Acc>();
	//			Perf.First();
	//			Cpp.Cpp_AccFind(true, w, default, "LINK", null, 0, null, 0, out _);
	//			Perf.Next();
	//			var hr = Cpp.Cpp_AccFind(true, w, default, "LINK", null, 0, (ref Cpp.Cpp_Acc r) =>
	//			{
	//				a.Add(new Acc(r.iacc, r.elem));
	//				r.iacc = default;
	//				return 0;
	//			}, 0, out _);
	//			Perf.Next();
	//			if(hr != 1) { Print($"<><c 0xFF>{hr}</c>"); if(a.Count==0) continue; }
	//			Print(a.Count);
	//			Print(a);
	//			Perf.NW();
	//		}
	//	}
	//	finally { Cpp.Cpp_Unload(); }
	//	Print("END");
	//}

	//static void _ClickWait(Acc a, string name)
	//{
	//	Perf.First();
	//	Wnd w = a.WndTopLevel;
	//	string docRole = w.ClassNameIs("IEFrame") ? "web:PANE" : "web:DOCUMENT";
	//	var doc0 = Acc.Find(w, docRole); Print(doc0);
	//	bool checkIsValid = true;
	//	_Print();
	//	a.DoAction();
	//	Wildex x = name;
	//	var to = new WaitFor.LibTimeout(15);
	//	for(; ; ) {
	//		_Print();
	//		if(x.Match(w.Name)) break;
	//		//if(a.RoleInt == 0) break;
	//		to.Sleep();
	//	}
	//	Perf.NW();

	//	void _Print()
	//	{
	//		//if(checkIsValid && doc0.State==0) { checkIsValid=false; Print("old DOCUMENT invalidated"); }
	//		if(checkIsValid && a.RoleInt==0) { checkIsValid=false; Print("LINK invalidated"); }
	//		var doc = Acc.Find(w, docRole);
	//		Print($"'{w.Name}', '{doc.Name}', '{doc.Value}', ({doc.State})");
	//	}
	//}

	static void _ClickWait(Wnd w, Acc a, string name, string old)
	{
		//_TODO: test what Chrome web page objects exist when window name changed before invalidating old DOCUMENT.

		//var w = a.WndTopLevel;
		////Wnd w = default; WaitFor.Condition(3, ()=> { bool ok = !(w = a.WndTopLevel).Is0; if(!ok) Print("wnd 0"); return ok; });
		//Acc.Find(w, "web:", old).OrThrow();

		//var docOld = Acc.Find(w, "web:", secondsTimeout: 0);

		//a.DoAction();
		//for(int i = 0; i < 100; i++) {
		//	//var atest = Acc.Find(w, "web:").OrThrow();
		//	//Cpp.Cpp_InProcTest(atest._iacc);
		//	Print("-----");
		//	Print(Acc.Find(w, "web:").Name);
		//	Print(w.Name);
		//	50.ms();
		//}


		//return;


		Perf.First();
		//a.DoAction();
		//a.DoDefaultActionAndWaitForWindowName(w, name, 10);
		//a.DoDefaultActionAndWaitForInvalid(10);
		//a.DoDefaultActionAndWaitForNewPage(10, w);
		//a.DoActionAndWaitForWebPageLoaded(15);
		a.DoActionAndWaitForNewWebPage(10);

		//a.DoAction();
		//WaitFor.WindowCondition(w, o => o.Name.Like_(name), 10);
		//Perf.Next();
		//Acc.Wait(10, w, "web:", name).Dispose();

		//Print(docOld);
		//Print(docOld.ChildCount);
		//int i;
		//for(i=0; i<10; i++) {
		//	Print(a);
		//	//if(!docOld.GetRect(out var re)) break;
		//	//w.Send(0);
		//	Time.Sleep(14);
		//}
		//Print(i);

		Perf.NW('d');

		//1.s();
		//if(null!=Acc.Find(w, "web:", old)) Print("  old still found");
	}

	enum EBrowser { Chrome, Firefox, IE, Opera }

	static void TestAccScript()
	{
		EBrowser browser;
		browser = EBrowser.Chrome;
		//browser = EBrowser.Firefox;
		//browser = EBrowser.IE;
		//browser = EBrowser.Opera;

		string appName, menuClass;
		switch(browser) {
		case EBrowser.Chrome: appName = "Google Chrome"; menuClass = "Chrome_WidgetWin_2"; break;
		case EBrowser.Firefox: appName = "Mozilla Firefox"; menuClass = "MozillaDropShadowWindowClass"; break;
		case EBrowser.Opera: appName = "Opera"; menuClass = "Chrome_WidgetWin_1"; break;
		default: appName = "Internet Explorer"; menuClass = "#32768"; break;
		}

		string page, link;
		page = "Yahoo - "; link = "Finance";
		//page ="Test - "; link ="Test2";
		//page ="Quick Macros - Support - "; link ="Help online";

		appName = page + appName;
		var w = Wnd.Find(appName).OrThrow();
		w.Activate();

		//Print(Acc.Find(w, "web:")); return;
		//Perf.First(); Acc.Wait(-0.001, w, "web:NN"); Perf.NW(); return;
		//Perf.First(); Acc.Find(w, "web:", secondsTimeout: 3); Perf.NW(); return;
		//Perf.First(); Acc.Find(w, "web:", null, AFFlags.NotInProc, secondsTimeout: 1); Perf.NW(); return;

		AFFlags flags = 0;
		//flags = AFFlags.NotInProc;
		g1:
		Perf.First();
		var a = Acc.Find(w, "web:LINK", link).OrThrow();
		Perf.NW();
		Print(1, a);
		_ClickWait(w, a, "*Finance*", "Trending Now");

		//Acc.Find(w, null, "Back", prop: "notin=DOCUMENT").DoAction();
		//return;

		Perf.First();
		a = Acc.Wait(10, w, "web:LINK", "Industries");
		Perf.NW();
		Print(2, a);
		_ClickWait(w, a, "*Industry*", "My Portfolio & Markets");

		Perf.First();
		a = Acc.Wait(10, w, "web:LINK", "Steel*", flags: flags);
		Perf.NW();
		Print(3, a);
		//var w1 = a.WndContainer;
		//Print(w1.Handle, a);
		_ClickWait(w, a, "*Stock Screener*", "Conglomerates");

		Perf.First();
		a = Acc.Wait(10, w, "web:LINK", "Results List");
		//Perf.NW();
		Print(4, a);

		bool stop = 2 == AuDialog.ShowEx("back", null, "1 Continue|2 Cancel", secondsTimeout: 3);
		//for(int i = 0; i < 3; i++) { //does not work well with Firefox
		//	back.DoAction();
		//	0.1.s();
		//}
		Acc.Find(w, null, "Back", "notin=DOCUMENT").VirtualRightClick();
		var wBackMenu = Wnd.Wait(10, false, null, menuClass, also: o => o.HasStyle(Native.WS.POPUP));
		//Print(wBackMenu);
		a = Acc.Wait(10, wBackMenu, "MENUITEM", "Yahoo");
		//Print(a);
		switch(browser) {
		case EBrowser.Chrome: case EBrowser.Opera: a.VirtualClick(); break; //VirtualClick does not work with Firefox
		default: 100.ms(); a.DoAction(); break; //DoAction does not work with Chrome
		}

		//return;
		if(stop) return;
		Wnd.Wait(30, false, appName);
		3.s();
		Print("---------");
		goto g1;
	}

	static void TestAccFindGetProp()
	{
		var w = Wnd.Find("*- Google Chrome").OrThrow();

		//var f = new Acc.Finder("web:");
		//var f = new Acc.Finder("web:", flags: AFFlags.NotInProc);
		var f = new Acc.Finder("web:BUTTON", "Search");
		//f.ResultGetProperty = 'R';
		//f.ResultGetProperty = 'n';
		//f.ResultGetProperty = 'v';
		//f.ResultGetProperty = 's';
		//f.ResultGetProperty = 'r';
		//f.ResultGetProperty = 'w';
		f.ResultGetProperty = '@';
		if(!f.Find(w)) { Print("not found"); return; }
		Print(f.ResultProperty.GetType());
		//Print(f.ResultProperty);
		Print(f.ResultProperty as Dictionary<string, string>);
		//Print(f.Result);
	}

	static void TestAccCallback()
	{
		var w = Wnd.Find("*- Google Chrome");

		AFFlags flags = 0;
		//flags |= AFFlags.NotInProc;

		var a = Acc.Find(w, "web:LINK", flags: flags, also: o => { Print(o); return false; });
		//var a = Acc.Find(w, "web:LINK", flags: flags, also: o => { Print(o); return o.Name == "Support"; });

		//Perf.First();
		//var a = Acc.Find(w, "web:LINK");
		////var a = Acc.Wait(-0.001, w, "web:LINK");
		//Perf.NW();

		Print(a);
		Print("END");
	}

	static void TestAccFindState()
	{
		var w = Wnd.Find("Options");
		w.Activate();

		AFFlags flags = 0;
		//flags |= AFFlags.NotInProc;

		//var a = Acc.Find(w, "CHECKBOX", flags: flags);
		//var a = Acc.Find(w, "CHECKBOX", prop: "state=CHECKED, !DISABLED\0 notin=ONE,,TWO", flags: flags);
		var a = Acc.Find(w, "CHECKBOX", prop: "state=CHECKED,FOCUSABLE, !FOCUSED\0", flags: flags);
		//var a = Acc.Find(w, "TEXT", prop: "state=PROTECTED", flags: flags);

		Print(a);
		Print("END");
	}

	//static void TestAccHtml()
	//{
	//	//var w = Wnd.Find("* Mozilla Firefox").OrThrow();
	//	var w = Wnd.Find("* Google Chrome").OrThrow();
	//	//var w = Wnd.Find("* Internet Explorer").OrThrow();
	//	//w.Activate();

	//	//var a = Acc.Find(w, "web:").OrThrow();
	//	//var a = Acc.Find(w, "web:", "Support").OrThrow();
	//	//var a = Acc.Find(w, "web:", null, "@href=*f=4*").OrThrow();
	//	//var a = Acc.Find(w, "web:LIST").OrThrow();
	//	var a = Acc.Find(w, "web:LINK", "Test").OrThrow();
	//	//var a = Acc.Find(w, "web:LINK", "Resources").OrThrow();

	//	Print(a);

	//	string attr = "href";
	//	//attr = "class";
	//	//attr = "'o"; //outer HTML
	//	//attr = "'i"; //inner HTML
	//	attr = "'a"; //attributes
	//	//attr = "'s"; //scroll
	//	for(int i = 0; i < 1; i++) {
	//		var hr = Cpp.Cpp_AccWeb(a, attr, out var s);
	//		if(hr != 0) { PrintHex(hr); return; }
	//		if(s != null) Print(s.Replace('\0', ';'));
	//	}
	//}

	static void TestAccNavigate()
	{
		var w = Wnd.Find("* Google Chrome").OrThrow();
		var a = Acc.Find(w, "web:LINK", "Test").OrThrow();

		//var w = Wnd.Find(null, "QM_Editor").OrThrow();
		//var a = Acc.Find(w, "BUTTON", "Compil*").OrThrow();
		////var a = Acc.Find(w, "TREEITEM", "init").OrThrow();

		//var w = Wnd.Find("* Internet Explorer").OrThrow();
		////var a = Acc.Find(w, "web:LINK", "Test").OrThrow();
		//var a = Acc.Find(w, "web:TEXT", "Test").OrThrow();

		//var w = Wnd.Find("QM# - Q:*").OrThrow();
		////var a = Acc.Find(w, "LISTITEM", "Test*").OrThrow();
		////var a = Acc.Find(w, "PAGETAB", "Find").OrThrow();
		//var a = Acc.Find(w, "CLIENT", "Panels").OrThrow();

		//var w = Wnd.Find("Test", "CabinetWClass").OrThrow();
		////var a = Acc.Find(w, "BUTTON", "New folder").OrThrow();
		////var a = Acc.Find(w, "CLIENT", "Test").OrThrow();
		//var a = Acc.Find(w, "BUTTON", "Minimize").OrThrow();

		//var w = Wnd.Find("* Notepad").OrThrow();
		//var a = Acc.Find(w, "TITLEBAR").OrThrow();

		//var w = Wnd.Find("* Google Chrome").OrThrow();
		//if(0 != Cpp.Cpp_AccFromWindow(true, w, 0, out var iaccW)) throw new Exception();
		//var aw =new Acc(iaccW);
		//var a = aw.Find("LINK", "Test").OrThrow();

		//var a = Acc.Find(w, "web:LINK", "Test").OrThrow();
		//var w = Wnd.Find("* Google Chrome").OrThrow();
		//var a = Acc.Find(w, "web:LINK", "Test", navig:"pa").OrThrow();

		//Marshal.AddRef(a._iacc); Print(Marshal.Release(a._iacc));
		Print(a);

		string nav;
		//nav = "pa2 child,4 #2,3 ne next pr previous fi first la last pa parent ch child";
		nav = "pa2 ch5";
		nav = "fi pa3 ch5";
		nav = "pa ch2 la";
		nav = "pr2 pr ne2";
		nav = "pa la pr2 ne";
		//nav = "pr10";
		nav = "ch2 ne";
		nav = "pa ne3";
		//nav="pa";
		Perf.First();
		//int hr = Cpp.Cpp_Navigate(a, nav, out var r);
		a = a.Navigate(nav).OrThrow();
		//a = a.Navigate("parent next ch3", 0, true).OrThrow();
		Perf.NW();
		//if(hr != 0) { PrintHex(hr); return; }

		//a.Dispose();
		//a = new Acc(ref r);
		Print(a);
		//Marshal.AddRef(a._iacc); Print(Marshal.Release(a._iacc));

		//Print(a.Html(true));
		//Print(a.HtmlAttribute("no"));
		//Print(Native.GetErrorMessage());

		//string role, name;
		////role = "CLIENT";
		//role = "PROPERTYPAGE";
		//name = "Ribbon";
		////name = "Quick Access Toolbar";

		//var w = Wnd.Find("Test", "CabinetWClass").OrThrow();
		////var w = Wnd.Find("Options").OrThrow();
		////var w = Wnd.Find(null, "QM_Editor").OrThrow();
		//var a = Acc.Find(w, role, name).OrThrow();
		////return;

		//AFFlags flags = 0;
		////flags |= AFFlags.NotInProc;
		//Perf.First();
		//for(int i = 0; i < 4; i++) {
		//	a = Acc.Find(w, role, name, flags: flags).OrThrow();
		//	Perf.Next();
		//}
		//Perf.Write();
		//Print(a);
		//return;
	}

	static void TestAccGetProp()
	{
		//var w1 = Wnd.Find(null, "QM_Editor").OrThrow();
		//var f = new Acc.Finder("TREEITEM");
		//f.ResultGetProperty = Acc.Finder.RProp.WndContainer;
		//if(f.Find(w1)) Print((Wnd)f.ResultProperty);
		//return;

		//var w = Wnd.Find("* Google Chrome").OrThrow();
		//var a = Acc.Find(w, "web:LINK", "Test").OrThrow();

		//var w = Wnd.Find(null, "QM_Editor").OrThrow();
		////var a = Acc.Find(w, "BUTTON", "Compil*").OrThrow();
		//var a = Acc.Find(w, "BUTTON", skip: 5, flags: AFFlags.NotInProc).OrThrow();

		//Print(a);


		//test speed inproc and outproc

		var flags = AFFlags.MenuToo;
		//flags |= AFFlags.NotInProc;
		var aw = Wnd.GetWnd.AllWindows(true);
		var k = new List<Acc>(100000);
		foreach(var w_ in aw) {
			var w = w_;
			//if(!w.ClassNameIs("Mozilla*")) continue;
			if(w.ClassNameIs("Internet Explorer_Hidden")) continue;
			if(w.ClassNameIs("Ieframe")) w = w.Child(null, "Internet Explorer_Server");
			//if(!w.ClassNameIs("QM_Editor")) continue;
			//Print(w);
			try {
				Acc.Find(w, flags: flags, also: a =>
				{
					//if(a.RoleInt == AccROLE.WINDOW) return false;

					//a = a.Navigate("pa", false); if(a==null) return false;
					k.Add(a);

					//var p = Perf.StartNew();
					////a._misc.flags = 0;
					//var nl = a.Name.Length;
					//p.Next();
					//var tt = p.TimeTotal;
					//if(tt >= 2000) Print("<><c 0x8000>", tt, a, "</c>");

					//Print(a);
					//Print(a.WndContainer);
					return false;
				});
			}
			catch(Exception ex) { Print($"<><c 0xff>{ex.Message}</c>"); }
			//break;
		}
		//return;
		Print("");
		long lenIP = 0, lenNIP = 0;
		Perf.Cpu(500);
		Perf.First();
		var sb = new StringBuilder(1000000);
		foreach(var a in k) {
			//var p = Perf.StartNew();
			//Print(a._misc.flags);
			//a._misc.flags = 0;

			//lenIP += a.Name.Length;
			//lenIP += a.Value.Length;
			//lenIP += a.Description.Length;
			//lenIP += a.Help.Length;
			//lenIP += a.KeyboardShortcut.Length;
			//lenIP += a.DefaultAction.Length;
			//var r = a.Rect; lenIP += r.Width + r.Height;
			//lenIP += (long)a.State;
			//lenIP += (LPARAM)a.WndContainer;

			sb.AppendLine(a.ToString());
#if true
			//p.NW();
#else
			p.Next();
			var tt = p.TimeTotal;
			Print(tt);
			if(tt >= 10000) Print(tt, a, a.WndTopLevel);
#endif
			//a._misc.flags = 0;
			//lenNIP += a.Name.Length;

		}
		Perf.NW();
		Print(sb);
		Print(k.Count, lenNIP, lenIP);
	}

	static void TestWndAccName()
	{
		var k = new List<Wnd>(10000);
		foreach(var w in Wnd.GetWnd.AllWindows(true)) {
			k.AddRange(w.Get.Children());
		}
		Perf.Cpu(200);
		Perf.First();
		long g = 0;
		for(int i = 0; i < 5; i++) {
			g = 0;
			foreach(var w in k) {
				//Perf.First();
				var s = w.NameAcc;
				//Perf.NW();
				//Print(s);
				g += s?.Length ?? 0;
			}
			Perf.Next();
		}
		Perf.Write();
		Print(k.Count, g);
	}

	static void TestAccIsInvisible()
	{
		var w = Wnd.Find("*Mozilla Firefox").OrThrow();
		Acc.Find(w, flags: AFFlags.HiddenToo, also: a =>
		{
			if(a.IsInvisible) Print($"<><c 0x808080>{a}</c>"); else Print(a);
			return false;
		});

		//AFFlags flags = 0;
		////flags |= AFFlags.HiddenToo;
		//var w = Wnd.Find("* Notepad").OrThrow();
		////var w = Wnd.Find("* Word").OrThrow();
		//Print(w);
		//Print(Acc.Find(w, "MENUITEM", "Paste*", flags: flags));
	}

	static void TestAccAction()
	{
		//var w = Wnd.Find(null, "QM_Editor").OrThrow();
		//var w = Wnd.Find("Options").OrThrow();
		var w = Wnd.Find("* Google Chrome").OrThrow();
		//Print(w);
		//w.Activate(); 100.ms();

		AFFlags flags = 0;
		//flags |= AFFlags.NotInProc;

		//var a = Acc.Find(w, "BUTTON", "Prev*", flags: flags).OrThrow();
		//a.DoAction();

		//var a = Acc.Find(w, "TEXT", flags: flags).OrThrow();
		//a.Value = "TEST";

		//var a = Acc.Find(w, "CHECKBOX", "Unicode", flags: flags).OrThrow();
		//var a = Acc.Find(w, "LISTITEM", "Mouse", flags: flags).OrThrow();
		//var a = Acc.Find(w, "LIST", flags: flags).OrThrow();
		//var a = Acc.Find(w, "COMBOBOX", flags: flags).OrThrow();
		//var a = Acc.Find(w, "class=bosa_sdm_Microsoft Office Word 11.0:COMBOBOX", flags: flags).OrThrow();
		//var a = Acc.Find(w, "class=bosa_sdm_Microsoft Office Word 11.0:LIST", flags: flags).OrThrow();
		//var a = Acc.Find(w, "COMBOBOX", flags: flags).OrThrow().Navigate("fi");
		var a = Acc.Find(w, "LINK", "**r ^(T|G)", flags: flags).OrThrow();
		//a = a.Find("LIST", flags: AFFlags.HiddenToo);
		Print(a);
		//Print(a.Html(true));
		//Print(a.Html(false));
		//Print(a.HtmlAttribute("href"));
		//Print(a.HtmlAttribute("style"));
		//Print(a.HtmlAttribute("class"));
		//Print(a.HtmlAttribute("no"));
		//Print(a.HtmlAttributes());
		//Print(a.HtmlAttributes()["href"]);

		//foreach(var v in a.GetMultipleProperties("rnvdhaksRwoi@")) {
		//	if(v is Dictionary<string, string> d) Print(d); //HTML attributes
		//	else Print(v);
		//}

		//a.WndContainer.Focus();
		//PrintHex(Cpp.Cpp_AccSelect(a, AccSELFLAG.TAKEFOCUS));
		//PrintHex(Cpp.Cpp_AccSelect(a, AccSELFLAG.TAKEFOCUS| AccSELFLAG.TAKESELECTION));
		//PrintHex(Cpp.Cpp_AccSelect(a, AccSELFLAG.TAKESELECTION));

		//a.Focus();
		//a.Focus(true);

		//Print(a.SelectedChildren);
	}

	static void TestAccRectHighDPI()
	{
		var w = Wnd.Find("IrfanView");
		Acc.Find(w, also: o => { Print(o); return false; });
	}

	static void TestAccOpenOffice()
	{
		var w = Wnd.Find("*- OpenOffice*").OrThrow();
		//var w = Wnd.Find("*- LibreOffice*").OrThrow(); //need NotInProc and must be process of different bitness
		var flags = AFFlags.NotInProc;
		flags = 0;
		//Acc.PrintAll(w, flags: flags);
		//Print("----");
		var a = Acc.Find(w, "BUTTON", "*PDF", flags: flags).OrThrow();
		//var a = Acc.Find(w, "CLIENT", flags: flags).OrThrow();
		Print(a);
	}

	static void TestAccJava()
	{
		var w = Wnd.Find("Java Control Panel").OrThrow();
		var a = Acc.Find(w, "java:push button", "About*", flags: AFFlags.NotInProc).OrThrow();
		//var a = Acc.Find(w, "java:label", "to add items*", flags: AFFlags.NotInProc).OrThrow();
		//var a = Acc.Find(w, "java:panel", "enable logging*", flags: AFFlags.NotInProc).OrThrow();

		//var w = Wnd.Find("Network Settings").OrThrow();
		//var a = Acc.Find(w, "java:text", "Automatic proxy script location", flags: AFFlags.NotInProc).OrThrow();

		w.Activate();

		//a = a.Navigate("pa");
		//a = a.Navigate("pa2 ch8 fi");
		//a = a.Navigate("pa ne3");
		//a = a.Navigate("pa2 la fi");

		Print(a);

		//Acc.PrintAll(w, "java:", AFFlags.NotInProc);

		//Print(a.Navigate("pa2").ChildCount);
		//Print(a.Navigate("pa2").GetChildCount(false));
		//Print(a.Navigate("pa2").GetChildCount(true));		//Print(a.DefaultAction);
		//Print(a.Description);
		//Print(a.SimpleElementId);
		//Print(a.Help);
		//Print(a.IsReadonly);
		//Print(a.KeyboardShortcut);
		//Print(a.Name);
		//Print(a.Rect);
		//Print(a.Role);
		//Print(a.SelectedChildren);
		//Print(a.State);
		//Print(a.Value);
		//Print(a.WndContainer);
		//a.Value = "55"; Print(a.Value);

		//a.DoAction();
		//a.DoJavaAction();
		//a.DoJavaAction("moo");
		//a.DoJavaAction("click");
		//a.DoJavaAction("select-line");

		//a.Focus();
		//a.VirtualClick();
		//a.Select(AccSELFLAG.TAKESELECTION);
		//a.MouseClick();

		Print("END");
	}

	static void TestAccFromPoint()
	{
		//var w = Wnd.FromMouse();
		//var a = Acc.FromWindow(w);
		//Print(a);
		//Print(a.MiscFlags);

		//2.s();
		Acc a = null;
		AXYFlags flags = 0;
		flags |= AXYFlags.PreferLink;
		//flags |= AXYFlags.UIA;
		if(Keyb.IsScrollLock) flags |= AXYFlags.NotInProc;

		Perf.First();
		for(int i = 0; i < 5; i++) {
			//a = Acc.FromXY(1270, 1290);
			a = Acc.FromMouse(flags);
			Perf.Next();
		}
		Perf.Write();
		//Print(a!=null);
		Print(a);
		Print(a._misc.flags);
		a.Dispose();
	}

	static void TestAccChildCount()
	{
		//var kk =Wnd.GetWnd.AllWindows(true);
		//Print("----");
		//foreach( var v in kk) {
		//	Print(v);
		//	if(v.IsCloaked) Print($"0x{v.Style:X} 0x{v.ExStyle:X}");
		//}
		//return;

		Wnd w;
		//w = Wnd.Find("Quick*", "QM_Editor");
		//w = Wnd.Find("* Internet Explorer");
		//w = Wnd.Find("*Mozilla Firefox");
		//w = Wnd.Find("* Google Chrome");
		//w = Wnd.Find("* Opera");
		//w = Wnd.Find("* OpenOffice*");
		//w = Wnd.Find("Options");
		w = Wnd.Find("Java *");
		//w = Wnd.Find("Settings");
		//w = Wnd.Find("QM# - Q*", "WindowsForms*");

		Print(w);
		//Acc.PrintAll(w, flags: AFFlags.NotInProc);

		//var a = Acc.Find(w, "TOOLBAR", skip:1).OrThrow();
		//var a = Acc.Find(w, "TOOLBAR", flags: AFFlags.NotInProc).OrThrow();
		//var a = Acc.Find(w, "PAGETABLIST").OrThrow();
		//var a = Acc.Find(w, "LINK", skip:2).OrThrow();
		var a = Acc.Find(w, "java:tree").OrThrow();
		Print(a);
		Print(a.State);
		Print(a.ChildCount);
	}

	static void TestAccFromFlags()
	{
		//var a = Acc.FromMouse(AXYFlags.PreferLink);
		////var a = Acc.FromMouse(AXYFlags.NoThrow);
		//Print(a);
		//Print(a.InProc);

		//var w = Wnd.Find(null, "QM_Editor");
		var w = Wnd.Find("* Chrome");

		//w.Activate();
		//Mouse.Move(1000, 1500);

		//var a = Acc.FromWindow(w);
		var a = Acc.FromWindow(w, flags: AWFlags.NotInProc);
		Print(a);
		Print(a.MiscFlags);

		//foreach(var c in w.Get.Children()) {
		//	Print(c);
		//	//var a2 = Acc.FromWindow(c, AccOBJID.CLIENT);
		//	var a2 = Acc.FromWindow(c, AccOBJID.CLIENT, flags: AWFlags.NoThrow);
		//	Print(a2);
		//	Print(a2.InProc);
		//}

		//Print(Acc.Find(w, "TOOLBAR"));
	}

	static void TestAccWnd()
	{
		//var w = Wnd.Find("*Chrome").OrThrow();
		//var a = Acc.Find(w, "web:LINK", "General").OrThrow();
		////var a = Acc.Find(w, "web:LINK", "General", flags: AFFlags.NotInProc).OrThrow();
		//a = a.Navigate("pa");
		//Wnd w2 = default;
		//Perf.First();
		//for(int i = 0; i < 5; i++) {
		//	w2 = a.WndContainer;
		//	Perf.Next();
		//}
		//Perf.Write();
		//Print(w2);

		//var w = Wnd.Find(null, "QM_Editor");
		////var w = Wnd.Find("* Chrome");
		//var a = Acc.Find(w, "CLIENT");
		//Print(a);
		//Print(!a.NotInProc);
		//Print(w.NameAcc);

		AFFlags flags = 0;
		flags |= AFFlags.NotInProc;

		var w = Wnd.Find("Options");
		//var a = Acc.Find(w, "CHECKBOX").OrThrow();
		var a = Acc.Find(w, "CHECKBOX", null, "state=DISABLED", flags: flags).OrThrow();
		//var a = Acc.Find(w, "CHECKBOX", null, "state=1", flags: flags).OrThrow();
		Print(a);
		//a = Acc.Find(w, "CHECKBOX", null, $"rect={a.Rect}", flags: flags).OrThrow();
		//a = Acc.Find(w, "CHECKBOX", null, "rect={L=1155 T=1182 W=132 H=13}", flags: flags).OrThrow();
		a = Acc.Find(w, "CHECKBOX", null, "rect={L=1155 T=1182 W=132 H=13}", flags: flags).OrThrow();
		Print(a);
	}

	static void TestAccMisc1()
	{
		//var w = Wnd.Find("* Chrome");
		//w = w.Child(null, "*render*").OrThrow();
		//var a = Acc.Find(w, "web:LINK", "General");
		//w.Activate();
		//var a = Acc.Focused();
		//var a = Acc.FromMouse(AXYFlags.PreferLink);
		//Print(a);

		var w = Wnd.Find("Java *");
		//var w = Wnd.Find("*Android Studio*");
		Acc.PrintAll(w);
		//Acc.PrintAll(w, "web:LINK");
		//Print(Acc.Find(w, "web:LINK"));
		//var a = Acc.Find(w, "root pane").OrThrow();
		//Print(a);
		//Print(a.Navigate("pa"));
	}

	static void TestAccVariousApps2()
	{
		var w = Wnd.Find("* Eclipse").OrThrow();
		Acc.PrintAll(w);
		//Perf.First();
		//var a = Acc.Find(w, "web:LINK", "Tutorials*").OrThrow();
		var a = Acc.Find(w, "CHECKBOX", "C/C++").OrThrow();
		//Perf.NW();
		Print(a);
	}

	static void TestAccUia()
	{
		var w = Wnd.Find("* Microsoft Edge").OrThrow();
		//var w = Wnd.Find("Ensemble").OrThrow(); //JavaFX
		//var w = Wnd.Find("* Chrome").OrThrow();
		//var w = Wnd.Find("*Sandcastle*").OrThrow();
		//var w = Wnd.Find("* Notepad").OrThrow();
		//var w = Wnd.Find(null, "CabinetWClass").OrThrow();
		//var w = Wnd.Find("FileZilla").OrThrow();
		//var w = Wnd.Find("Java *").OrThrow();

		AFFlags flags = 0;
		flags |= AFFlags.UIA;
		//flags |= AFFlags.HiddenToo;
		//flags |= AFFlags.NotInProc;
		//flags |= AFFlags.MenuToo;

		//Acc.PrintAll(w, flags: flags); return;

		Perf.First();
		Acc a = null;
		//UIA.IElement e = null;
		for(int i = 0; i < 1; i++) {
			//a= Acc.Find(w, "LINK", flags: flags).OrThrow();
			a = Acc.Find(w, "LINK", "Bug Reports", flags: flags).OrThrow();
			//a= Acc.Find(w, "LINK", "Board index", flags: flags).OrThrow();
			//a= Acc.Find(w, prop:"help=YouTube Home", flags: flags).OrThrow();
			//a= Acc.Find(w, "LINK", "HBox", flags: flags).OrThrow();
			//a= Acc.Find(w, prop: "uiaid=JavaFX403", flags: flags).OrThrow();
			//a = Acc.Find(w, "LISTITEM", flags: flags).OrThrow();
			//a= Acc.Find(w, "BUTTON", prop: "elem=12", flags: flags).OrThrow();
			//a= Acc.Find(w, name:"About...", flags: flags).OrThrow();
			//a= Acc.Find(w, "filler", flags: flags).OrThrow();
			//a= Acc.Find(w, name: "Orientation", flags: flags).OrThrow();
			//a= Acc.Find(w, prop:"uiaid=sb_form_q", flags: flags).OrThrow();

			//a = Acc.FromMouse();
			//a = Acc.FromMouse(AXYFlags.UIAutomation| AXYFlags.PreferLink);
			//a = Acc.Focused(true);

			//e = AElement.Find(w, "Bug Reports", UIA.TypeId.Hyperlink);
			//e = AElement.Find(w, "\"Psichologo komentaras\": Apie meditaciją biure", UIA.TypeId.Hyperlink);
			//e = AElement.Find(w, "VBox", UIA.TypeId.Hyperlink);
			Perf.Next();

			//if(a != null) {
			//	//Print("-->");
			//	var e = AElement.FromAcc(a, false);
			//	//Print("<--");
			//	Perf.Next();
			//	Print(e != null);
			//	Print(e?.Name);
			//}

			//foreach(var link in Acc.FindAll(w, "LINK", flags: flags)) {
			//	//foreach(var link in Acc.FindAll(w, "LINK", "*a*", flags: flags)) {
			//	//foreach(var link in Acc.FindAll(w, "LINK", prop: "value=*forumdisplay.php*", flags: flags)) {
			//	//foreach(var link in Acc.FindAll(w, "LINK", flags: flags, also: o => o.Value.Like_("*forumdisplay.php*"))) {
			//	//foreach(var link in Acc.FindAll(w, "////////LINK", flags: flags)) {
			//	//foreach(var link in Acc.FindAll(w, "LINK", prop: "level=8 1000", flags: flags)) {
			//	//foreach(var link in Acc.FindAll(w, prop: "level=2 5", flags: flags)) {
			//	Print(link);
			//	Print(link._misc.flags);
			//}
		}
		Perf.Write();
		Print(a);
		//Print(e?.Name);

		Print(a._misc.flags);
		//a = a.Navigate("pa9");
		//a = a.Navigate("pa fi");
		////a = a.Find();
		//Print(a);
		//Print(a._misc.flags);

		//Print(a.WndContainer);
		//Print(a.WndTopLevel);

		//Print(a.UiaId);
		//Print(a.GetMultipleProperties("u"));

		//Print(a.ChildCount);
		//Print(a.Help);
		//Print(a.KeyboardShortcut);
		////Print(a.Html(true));
		//Print(a.HtmlAttribute("href"));

		//w.Activate();
		//Print(Wnd.Active);
		//a.DoAction(); //yes, but Edge bug: scrolls and calls SetForegroundWindow(direct container control).
		//a.ScrollTo(); //yes
		//a.VirtualClick(); //no
		//a.VirtualRightClick(); //no
		//a.MouseClick();
		//a.DoJavaAction(); //yes in JavaFX (but activates window). In Edge just scrolls.
		//Print(a.Find("BUTTON", "T*"));
		//Print(a.Find("STATICTEXT"));
		//a.Focus(); //yes
		//Print(a.Navigate("pa2 pr2 ne ch2")); //yes
		//a.Select(AccSELFLAG.REMOVESELECTION); //yes

		//a = a.Navigate("pa");
		////Print(a.SelectedChildren);

		//for(int i = 0; i < 5; i++) {
		//	Perf.First();
		//	var sa =a.SelectedChildren;
		//	//var sa = a.FindAll(prop: "level=0\0 state=SELECTED"); //much slower
		//	Perf.NW();
		//	foreach(var v in sa) {
		//		Print(v);
		//		Print(v._misc.flags);
		//	}
		//}

		//1.s();
		//Print(Wnd.Active);
		Print("-- END --");
	}

	static void TestAccFindNavig()
	{
		var w = Wnd.Find("* Chrome").OrThrow();
		var a = Acc.Find(w, "web:LINK", "Bug*").Navigate("ch1", 2);
		Print(a);
		Print("---");
	}

	static void TestAccFromWindowJavaUIA()
	{
		var w = Wnd.Find("Java*");
		//var w = Wnd.Find("Ensemble");
		//var a = Acc.FromWindow(w);
		var a = Acc.FromWindow(w, AccOBJID.Java);
		//var a = Acc.FromWindow(w, AccOBJID.UIAutomation);
		Print(a);
		Print(a.Navigate("fi"));
		//Print(a.Find(name:"Pause"));
		Print(a.Find(name: "View..."));
	}

	//static void TestSpeedDllAndCOM()
	//{
	//	var x = Cpp.Cpp_Interface();

	//	Perf.SpinCPU(100);
	//	for(int i1 = 0; i1 < 5; i1++) {
	//		int n2 = 1000;
	//		Perf.First();
	//		for(int i2 = 0; i2 < n2; i2++) { Cpp.Cpp_TestInt(1, 2, 3); }
	//		Perf.Next();
	//		for(int i2 = 0; i2 < n2; i2++) { Cpp.Cpp_TestString("fffffffffffffffffffffffffffffffffffffffffffffff", 2, 3); }
	//		Perf.Next();
	//		for(int i2 = 0; i2 < n2; i2++) { x.TestInt(1, 2, 3); }
	//		Perf.Next();
	//		for(int i2 = 0; i2 < n2; i2++) { x.TestString("fffffffffffffffffffffffffffffffffffffffffffffff", 2, 3); }
	//		Perf.Next();
	//		for(int i2 = 0; i2 < n2; i2++) { x.TestBSTR("fffffffffffffffffffffffffffffffffffffffffffffff", 2, 3); }
	//		Perf.NW();
	//	}

	//}

	static void TestAccScrollTo()
	{
		//Print(Acc.Focused()); return;

		//var w = Wnd.Find("Quick Macros Forum - Mozilla Firefox", "Moz*").OrThrow();
		//var w = Wnd.Find("Quick Macros Forum - Google Chrome", "Chrome*").OrThrow();
		//var w = Wnd.Find("Au - Microsoft Visual Studio ").OrThrow();
		//var w = Wnd.Find("FileZilla").OrThrow();
		var w = Wnd.Find("Quick*").OrThrow();
		//var w = Wnd.Find("* Edge").OrThrow();

		//Acc.PrintAll(w, "web:LINK"); return;
		//var a = Acc.Find(w, "web:LINK", "Bug*").OrThrow();
		//var a = Acc.Find(w, "TREEITEM", "Test Projects", flags: AFFlags.UIAutomation).OrThrow();
		//var a = Acc.Find(w, "TREEITEM", "Downloads", flags: AFFlags.UIAutomation| AFFlags.NotInProc).OrThrow();
		//var a = Acc.Find(w, "TREEITEM", "Downloads", flags: AFFlags.UIAutomation).OrThrow();
		//var a = Acc.Find(w, "LISTITEM", "web", flags: AFFlags.UIAutomation).OrThrow();
		//var a = Acc.Find(w, "TREE", flags: AFFlags.UIAutomation| AFFlags.NotInProc).OrThrow();
		//var a = Acc.Find(w, "TREE", flags: AFFlags.UIAutomation).OrThrow();
		//var a = Acc.Find(w, "TREEITEM").OrThrow();
		//var a = Acc.Find(w, "LINK", "Bug*", flags: AFFlags.UIAutomation).OrThrow();
		Perf.First();
		var a = Acc.FromWindow(w);
		Perf.NW();

		Print(a);
		Print(a._misc.flags);

		//a.ScrollTo();
		//Print(a.UiaId);
	}

	static void TestAccRoleString()
	{
		var w = Wnd.Find("* Chrome").OrThrow();
		////var w = Wnd.Find("* Edge").OrThrow();
		////var w = Wnd.Find("Ensemble").OrThrow();
		////var w = Wnd.Find("Java *").OrThrow();
		//var w = Wnd.Find("* OpenOffice *").OrThrow();
		//var w = Wnd.Find("Task Scheduler").OrThrow();
		Print(w);

		AFFlags flags = 0;
		//flags |= AFFlags.UIAutomation;
		flags |= AFFlags.HiddenToo | AFFlags.MenuToo;

		Acc.PrintAll(w, flags: flags);
		//foreach(var a in Acc.FindAll(w, flags: flags)) Print(a.Role);

		//Print(Acc.Find(w, "web:div", flags: flags, skip: 1));

		//foreach(var w in Wnd.GetWnd.AllWindows()) {
		//	Print($"<><c 0xff0000>{w.ToString()}</c>");
		//	string name = w.Name;
		//	if(name.EndsWith_(" Edge") || name == "Ensemble") flags |= AFFlags.UIAutomation; else flags &= ~AFFlags.UIAutomation;
		//	Acc.PrintAll(w, flags: flags);
		//}
	}

	static void TestAccEverything()
	{
		//var w = Wnd.Find("* Chrome");
		var w = Wnd.Find("* Notepad");

		//var a = Acc.Find(w, flags: AFFlags.UIA);
		//var a = Acc.Find(w, "BUTTON", flags: AFFlags.UIA| AFFlags.NotInProc|AFFlags.HiddenToo| AFFlags.MenuToo);
		var a = Acc.Find(w, "BUTTON", flags: AFFlags.NotInProc | AFFlags.MenuToo);

		//var a = Acc.FromWindow(w, AccOBJID.UIA, flags: AWFlags.InProc);
		////var a = Acc.FromWindow(w, AccOBJID.UIA);

		Print(a);
		//a.Dispose();
	}

	public class AccEtc
	{
		string _s;
		public string value, description, help, action, key, uiaid, attributes, notin;
		public object state, level, rect, elem, maxcc;

		public AccEtc() { }

		public AccEtc(
			string value, string description, string help, string action, string key, string uiaid, string attributes,
			string notin, object state, object level, object rect, object elem, object maxcc)
		{

		}

		public static implicit operator AccEtc(string s) => new AccEtc() { _s = s };
		public static implicit operator string(AccEtc x)
		{
			string s = x._s;
			if(s == null) {
				var b = new StringBuilder();
				_Add(x.value);
				_Add(x.description);
				_Add(x.help);
				_Add(x.action);
				_Add(x.key);
				_Add(x.uiaid);
				_Add(x.attributes);
				_Add(x.notin);
				_Add(x.state);
				_Add(x.level);
				_Add(x.rect);
				_Add(x.elem);
				_Add(x.maxcc);

				void _Add(object t)
				{
					if(t == null) return;
					if(b.Length != 0) b.Append("\0 ");
					b.Append(t);
				}

				s = b.ToString();
			}
			return s;
		}
	}

	static void TestAccPropFormat()
	{
		//var w1 = Wnd.Find("* Chrome").OrThrow();
		//var a1 = Acc.Find(w1, "web:BUTTON", "Search").OrThrow().Navigate("pa").OrThrow();
		//Print(a1 != null);
		//return;

		//Print("one" + @"\two" + $"{3}" + $@"f{0}\ur"); return;
		//Print(@"one" + "\0" + @"two"); return;
		//Print(@"one\n" + @"two"); return;
		//Print(new string[] { @"one", @"two" });

		//AccFind(default, "role", more: "ffff", more: "gggg");

		//RECT r = new RECT(1, 2, 3, 4, true);
		//Tyyp(r);
		////Tyyp(in r);
		//Tyyp();

		//Kuu("one=ONE\0 two=TWO\0 three=THREE");
		//Kuu(one: "ONE", two: "TWO", three: "THREE");
		Wnd ww = default;
		Acc.Find(ww, "role", prop: "one=ONE\0 two=TWO\0 three=THREE");
		Acc.Find(ww, "role", prop: "one=ONE\n two=TWO\n three=`TH\r\nREE`");
		Acc.Find(ww, "role", prop: "one=ONE\n" + @"two=TWO\n" + "three=`TH\r\nREE`");
		Acc.Find(ww, "role", prop: "one=ONE\0" + @"two=TWO" + "\0" + "three=`TH\r\nREE`");
		Acc.Find(ww, "role", prop: new AccEtc() { value = "ONE", uiaid = "TWO", state = "STATE" });
		Acc.Find(ww, "role", prop: @"
one=ONE
two=TWO
three=`TH
REE`");
	}

	static void TestAccThrowOperator()
	{
		////Wnd.Find("Quick Macros Forum - Google Chrome-", "Chrome_WidgetWin_1").MouseMove();
		////Print((+Wnd.Find("Quick Macros Forum - Google Chrome-", "Chrome_WidgetWin_1")).ThreadId);
		//Print(Wnd.Find("Quick Macros Forum - Google Chrome-", "Chrome_WidgetWin_1").OrThrow().ThreadId);
		//return;

		//var w = Wnd.Find("Quick Macros Forum - Google Chrome", "Chrome_WidgetWin_1").OrThrow();
		////Acc a = null;
		////a = Acc.Find(w, "web:LINK", "Example"); //if not found, sets a = null
		////a = -Acc.Find(w, "web:LINK", "Example"); //if not found, throws exception

		////a = Acc.Find(w, "web:LINK") + "next";
		////a = -Acc.Find(w, "web:UUU") + "next";
		////a = (-Acc.Find(w, "web:UUU")).Navigate("next");
		////a = -(-Acc.Find(w, "web:LINK")).Navigate("next100");
		////a = Acc.Find(w, "web:LINK")["next"];
		////a = -Acc.Find(w, "web:LINK")["ne100"];
		////a = -(-Acc.Find(w, "web:UUU"))["ne100"];
		////a = Acc.Find(w, "web:UUU").OrThrow()["ne100"];
		////a = Acc.Find(w, "web:LINK").OrThrow()["ne"].OrThrow();
		////a = Acc.Find(w, "web:LINK")?["ne"];
		//////a = (Acc.Find(w, "web:LINK-")?["ne"]).OrThrow();
		////a = (Acc.Find(w, "web:LINK")?["ne100"]).OrThrow();
		//////a = Acc.Find(w, "web:UUU")["ne100"];
		////a = -Acc.Find(w, "web:LINK")?["ne100"];
		////var a = Acc.Find(w, "web:LINK-").SimpleElementId.OrThrow();
		//Acc.Find(w, "web:LINK", "Portal-").MouseMove();

		////a = Acc.Find(w, "web:UUU").OrThrow();
		////Print(a);

		//var w1 = Wnd.Find("Example").OrThrow();
		//var w2 = Wnd.Find("Example").OrThrow(); //the same

		//var w3 = Wnd.Find("Example").OrThrow().Child("Example").OrThrow();
		//var w4 = Wnd.Find("Example").Child("Example").OrThrow();

		//var w5 = Wnd.Find("Example").Child("Example");

		//var w = Wnd.Find("Example").OrThrow();

		//var a1 = Acc.Find(w, "web:LINK", "Example").OrThrow();
		//var a2 = Acc.Find(w, "web:LINK", "Example").OrThrow(); //the same

		//var a3 = (Acc.Find(w, "web:LINK", "Example")?.Navigate("example")).OrThrow();

		//var a5 = (Acc.Wait(3, w, "Example")?.Navigate("example")).OrThrow();

		//var w = Wnd.Find("Example").OrThrow();
		//var r1 = WinImage.Find(w, "example").OrThrow();
		//var r2 = WinImage.Find(w, "example").OrThrow(); //the same
	}

	static void TestAccEdgeNoUIA()
	{
		for(int i = 0; i < 5; i++) {

			Perf.First();
#if true
			var w = Wnd.Find("* Edge", "Applic*").OrThrow();
			//w = w.Child(null, "Windows.UI.Core.CoreWindow").OrThrow(); //same speed etc
			var a = Acc.Find(w, "LINK", "Bug*", flags: AFFlags.UIA).OrThrow();
#else //30% faster
			var w = Wnd.Find("Microsoft Edge", "Windows.UI.Core.CoreWindow", flags: WFFlags.HiddenToo).OrThrow();
			//w = w.Child("CoreInput", "Windows.UI.Core.CoreComponentInputSource").OrThrow(); //same speed etc
			var a = Acc.Find(w, "LINK", "Bug*", flags: AFFlags.HiddenToo).OrThrow();
#endif
			Perf.NW();
			Print(a);
			Print(a.MiscFlags);
			//Print(a.WndContainer);
		}
	}

	static void TestAccFirefoxNoSuchInterface()
	{
		//var w = Wnd.Find("Quick Macros Forum - Mozilla Firefox", "MozillaWindowClass").OrThrow();
		////var w = Wnd.Find("* Chrome").OrThrow();
		//AFFlags f = 0;
		////f |= AFFlags.NotInProc;

		////for(int i = 0; i < 10; i++) {
		////	//var aa=Acc.Find(w, "web:", null, null, f);
		////	//var aa=Acc.Wait(0.1, w, "web:", null, null, f);
		////	var aa=Acc.Find(w, "LINK", null, null, f, skip: 1);
		////	if(aa == null) Print("no"); else Print(aa);
		////}
		////return;

		//////Acc.PrintAll(w, flags: f);
		////Acc.PrintAll(w, "web:", flags: f);
		////return;

		//var a = Acc.Find(w, "web:LINK", "Bug Reports", null, f).OrThrow();
		//Print(a.MiscFlags);
		//Print(a);
		////Print(a.Role);
		////Print(a.Name);
		////Print(a.State);
		////Print(a.Rect);
		////Print(a.WndContainer);

		//var w = Wnd.Find("Settings", "ApplicationFrameWindow").OrThrow();
		//var a = Acc.Find(w, "LISTITEM", "Devices", "class=Windows.UI.Core.CoreWindow").OrThrow();

		var w = Wnd.Find("Microsoft Edge", "Windows.UI.Core.CoreWindow", flags: WFFlags.HiddenToo).OrThrow();
		Acc.PrintAll(w, flags: AFFlags.UIA);
		var a = Acc.Find(w, "TEXT", "this exact word or phrase:", flags: AFFlags.UIA).OrThrow();
		Print(a);
		Print(a.MiscFlags);
	}

	static void TestMainWindows2()
	{
		//var a =Wnd.GetWnd.MainWindows(likeAltTab:true);
		//Print("---");
		//Print(a);

		//Print(Wnd.Active);
		//Wnd.SwitchActiveWindow();
		//Print(Wnd.Active);

		//Print(Api.GetDesktopWindow());
		//Print("----");
		//var a =Wnd.GetWnd.AllWindows();

		////Perf.SpinCPU(100);
		////for(int i1 = 0; i1 < 5; i1++) {
		////	int n2 = 1000;
		////	Perf.First();
		////	for(int i2 = 0; i2 < n2; i2++) { foreach(var w in a) { var ro = w.Get.RootOwnerOrThis(); } }
		////	Perf.Next();
		////	for(int i2 = 0; i2 < n2; i2++) { foreach(var w in a) { var ro = w.Owner; } }
		////	Perf.Next();
		////	//for(int i2 = 0; i2 < n2; i2++) { foreach(var w in a) { var ro = w.Get.RootOwnerOrThis2(); } }
		////	//Perf.Next();
		////	for(int i2 = 0; i2 < n2; i2++) { }
		////	Perf.NW();
		////}

		//foreach(var w in a) {
		//	var ro = w.Get.RootOwnerOrThis();
		//	//if(ro== Api.GetDesktopWindow()) {
		//	//if(ro!= w) {
		//	//	Print("----");
		//	//	Print(w);
		//	//	Print(ro);
		//	//	Print(w.Owner);
		//	//	Print(w.Get.DirectParentOrOwner );
		//	//}
		//	//Print();
		//	var ro2 = w.Get.RootOwnerOrThis(true);
		//	if(ro2 != ro) {
		//		Print("----");
		//		Print(w);
		//		Print(ro);
		//		Print(ro2);
		//	}
		//}

		//var w = Wnd.Find("Options");
		//Print(w);
		//Print(w.Get.LastActiveOwnedOrThis());
		//Print(w.Get.LastActiveOwnedOrThis(true));

		//Print(Wnd.GetWnd.MainWindows());
		////Print(Wnd.GetWnd.NextMain());
		//var w = Wnd.Find("* Chrome").OrThrow();
		//Print(Wnd.GetWnd.NextMain(w, retryFromTop: true));
		Print(Wnd.SwitchActiveWindow());
		Print(Wnd.Active);
	}

	static void TestAccProcessDoesNotExit()
	{
		//Print(Api.GetCurrentThreadId());

		//var a = Acc.FromXY(20, 20);
		//var a = Acc.FromXY(20, 20, flags: AXYFlags.NotInProc);

		Wnd w = Wnd.Find("*Notepad");
		//return;

		AFFlags f = 0;
		////f |= AFFlags.NotInProc;
		var a = Acc.Find(w, "TEXT", flags: f);
		//var a = Acc.Find(w, "NOTFOUND");
		if(a == null) return;

		Print(a);
		a.Dispose();

		//Perf.SpinCPU(100);
		//for(int i = 0; i < 10; i++) {
		//	var a = Acc.Find(w, "TEXT");
		//	Print(a);
		//	200.ms();
		//}
	}

	static void TestAccProcessDoesNotExit3()
	{
		//Wnd w = Wnd.Find("*Notepad");
		//var x=new

		var t = new Thread(() => { Print(Api.GetCurrentThreadId()); TestAccProcessDoesNotExit(); });
		t.SetApartmentState(ApartmentState.STA);
		t.Start();
		MessageBox.Show("");
		Task.Run(() => { Print(Api.GetCurrentThreadId()); TestAccProcessDoesNotExit(); });
		MessageBox.Show("");
		var tt = new Thread(() =>
		{
			var ad = AppDomain.CreateDomain("qwerty");
			ad.DoCallBack(() => { Output.LibUseQM2 = true; Print(Api.GetCurrentThreadId()); TestAccProcessDoesNotExit(); });
			AppDomain.Unload(ad);
		});
		tt.SetApartmentState(ApartmentState.STA);
		tt.Start();
		MessageBox.Show("");
	}

#if TOOLS
	static void TestAccForm()
	{
		Acc a = null;
#if true
		//Cpp.Cpp_Test(); return;

		var w = Wnd.Find(null, "QM_Editor").OrThrow();
		a = Acc.Find(w, "BUTTON", "Paste*").OrThrow();

		//var w = Wnd.Find(null, "IEFrame").OrThrow();
		//a = Acc.Find(w, "web:LINK", "QM and*").OrThrow();

		//var w = Wnd.Find(null, "Shell_TrayWnd").OrThrow();
		//a = Acc.Find(w, "BUTTON").OrThrow();

		//var w = Wnd.Find("* Chrome").OrThrow();
		//a = Acc.Find(w, "web:BUTTON", "Search").OrThrow();
		//a = Acc.Find(w, "web:BUTTON", "Search", "class=moo").OrThrow();


		//Print(a);
		//return;
		//Print(a.MiscFlags);

		//Print(w);
		//Print(a);

		//Print(Ver.Is64BitProcess);
		//Print(w.Is64Bit);
		//return;

		//a = Acc.Find(w, "web:CELL", "Posts").OrThrow();

		//var w = Wnd.Find("* Firefox").OrThrow();
		//a = Acc.Find(w, "web:TEXT", "Search the Web").OrThrow();

		//var w = Wnd.Find("Quick *").OrThrow();
		//a = Acc.Find(w, "BUTTON", "Properties*").OrThrow();

		//foreach(var k in Wnd.GetWnd.AllWindows(false)) {
		//	//if(!k.ClassNameIs("Windows.UI.Core.CoreWindow")) continue;
		//	//if(!k.IsVisible || k.IsVisibleEx) continue;
		//	if(!k.IsCloaked) continue;
		//	var s = k.Name; if(Empty(s) || s=="Default IME" || s== "MSCTFIME UI") continue;
		//	Print(k);
		//	//Print(k.IsVisible, k.IsCloaked);
		//	//continue;
		//	foreach(var c in k.Get.Children()) {
		//		Print($"\t{c.ToString()}");
		//	}
		//}
		//return;

		//var w = Wnd.Find("Microsoft Edge", "Windows.UI.Core.CoreWindow", flags: WFFlags.HiddenToo).OrThrow();
		//a = Acc.Find(w, "PANE", flags: AFFlags.HiddenToo).OrThrow();

		//a = a.Navigate("pr");
#endif

		//Task.Run(() => { for(int i = 0; i < 10; i++) { 2.s(); GC.Collect(); } });

		Perf.First();
		var f = new Au.Tools.Form_Acc(a);
		f.ShowDialog();
		//Application.Run(f);
		f.Close();
		f.Dispose();
		//AuDialog.Show("-");
	}
#endif

	static void TestAccFindWithChildFinder()
	{
		var w = Wnd.Find("* Internet Explorer").OrThrow();
		for(int i = 0; i < 5; i++) {
			100.ms();
			Perf.First();
			//var a = Acc.Find(w, "web:LINK", "Videos").OrThrow();
			//var a = Acc.Find(w, "LINK", "Videos").OrThrow();
			//var a = Acc.Find(w, "LINK", "Videos", "class=*Server").OrThrow();
			var a = Acc.Find(w, "LINK", "Videos", controls: new Wnd.ChildFinder(null, "*Server")).OrThrow();
			Perf.NW();
			Print(a);
		}
	}

	[MethodImpl(MethodImplOptions.NoInlining)]
	static int TestAccLeaks3(Wnd w)
	{
		var a = Acc.FindAll(w);
		//foreach(var v in a) v.Dispose();
		return a.Length;
	}

	[MethodImpl(MethodImplOptions.NoInlining)]
	static void TestAccLeaks2(Wnd w)
	{
		//return;
		int n = 0;
		Debug_.LibMemoryPrint();
		for(int i = 0; i < 15; i++) {
			for(int j = 0; j < 40; j++) {
				n = TestAccLeaks3(w);
			}
			Debug_.LibMemoryPrint();
			100.ms();
		}
		Print(n);
		//Print($"max {(double)Acc.DebugMaxMemoryPressure/(1024*1024)}, sum {(double)Acc.DebugMemorySum/(1024*1024)}");
	}

	static void TestAccLeaks()
	{
		//var w = Wnd.Find(className: "FM").OrThrow();
		//var w = Wnd.Find("QM Help").OrThrow();
		//var w = Wnd.Find("* Firefox").OrThrow();
		var w = Wnd.Find("Quick M*").OrThrow();
		//var w = Wnd.Find("*Chrome").OrThrow();
		Acc.FindAll(w);
		GC.Collect();
		MessageBox.Show("continue");
		g1:
		Output.Clear();
		TestAccLeaks2(w);
		MessageBox.Show("before GC");
		GC.Collect();
		100.ms();
		GC.Collect();
		100.ms();
		GC.Collect();
		100.ms();
		GC.Collect();
		100.ms();
		GC.Collect();
		if(MessageBox.Show("after GC\nContinue?", "", MessageBoxButtons.YesNo) == DialogResult.Yes) goto g1;
	}

	static void TestAccFindParamNavig()
	{
		var w = Wnd.Find("Quick Macros - ok - [Macro10]", "QM_Editor").OrThrow();
		//var a = (Acc.Find(w, "BUTTON", "Copy*", "id=2053")?.Navigate("ne")).OrThrow();
		//var a = Acc.Find(w, "BUTTON", "Copy*", "id=2053", navig: "ne").OrThrow();
		//var a = Acc.Wait(2, w, "BUTTON", "Copy*", "id=2053");
		var a = Acc.Wait(2, w, "BUTTON", "Copy*", "id=2053", navig: "ne");
		Print(a);
	}

	//static void TestScreenCaptureSpeedWithCaptureblt()
	//{
	//	Perf.SpinCPU(1000);
	//	var file = Folders.Temp + "test.png";
	//	var r=Screen_.Rect;
	//	Print(r);
	//	for(int i = 0, n=16; i < n; i++) {
	//		10.ms();
	//		Perf.SpinCPU(100);
	//		Perf.First();
	//		using(var b = WinImage.Capture((i&1)!=0, r)) {
	//			Perf.NW();
	//			if(i == n-1) {
	//				b.Save(file);
	//				Shell.Run(file);
	//			}
	//		}
	//	}

	//}

	static void TestWndForm()
	{

	}

	static void TestWndImage()
	{
		//var w = Wnd.Find("Icons").OrThrow();
		//var r = WinImage.Find(w, @"Q:\My QM\copy.bmp", WIFlags.WindowDC).OrThrow();
		//r.MouseMove();

		//var w = Wnd.Find("Icons").OrThrow();
		//var _image = Au.Controls.ImageUtil.ImageToString(@"Q:\My QM\copy.bmp");
		//Print(_image);
		//var r = WinImage.Find(w, _image, WIFlags.WindowDC).OrThrow();
		//r.MouseMove();



		//Perf.First();
		////var im = Image.FromFile(@"Q:\My QM\copy.bmp");
		////var w = Wnd.Find(also: o=> null!=WinImage.Find(o, im, WIFlags.WindowDC)).OrThrow();
		//var w = Wnd.Find(also: o => null != WinImage.Find(o, @"Q:\My QM\copy.bmp", WIFlags.WindowDC)).OrThrow();
		////var w = Wnd.Find(also: o=> { Print(o); return null != WinImage.Find(o, @"Q:\My QM\copy.bmp", WIFlags.WindowDC); }).OrThrow();
		////var w = Wnd.Find(also: o => { Print(o); Perf.First(); var ok = null != WinImage.Find(o, @"Q:\My QM\copy.bmp", WIFlags.WindowDC); Perf.NW(); return ok; }).OrThrow();
		//Perf.NW();
		//Print(w);

		//1.5.s();
		////Task.Run(() => { for(int i = 0; i < 10; i++) { 2.s(); GC.Collect(); } });
		//var path = @"Q:\My QM\copy.bmp"; //memsize 1 KB
		//path = @"C:\Program Files\Android\Android Studio\plugins\android\lib\layoutlib\data\res\drawable-sw720dp-nodpi\default_wallpaper.png"; //memsize 28 MB
		////path = @"C:\Program Files\Android\Android Studio\plugins\android\lib\device-art-resources\nexus_4\land_back.png"; //memsize 6 MB
		////path = @"C:\Program Files\LibreOffice 5\share\gallery\education\Notebook.png"; //memsize 2 MB
		////path = @"C:\Program Files\LibreOffice 5\share\gallery\finance\GoldBar.png"; //memsize 500 KB
		////path = @"C:\Program Files\Android\Android Studio\plugins\android\lib\layoutlib\data\res\drawable-ldpi\jog_tab_right_confirm_red.png"; //memsize 22 KB
		////path = @"C:\Program Files\Android\Android Studio\plugins\android\lib\layoutlib\data\res\drawable-mdpi\picture_emergency.png"; //memsize 36 KB
		////path = @"C:\Program Files\Android\Android Studio\plugins\android\lib\device-art-resources\nexus_4\thumb.png"; //memsize 93 KB
		////path = @"C:\Program Files\LibreOffice 5\share\gallery\computers\Database-Download.png"; //memsize 299 KB
		////path = @"C:\Program Files\Android\Android Studio\plugins\android\lib\layoutlib\data\res\drawable-hdpi\ic_menu_recent_history.png"; //memsize 9 KB
		//for(int i = 0; i < 150; i++) {
		//	Debug_.LibPrintMemory();
		//	var k = new WinImage._Finder._Image(path);
		//	//k.Dispose();
		//	//var k = Image.FromFile(path);
		//	100.ms();
		//}
	}

	static void TestWndFindContains()
	{
		Perf.First();
		var w = Wnd.Find(contains: "Do you want to save*").OrThrow();
		//var w = Wnd.Find(contains: "Untitled - Notepad").OrThrow();
		//var w = Wnd.Find(contains: "Personalization").OrThrow();
		//var w = Wnd.Find(contains: new Acc.Finder("STATICTEXT", "Do you want to save*")).OrThrow();
		//var w = Wnd.Find(contains: new Wnd.ChildFinder("Save", "Button")).OrThrow();
		//var w = Wnd.Find(contains: WinImage.LoadImage(@"Q:\My QM\copy.bmp")).OrThrow();
		Perf.NW();
		Print(w);

		//var w = Wnd.Find("* Notepad").OrThrow();
		//Acc.PrintAll(w);
		////Acc.PrintAll(w, flags: AFFlags.ClientArea);
		//////Acc.PrintAll(w, flags: AFFlags.ClientArea | AFFlags.UIA);
	}






	
#if TOOLS
	static void TestToolWinImage()
	{
		using(var f = new Au.Tools.Form_WinImage()) f.ShowDialog();
	}

#endif
	static void TestToolWinImageCode()
	{
#if true
		//var w = Wnd.Find("Quick*");


		//WinImage.Find(w, @"q:\test\function icon.bmp").MouseMove();
		//var r = WinImage.Find(w, @"q:\test\function icon.bmp");
		//Print(r);

		//var a = new List<WinImage>();
		//var img = @"q:\test\function icon.bmp";
		////var img = new string[] { @"q:\test\function icon.bmp", @"q:\test\autotext icon.bmp"};
		//WinImage.Find(w, img, also: o => { a.Add(o); return false; });
		////Print("----");
		////Print(a);
		//foreach(var k in a) { Print(k.MatchIndex, k.ListIndex); k.MouseMove(); 0.3.s(); }

		//Print("ok");

		var w = Wnd.Find("Au - Microsoft Visual Studio ", "HwndWrapper[DefaultDomain;*").OrThrow();
		object[] images = {
			"image:iVBORw0KGgoAAAANSUhEUgAAABwAAAAQCAYAAAAFzx/vAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADqSURBVEhLY/hPZzD4Lfz37x+URR4gyUKYZZP2Tvhv1W8Kx/OOzAGLg9jINDaAYuHVV1//+2x5/l916eP/Hpue/T/7/DNUBgFglgXN9QNbBOJvv7wVbjkyxgZQLHTd+Oz/vCvv/n/6/vP/kmvv/1uuffr/77+/UFkIABnkNs3p/9evX6AiCACzBJdlIEByHIIMy1uRDeUhAEgcHWMDKBYqLnmCgdEByCCq+RBmyY8fP7Ba+OfPH7DvQAYix+Hq0yuhKggDkiwEAZDPYJbCMMhCYrMLyUGKDYB8TiwgOdFQCkYtpDqgs4X//wMAud2NhZbZMbsAAAAASUVORK5CYII=",
			"image:iVBORw0KGgoAAAANSUhEUgAAAA0AAAALCAYAAACksgdhAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABiSURBVChTY/iPBD6/vv//5bVd/3/8+IEV39vZBFbHcH9/939k/O3rV6waQBiuCZskLjwAmkAMfPjr54+ka3p6aiHpmkD448v7pGu6v7eLdE0g/OrWwf+Pjs2AaAKTJIH//wEF2/8fchW91wAAAABJRU5ErkJggg==",
		};
		var all = new List<WinImage>();
		//all.Add(WinImage.Find(w, images));
		//Print(WinImage.Find(w, images, also: t => { all.Add(t); return WIAlso.FindOther; }));
		//Print(WinImage.Find(w, images, also: t => { all.Add(t); return WIAlso.OkFindMore; }));
		//Print(WinImage.Find(w, images, also: t => { all.Add(t); return WIAlso.FindOtherOfList; }));
		//Print(WinImage.Find(w, images, also: t => { all.Add(t); return WIAlso.OkFindMoreOfList; }));
		//Print(WinImage.Find(w, images, also: t => { all.Add(t); return WIAlso.FindOtherOfThis; }));
		//Print(WinImage.Find(w, images, also: t => { all.Add(t); return WIAlso.OkFindMoreOfThis; }));
		//bool found = false; Print(WinImage.Find(w, images, also: t => { all.Add(t); if(!found) { found = true; return WIAlso.OkFindMoreOfThis; } return WIAlso.FindOtherOfThis; }));
		//Print(WinImage.Find(w, images, also: t => { all.Add(t); return WIAlso.OkReturn; }));
		//Print(WinImage.Find(w, images, also: t => { all.Add(t); return WIAlso.NotFound; }));

		//Print(WinImage.Wait(-1, w, images, also: t => { all.Add(t); return WIAlso.FindOther; }));
		//Print(WinImage.Wait(-1, w, images, also: t => { all.Add(t); return WIAlso.OkFindMore; }));
		//Print(WinImage.Wait(-1, w, images, also: t => { all.Add(t); return WIAlso.FindOtherOfList; }));
		//Print(WinImage.Wait(-1, w, images, also: t => { all.Add(t); return WIAlso.OkFindMoreOfList; }));
		//Print(WinImage.Wait(-1, w, images, also: t => { all.Add(t); return WIAlso.FindOtherOfThis; }));
		//Print(WinImage.Wait(-1, w, images, also: t => { all.Add(t); return WIAlso.OkFindMoreOfThis; }));
		//bool found = false; Print(WinImage.Wait(-1, w, images, also: t => { all.Add(t); if(!found) { found = true; return WIAlso.OkFindMoreOfThis; } return WIAlso.FindOtherOfThis; }));
		//Print(WinImage.Wait(-1, w, images, also: t => { all.Add(t); return WIAlso.OkReturn; }));
		//Print(WinImage.Wait(-1, w, images, also: t => { all.Add(t); return WIAlso.NotFound; }));

		//var found = new BitArray(images.Length); WinImage.Find(w, images, also: t => { found[t.ListIndex] = true; return WIAlso.OkFindMoreOfList; }); if(found[0]) Print(0); if(found[1]) Print(1);
		//Print(WinImage.Find(w, images, also: t => { all.Add(t); return true ? WIAlso.OkReturn : WIAlso.FindOther; }));
		Print(WinImage.Find(w, images, also: o => { all.Add(o); return o.Skip(1); }));
		Print("---");
		foreach(var wi in all) { Print(wi); }

#else
		//var w = Wnd.Find("Au - Microsoft Visual Studio ", "HwndWrapper[DefaultDomain;*").OrThrow();
		//string image = "image:iVBORw0KGgoAAAANSUhEUgAAABYAAAANCAYAAACtpZ5jAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADZSURBVDhPY/hPIzACDP737x+UhR+QZDDM0El7J/y36jeF43lH5oDFQWwYjWLw1Vdf//tsef5fdenj/x6bnv0/+/wzVAYBYIYGzfUDGwjib7+8FW4JDKMY7Lrx2f95V979//T95/8l197/t1z79P/ff3+hshAA0uQ2zen/169foCIIAJKD0SSHMUhT3opsKA8BQOLIGMVgxSVPMDA6AGki2cUww378+IHV4D9//oBdC9KIHMarT6+EqkAAkgwGAZBLYYbDMMhg9GRIclBgAyCfoAOSI4848P8/AFdhC+1vmMLqAAAAAElFTkSuQmCC";
		//var wi = WinImage.Find(w, image).OrThrow();
		//wi.MouseMove();

		//var w = Wnd.Find("Quick Macros - ok - [Macro10]", "QM_Editor").OrThrow();
		//string image = @"image:iVBORw0KGgoAAAANSUhEUgAAAAoAAAANCAYAAACQN/8FAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACDSURBVChTY/j//8B/YjCKQo81ViiSyBhDoewUbhQFMIyhcPGzPqyKURRaLdP5H3nNDatiFIUmi5XBCkHYaq8mimIUhSrzRP57HTcHK5JZyPRfZAoDGGMoFJ/DiqJIoB+iCEOh0EwGrIpAGEMhNkUgjKIQlyIQRlGISxEIoyjEjQ/8BwCB76UzQz6WoQAAAABJRU5ErkJggg==";
		//var wi = WinImage.Find(w, image).OrThrow();
		//using(wi.MouseClick(button: MButton.Left | MButton.Down)) Mouse.MoveRelative(0, 50);


#endif

	}

	static void TestWinImageCapture()
	{
		//var w = Wnd.Find("*Chrome");
		//var b = WinImage.Capture(w, w.Rect);

		//var b = WinImage.Capture(new RECT(0, 0, 1, 1, true));
		//_ShowImage(b);

		WICFlags f = 0;
		//f|=WICFlags.WindowDC;
		//f |= WICFlags.Color;
		//f |= WICFlags.Image;
		f |= WICFlags.Rectangle;
		if(!WinImage.CaptureUI(out var r, f)) return;
		Print(r.rect, r.color, r.wnd);
		_ShowImage(r.image);

		//var f = new Form();
		////f.SizeGripStyle = SizeGripStyle.Hide;
		////f.FormBorderStyle = FormBorderStyle.FixedDialog;
		//f.StartPosition = FormStartPosition.Manual;
		//var r= SystemInformation.VirtualScreen;
		//f.Top = r.Top;
		//f.Left = r.Left;
		//f.ShowDialog();

		//var f = new Form();
		//var p = new PictureBox();
		//p.ImageLocation = @"Q:\My QM\C8375087-NET.png";
		//p.SizeMode = PictureBoxSizeMode.AutoSize;
		//f.Controls.Add(p);
		//p.MouseDown += (unu, sed) =>
		//  {
		//	  var a = new List<POINT>() { Mouse.XY };
		//	  if(!Au.Util.DragDrop.SimpleDragDrop(p, MButtons.Left, m =>
		//	  {
		//		  //Print(m.Msg.pt);
		//		  a.Add(m.Msg.pt);
		//	  })) return;

		//	  //a = new List<POINT>() { (0,0),(2,0),(2,2),(0,2) };

		//	  //var w =(Wnd)f;
		//	  //w.Owner = Wnd.GetWnd.Root;
		//	  //Print(Wnd.Misc.OwnerWindowsAndThis(w)); return;

		//	  var b = WinImage.Capture(a);
		//	  _ShowImage(b);
		//  };
		//f.ShowDialog();
	}

	static void TestPasteBluestacks()
	{
		//var d = new Clipb.Data(); d.AddText("moo").SetClipboard();
		Wnd.Find("BlueStacks").Activate();
		//Wnd.Find("*Edge").Activate();
		//Wnd.Find("*Notepad").Activate();
		//Wnd.Find("*VMware*").Activate(); Mouse.Click(1079, 445);
		//Print(Wnd.Active);
		//for(int i = 0; i < 12; i++) {
		//	Task.Run(() => Perf.Cpu(500));
		//}
		100.ms();
		//Print(Wnd.Focused);
		Key("Back*20", 100);
		//Opt.Key.KeySpeed = 1000; Key("ab"); return;
#if true
		//Opt.Key.RestoreClipboard = false;
		//Opt.Key.KeySpeedClipboard = 100;
		Opt.Key.Hook = o => { if(o.w.ProgramName.Equals_("HD-Player.exe", true)) o.opt.KeySpeedClipboard = 100; };
		Paste("one ");
		Paste("two ");
		Paste("three ");
		//1000.ms();
		//var d = new Clipb.Data(); d.AddText("OLD").SetClipboard();
		//Key("Ctrl+A"); Print(CopyText());
#else
		var d = new Clipb.Data(); d.AddText("moo").SetClipboard();
		Key("Ctrl+V");
		//Key("Ctrl+", 260, "V");
		//Key("Ctrl+V*down", 700, "V*up");
#endif
		//Text("Text");
		Print("ok");
	}



	
#if TOOLS
	static void TestToolWnd()
	{
		Wnd w = default;

		w = Wnd.Find(null, "QM_Editor");
		//w = Wnd.Find(className: "Shell_TrayWnd");
		//w = Wnd.Find("Notepad");
		//w = Wnd.Find("Options");
		//w = Wnd.Find("Administrator:*");
		w.OrThrow();

		//w = w.Child(null, "Button").OrThrow();
		w = w.Child(null, "SysListView32").OrThrow();
		//w = w.Child(null, "ComboBox").OrThrow();
		////w = w.Child("***label Check").OrThrow();
		//w = w.Child("***label Text", "Edit").OrThrow();
		////w.Child(also: o => { Print(o.ClassName, o.NameLabel); return false; });
		////w.Child("***id 1001", also: o => { Print(o.ClassName, o.NameLabel); return false; });
		//Print(w); return;

		//var w = Wnd.Find("*Sandcastle*").OrThrow();
		//w = w.Child(null, "*.SysTree*").OrThrow();

		using(var f = new Au.Tools.Form_Wnd(w)) {
			f.ShowDialog();
			//Print("form closed");
		}
		//Print("form disposed");
	}

#endif



	static unsafe void TestWinHook()
	{
		////using Au.Util;
		//var stop = false;
		//using(WinHook.Keyboard(x =>
		//{
		//	Print(x);
		//	if(x.vkCode == KKey.Escape) { stop = true; return true; } //return true to cancel the event
		//	return false;
		//})) {
		//	MessageBox.Show("Low-level keyboard hook.", "Test");
		//	//or
		//	//WaitFor.MessagesAndCondition(-10, () => stop); //wait max 10 s for Esc key
		//	//Print("the end");
		//}

		////using Au.Util;
		//var stop = false;
		//using(WinHook.Mouse(x =>
		//{
		//	Print(x);
		//	if(x.Event == HookData.MouseEvent.RightButton) { stop = x.IsButtonUp; return true; } //return true to cancel the event
		//	return false;
		//})) {
		//	MessageBox.Show("Low-level mouse hook.", "Test");
		//	//or
		//	//WaitFor.MessagesAndCondition(-10, () => stop); //wait max 10 s for right-click
		//	//Print("the end");
		//}

		////using Au.Util;
		//using(WinHook.ThreadCbt(x =>
		//{
		//	Print(x.code);
		//	switch(x.code) {
		//	case HookData.CbtEvent.ACTIVATE:
		//		Print(x.ActivationInfo(out _, out _));
		//		break;
		//	case HookData.CbtEvent.CREATEWND:
		//		Print(x.CreationInfo(out var c, out _), c->x, c->lpszName);
		//		break;
		//	case HookData.CbtEvent.CLICKSKIPPED:
		//		Print(x.MouseInfo(out var m), m->pt, m->hwnd);
		//		break;
		//	case HookData.CbtEvent.KEYSKIPPED:
		//		Print(x.KeyInfo(out _));
		//		break;
		//	case HookData.CbtEvent.SETFOCUS:
		//		Print(x.FocusInfo(out Wnd wPrev), wPrev);
		//		break;
		//	case HookData.CbtEvent.MOVESIZE:
		//		Print(x.MoveSizeInfo(out var r), r->ToString());
		//		break;
		//	case HookData.CbtEvent.MINMAX:
		//		Print(x.MinMaxInfo(out var state), state);
		//		break;
		//	case HookData.CbtEvent.DESTROYWND:
		//		Print((Wnd)x.wParam);
		//		break;
		//	}
		//	return false;
		//})) {
		//	MessageBox.Show("CBT hook.", "Test", MessageBoxButtons.OKCancel);
		//	//new Form().ShowDialog(); //to test MINMAX
		//}

		//Timer_.After(1000, t => { Wnd.Misc.PostThreadMessage(Api.WM_APP); Api.PeekMessage(out var mk, default, 0, 0, Api.PM_NOREMOVE); Api.PeekMessage(out var m, default, 0, 0, Api.PM_REMOVE); });

		////using Au.Util;
		//using(WinHook.ThreadGetMessage(x =>
		//{
		//	Print(x.msg->ToString(), x.PM_NOREMOVE);
		//})) MessageBox.Show("hook");

		////using Au.Util;
		//using(WinHook.ThreadKeyboard(x =>
		//{
		//	Print(x.key, 0 != (x.lParam & 0x80000000) ? "up" : "", x.lParam, x.PM_NOREMOVE);
		//	return false;
		//})) MessageBox.Show("hook");

		////using Au.Util;
		//using(WinHook.ThreadMouse(x =>
		//{
		//	Print(x.message, x.m->pt, x.m->hwnd, x.PM_NOREMOVE);
		//	return false;
		//})) MessageBox.Show("hook");

		//Task.Run(() => { 1.s(); Wnd.Find(className: "#32770").Send(Api.WM_APP + 87); });

		////using Au.Util;
		//using(WinHook.ThreadCallWndProc(x =>
		//{
		//	ref var m = ref *x.msg;
		//	var mm = Message.Create(m.hwnd.Handle, (int)m.message, m.wParam, m.lParam);
		//	Print(mm, x.sentByOtherThread);
		//})) MessageBox.Show("hook");

		////using Au.Util;
		//using(WinHook.ThreadCallWndProcRet(x =>
		//{
		//	ref var m = ref *x.msg;
		//	var mm = Message.Create(m.hwnd.Handle, (int)m.message, m.wParam, m.lParam); mm.Result = m.lResult;
		//	Print(mm, x.sentByOtherThread);
		//})) MessageBox.Show("hook");

		//Print(WaitForKey2(-5, KKey.Left));

		//using(var x = new OnScreenRect()) {
		//	x.Rect = new RECT(100, 100, 200, 200, true);
		//	x.Color = Color.SlateBlue;
		//	x.Thickness = 4;
		//	x.Show(true);
		//	for(int i = 0; i < 6; i++) {
		//		300.ms();
		//		x.Visible = !x.Visible;
		//	}
		//}

		//var h = WinHook.ThreadCbt(x =>
		// {

		//	 return false;
		// });
		//MessageBox.Show("hook");

		//AuDialog.ShowEx("test", secondsTimeout: 5);

		//using(var b = new BlockUserInput(BIEvents.MouseClicks)) {
		//	//AuDialog.Show(buttons: "OK|Cancel");
		//	AuDialog.ShowTextInput(out var s, editType: DEdit.Multiline);
		//}
	}

	static void _TestGetAccFromHook()
	{
		try {
			//Api.ReplyMessage(0);
			Print(Acc.FromMouse());
		}
		catch(Exception e) { Print(e.Message); }
	}

	static void _TestAccHook()
	{
		//using Au.Util;
		bool stop = false;
		using(new AccHook(AccEVENT.SYSTEM_FOREGROUND, 0, x =>
		{
			Print(x.wnd);
			var a = x.GetAcc();
			Print(a);
			if(x.wnd.ClassNameIs("Shell_TrayWnd")) {
				stop = true;
				//throw new AuException("TEST");
				Thread.CurrentThread.Abort();
			}
		})) {
			//MessageBox.Show("hook");
			Application.Run(new Form());
			//or
			//WaitFor.MessagesAndCondition(-10, () => stop); //wait max 10 s for activated taskbar
			Print("hook thread ended");
		}

		//using(var b = new BlockUserInput(BIEvents.Keys)) {
		//	//AuDialog.Show(buttons: "OK|Cancel");
		//	AuDialog.ShowTextInput(out var s, editType: DEdit.Multiline);
		//}
	}

	static void TestAccHook()
	{
		var t = new Thread(() => _TestAccHook());
		t.Start();
		t.Join();
		Print("main thread ended");
	}

	class _TestHookFinalizer :IDisposable
	{
		public int x = 8;
		public override string ToString()
		{
			return "x=" + x;
		}

		public void Dispose()
		{
			GC.SuppressFinalize(this);
		}

		~_TestHookFinalizer() => Print("~_TestHookFinalizer");


	}
