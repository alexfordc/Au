<?xml version="1.0" encoding="utf-8" ?>
<Au.Snippets>

	<!-- C# language -->

	<snippet name="foriSnippet" info="Repeat count times. Set variable i = 0 and increment after each loop.">
		<![CDATA[for (int i = 0; i < $end$count$end$; i++) {
	
}]]>
	</snippet>

	<snippet name="forjSnippet" info="Repeat count times. Set variable j = 0 and increment after each loop.">
		<![CDATA[for (int j = 0; j < $end$count$end$; j++) {
	
}]]>
	</snippet>

	<snippet name="forrSnippet" info="Repeat count times. Set variable i = count - 1 and decrement after each loop.">
		<![CDATA[for (int i = $end$count$end$; --i >= 0; ) {
	
}]]>
	</snippet>

	<snippet name="foreverSnippet" info="Repeat forever (or until break etc).">
		<![CDATA[for (;;) {
	$end$
}]]>
	</snippet>

	<snippet name="switchIntSnippet" info="switch int.">
		<![CDATA[switch ($end$variable$end$) {
case 1:
	
	break;
case 2:
	
	break;
case 3:
	
	break;
default:
	
	break;
}]]>
	</snippet>

	<snippet name="switchStringSnippet" info="switch string.">
		<![CDATA[switch ($end$variable$end$) {
case "string1":
	
	break;
case "string2":
	
	break;
case "string3":
	
	break;
default:
	
	break;
}]]>
	</snippet>

	<snippet name="propAutoSnippet" info="Auto-implemented property.">
		<![CDATA[public int $end$MyProperty$end$ { get; set; }
]]>
	</snippet>

	<snippet name="propGetSetSnippet" info="Property with 'get' and 'set' functions and field.">
		<![CDATA[public string $end$MyProperty$end$ {
	get => _field;
//	get {
//		if (_field == null) {
//			//get value and set field (cache)
//			//_field = ;
//		}
//		return _field;
//	}
	set => _field = value;
//	set {
//		if (value != _field) {
//			_field = value;
//			//update object state
//		}
//	}
}
string _field;
]]>
	</snippet>

	<snippet name="methodSnippet" info="Public function.">
		<![CDATA[public void $end$MyFunction$end$() {
	
}
]]>
	</snippet>

	<snippet name="methodPrivateSnippet" info="Private or local function.">
		<![CDATA[void $end$_MyFunction$end$() {
	
}
]]>
	</snippet>

	<snippet name="tryCatchSnippet" info="Exception handling.">
		<![CDATA[try {
	$end$
}
catch(Exception e1) {  }]]>
	</snippet>

	<snippet name="tryFinallySnippet">
		<![CDATA[try {
	$end$
}
finally {  }]]>
	</snippet>

	<snippet name="ifDirectiveSnippet">
		<![CDATA[#if $end$true$end$
#endif]]>
	</snippet>

	<snippet name="ifElseDirectiveSnippet">
		<![CDATA[#if $end$true$end$
#else
#endif]]>
	</snippet>

	<snippet name="regionSnippet" info="Fold (hide) code using #region directive.">
		<![CDATA[#region $end$name$end$

#endregion]]>
	</snippet>


	<!-- comments -->

	<snippet name="foldSnippet" info="Fold (hide) code using //. and //; comments.">
		<![CDATA[//.
$end$
//;]]>
	</snippet>

	<snippet name="helpSnippet" info="XML documentation comments above class, function, etc.">
		<![CDATA[/// <summary>
/// $end$
/// </summary>$signature$]]>
	</snippet>


	<!-- functions -->

	<snippet name="outSnippet" info="Display text and variables in the output window.">
		<![CDATA[AOutput.Write($end$);]]>
	</snippet>

	<snippet name="printSnippet" info="Display text and variables in the output window.">
		<![CDATA[AOutput.Write($end$);]]>
	</snippet>

	<snippet name="dialogSnippet" info="Standard dialog window.">
		<list item="OK button">ADialog.Show("$end$");</list>
		<list item="OK button and info icon">ADialog.ShowInfo("$end$");</list>
		<list item="OK button and warning icon">ADialog.ShowWarning("$end$");</list>
		<list item="OK button and error icon">ADialog.ShowError("$end$");</list>
		<list item="OK and Cancel buttons">if (!ADialog.ShowOkCancel("$end$")) return;</list>
		<list item="Yes and No buttons">if (!ADialog.ShowYesNo("$end$")) return;</list>
		<list item="Custom buttons">int button = ADialog.Show("$end$", "", "1 OK|0 Cancel|2 Yes|3 No|4 Retry|5 Close|10 Button1|11 Button2", flags: DFlags.CommandLinks);</list>
		<list item="List of buttons">int button = ADialog.ShowList("$end$one|two|three$end$");</list>
		<list item="Text input">if (!ADialog.ShowInput(out string s, "$end$")) return;</list>
		<list item="Number input">if (!ADialog.ShowInputNumber(out int s, "$end$")) return;</list>
	</snippet>

	<snippet name="winFindSnippet" info="Find window. The + operator throws exception if not found.">
		<![CDATA[var w = +AWnd.Find("$end$");]]>
	</snippet>

	<snippet name="winWaitSnippet" info="Find window, wait. Throw exception on timeout, unless the wait time is negative.">
		<![CDATA[var w = AWnd.Wait(10, true, "$end$");]]>
	</snippet>

	<snippet name="keySnippet" info="Generate virtual keystrokes (keys, text).">
		<![CDATA[AKeys.Key("$end$");]]>
	</snippet>

	<snippet name="ktextSnippet" info="Send text to the active window using virtual keystrokes.">
		<![CDATA[AKeys.Text("$end$");]]>
	</snippet>

	<snippet name="pasteSnippet" info="Paste text using the clipboard and Ctrl+V.">
		<![CDATA[AClipboard.Paste("$end$");]]>
	</snippet>

	<snippet name="copySnippet" info="Get selected text using the clipboard and Ctrl+C.">
		<![CDATA[string s = AClipboard.Copy();]]>
	</snippet>

	<snippet name="runSnippet" info="Run a program or open a document, folder, web page.">
		<![CDATA[AExec.Run($end$AFolders.System + @"Notepad.exe"$end$);]]>
	</snippet>

	<snippet name="scriptSnippet" info="Start to execute a script. See also: RunWait.">
		<![CDATA[ATask.Run(@"$end$\Folder\Script$end$.cs");]]>
	</snippet>

	<snippet name="clickSnippet" info="Mouse left click.">
		<![CDATA[AMouse.Click($end$);]]>
	</snippet>

	<snippet name="rclickSnippet" info="Mouse right click.">
		<![CDATA[AMouse.RightClick($end$);]]>
	</snippet>

	<snippet name="dclickSnippet" info="Mouse double click.">
		<![CDATA[AMouse.DoubleClick($end$);]]>
	</snippet>

	<snippet name="mmoveSnippet" info="Mouse move.">
		<![CDATA[AMouse.Move($end$);]]>
	</snippet>

	<snippet name="failedSnippet" info="Throw 'failed' exception. Exception text is optional.">
		<![CDATA[throw new AuException($end$);]]>
	</snippet>

	<!--<snippet name="endSnippet" info="Exit this process. Note: usually there are better ways: return, throw exception, in some cases Application.Exit().">Environment.Exit(0);</snippet>-->

	<snippet name="trigAutotextSnippet" info="Add autotext trigger." using="Au.Triggers" before="var tt = Triggers.Autotext;">
		<![CDATA[tt["$end$"] = o => {  };]]>
	</snippet>

	<snippet name="trigReplaceSnippet" info="Add autotext simple replacement trigger." using="Au.Triggers" before="var tr = Triggers.Autotext.SimpleReplace;">
		<![CDATA[tr["$end$"] = "";]]>
	</snippet>

	<snippet name="trigHotKeySnippet" info="Add hotkey trigger." using="Au.Triggers" before="var hk = Triggers.Hotkey;">
		<![CDATA[hk["$end$"] = o => {  };]]>
	</snippet>

	<snippet name="trigWindowSnippet" info="Add window trigger." using="Au.Triggers">
		<![CDATA[Triggers.Window[$end$] = o => {  };]]>
	</snippet>

	<snippet name="taskRunSnippet" info="Run action in a thread pool thread." using="System.Threading.Tasks">
		<![CDATA[Task.Run(() => { $end$ });]]>
	</snippet>

	<snippet name="stringBuilderSnippet" info="Creates string with StringBuilder." using="System.Text">
		<![CDATA[var b = new StringBuilder();
b.Append($end$);
b.AppendLine();
b.AppendFormat("{0}, {1}", 10, 20);
var s = b.ToString();
AOutput.Write(s);]]>
	</snippet>

	<snippet name="actWinSnippet" info="Find window and activate. Throw exception if not found.">
		<![CDATA[var w = +AWnd.Find("$end$");
w.Activate();]]>
	</snippet>

	<snippet name="ifActWinIsSnippet" info="If the active window has the specified name, class, program, etc.">
		<![CDATA[var w = AWnd.Active;
if (w.IsMatch("$end$")) {
	
}]]>
	</snippet>

	<snippet name="ifKeySnippet" info="If key is pressed.">
		<list item="Ctrl">if (AKeys.IsCtrl) { $end$ }</list>
		<list item="Shift">if (AKeys.IsShift) { $end$ }</list>
		<list item="Alt">if (AKeys.IsAlt) { $end$ }</list>
		<list item="Win">if (AKeys.IsWin) { $end$ }</list>
		<list item="Ctrl, Shift, Alt or Win">if (AKeys.IsMod()) { $end$ }</list>
		<list item="Specified key">if (AKeys.IsPressed($end$)) {  }</list>
		<list item="Caps Lock toggled">if (AKeys.IsCapsLock) { $end$ }</list>
		<list item="Num Lock toggled">if (AKeys.IsNumLock) { $end$ }</list>
		<list item="Scroll Lock toggled">if (AKeys.IsScrollLock) { $end$ }</list>
	</snippet>

	<snippet name="speedSnippet" info="Change sleep times used by keyboard and mouse functions. Snippets with default values.">
		<![CDATA[AOpt.Key.KeySpeed = $end$1$end$;
AOpt.Key.TextSpeed = 0;
AOpt.Key.SleepFinally = 10;
AOpt.Key.KeySpeedClipboard = 5;
AOpt.Mouse.ClickSpeed = 20;
AOpt.Mouse.ClickSleepFinally = 10;
AOpt.Mouse.MoveSpeed = 0;
AOpt.Mouse.MoveSleepFinally = 10;]]>
	</snippet>

	<snippet name="perfStaticSnippet" info="Measure code speed.">
		<![CDATA[APerf.First();$end$
APerf.Next();
APerf.Write();]]>
	</snippet>

	<snippet name="perfLocalSnippet" info="Measure code speed in single function or { code block } and write result when it exits.">
		<![CDATA[using var p1 = APerf.Create();$end$
p1.Next();]]>
	</snippet>

	<snippet name="menuSnippet" info="Create popup menu.">
		<list item="Menu for automation scripts">
			<![CDATA[var m = new AMenu("$guid$");

m["$end$Item1$end$"] = o => {  };
m[""] = o => {  };
using(m.Submenu("")) {
	m[""] = o => {  };
	m[""] = o => {  };
}
m.Separator();
m["Run program example"] = o => AExec.Run(AFolders.System + @"notepad.exe");
m["Run script example"] = o => ATask.Run("Script123456789.cs");
m["Copy-paste example"] = o => {
	string s = AClipboard.Copy();
	s = s.Upper();
	AClipboard.Paste(s);
};
	
m.Show();]]>
		</list>
		<list item="Context menu for your program">
			<![CDATA[var m = new AMenu();
	
m["$end$Item1$end$"] = o => {  };
m[""] = o => {  };
using(m.Submenu("")) {
	m[""] = o => {  };
	m[""] = o => {  };
}
m.Separator();
m[""] = o => {  };
m[""] = o => {  };
	
m.Show(ownerFormOrControl);]]>
		</list>
	</snippet>

	<snippet name="menuItemSnippet" info="Add menu item." more="Tip: to add menu items you can drag and drop files and scripts.">
		<![CDATA[m["$end$"] = o => {  };]]>
	</snippet>

	<snippet name="menuSubmenuSnippet" info="Add submenu to a menu.">
		<![CDATA[using(m.Submenu("$end$")) {
	m[""] = o => {  };
	m[""] = o => {  };
}]]>
	</snippet>

	<snippet name="toolbarButtonSnippet" info="Add toolbar button." more="Tip: to add buttons you can drag and drop files and scripts.">
		<![CDATA[t["$end$"] = o => {  };]]>
	</snippet>

	<snippet name="toolbarMenuButtonSnippet" info="Add drop-down menu to a toolbar.">
		<![CDATA[t.MenuButton("$end$", m => {
	m[""] = o => {  };
	m[""] = o => {  };
});]]>
	</snippet>

	<snippet name="toolbarSnippet" info="Create toolbar.">
		<list item="Common toolbar">
			<![CDATA[void _Toolbar_$end$RenameMe$end$() {
	var t = new AToolbar("$guid$");
	if(!t.SettingsModified) {
		t.AutoSize = true;
	}
	
	t["Button1"] = o => {  };
	t[""] = o => {  };
	t.MenuButton("Menu1", m => {
		m[""] = o => {  };
		m[""] = o => {  };
	});
	t.Separator();
	t[""] = o => {  };
	t[""] = o => {  };
	
	bool autoHide = false;
	if(autoHide) {
		var t2 = new AToolbar(t.Name + "^") { Satellite = t };
		t2.Show();
	} else {
		t.Show();
	}
}]]>
		</list>
		<list item="Window toolbar">
			<![CDATA[void _Toolbar_$end$RenameMe$end$(AWnd w) {
	var t = new AToolbar("$guid$");
	if(!t.SettingsModified) {
		t.AutoSize = true;
	}
	
	t["Button1"] = o => {  };
	t[""] = o => {  };
	t.MenuButton("Menu1", m => {
		m[""] = o => {  };
		m[""] = o => {  };
	});
	t.Separator();
	t[""] = o => {  };
	t[""] = o => {  };
	
	bool autoHide = false;
	if(autoHide) {
		var t2 = new AToolbar(t.Name + "^") { Satellite = t };
		t2.Show(w);
	} else {
		t.Show(w);
	}
}
//Trigger example:
//Triggers.Window[TWEvent.ActiveOnce, "*Name", "ClassName"] = o => _Toolbar_RenameMe(o.Window);]]>
		</list>
	</snippet>

</Au.Snippets>