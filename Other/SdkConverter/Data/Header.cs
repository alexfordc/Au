//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Sdk
{
    public enum UUUU
    {
        Moo = 1,
        Doo = 2,
        Goo = -2147483648
    }

    public enum EInt
    {
        Zero = 0,
        One = 1
    }

    public class PRECT { }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
    public unsafe delegate int WNDPROC(int x);

    public unsafe struct POINT
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public int x;

            [FieldOffset(4)]
            public int y;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sdk", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0POINT@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        private POINT.Internal __instance;
        public POINT.Internal __Instance { get { return __instance; } }

        public static POINT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new POINT(native.ToPointer(), skipVTables);
        }

        public static POINT __CreateInstance(POINT.Internal native, bool skipVTables = false)
        {
            return new POINT(native, skipVTables);
        }

        private POINT(POINT.Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private POINT(void* native, bool skipVTables = false) : this()
        {
            __instance = *(Internal*) native;
        }

        public POINT(POINT _0)
            : this()
        {
            var __arg0 = _0.__Instance;
            var arg0 = new global::System.IntPtr(&__arg0);
            fixed (Internal* __instancePtr = &__instance)
            {
                Internal.cctor_1(new global::System.IntPtr(__instancePtr), arg0);
            }
        }

        public int x
        {
            get
            {
                return __instance.x;
            }

            set
            {
                __instance.x = value;
            }
        }

        public int y
        {
            get
            {
                return __instance.y;
            }

            set
            {
                __instance.y = value;
            }
        }
    }

    public unsafe class tagRECT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public int left;

            [FieldOffset(4)]
            public int top;

            [FieldOffset(8)]
            public int right;

            [FieldOffset(12)]
            public int bottom;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sdk", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagRECT@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, tagRECT> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, tagRECT>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static tagRECT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new tagRECT(native.ToPointer(), skipVTables);
        }

        public static tagRECT __CreateInstance(tagRECT.Internal native, bool skipVTables = false)
        {
            return new tagRECT(native, skipVTables);
        }

        private static void* __CopyValue(tagRECT.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            *(tagRECT.Internal*) ret = native;
            return ret.ToPointer();
        }

        private tagRECT(tagRECT.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected tagRECT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public tagRECT()
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public tagRECT(tagRECT _0)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((tagRECT.Internal*) __Instance) = *((tagRECT.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            tagRECT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public int left
        {
            get
            {
                return ((Internal*) __Instance)->left;
            }

            set
            {
                ((Internal*) __Instance)->left = value;
            }
        }

        public int top
        {
            get
            {
                return ((Internal*) __Instance)->top;
            }

            set
            {
                ((Internal*) __Instance)->top = value;
            }
        }

        public int right
        {
            get
            {
                return ((Internal*) __Instance)->right;
            }

            set
            {
                ((Internal*) __Instance)->right = value;
            }
        }

        public int bottom
        {
            get
            {
                return ((Internal*) __Instance)->bottom;
            }

            set
            {
                ((Internal*) __Instance)->bottom = value;
            }
        }
    }

    public unsafe abstract class IUnknown : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sdk", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0IUnknown@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sdk", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0IUnknown@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, IUnknown> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, IUnknown>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static IUnknown __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new IUnknownInternal(native.ToPointer(), skipVTables);
        }

        public static IUnknown __CreateInstance(IUnknown.Internal native, bool skipVTables = false)
        {
            return new IUnknownInternal(native, skipVTables);
        }

        protected IUnknown(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        protected IUnknown()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "Sdk.IUnknown");
        }

        protected IUnknown(IUnknown _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "Sdk.IUnknown");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            IUnknown __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public abstract int QueryInterface(ref int riid, void** ppvObject);

        public abstract int AddRef();

        public abstract int Release();

        #region Virtual table interop

        // int __stdcall QueryInterface( const int & riid, //__declspec("SAL_name" "(" "\"_COM_Outptr_\"" "," "\"\"" "," "\"2\"" ")") __declspec("SAL_begin") __declspec("SAL_name" "(" "\"_Outptr_\"" "," "\"\"" "," "\"2\"" ")") __declspec("SAL_begin") __declspec("SAL_pre") __declspec("SAL_notref") __declspec("SAL_null" "(" "__no" ")") __declspec("SAL_pre") __declspec("SAL_notref") __declspec("SAL_writableTo" "(" "elementCount(1)" ")") __declspec("SAL_post") __declspec("SAL_valid") __declspec("SAL_post") __declspec("SAL_notref") __declspec("SAL_deref") __declspec("SAL_notref") __declspec("SAL_null" "(" "__no" ")") __declspec("SAL_post") __declspec("SAL_notref") __declspec("SAL_deref") __declspec("SAL_readableTo" "(" "elementCount(1)" ")") __declspec("SAL_end") __declspec("SAL_context" "(" "SAL_failed" ")") __declspec("SAL_begin") __declspec("SAL_post") __declspec("SAL_begin") __declspec("SAL_name" "(" "\"_Deref_post_null_\"" "," "\"\"" "," "\"1.1\"" ")") __declspec("SAL_begin") __declspec("SAL_post") __declspec("SAL_notref") __declspec("SAL_deref") __declspec("SAL_notref") __declspec("SAL_null" "(" "__yes" ")") __declspec("SAL_end") __declspec("SAL_end") __declspec("SAL_end") __declspec("SAL_end") void * *ppvObject) = 0
        private static Delegates.Func_int_IntPtr_intPtr_voidPtrPtr _QueryInterface_0DelegateInstance;

        private static int _QueryInterface_0DelegateHook(global::System.IntPtr instance, int* riid, void** ppvObject)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (IUnknown) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.QueryInterface(ref *riid, ppvObject);
            return __ret;
        }

        // int __stdcall AddRef(void) = 0
        private static Delegates.Func_int_IntPtr _AddRef_0DelegateInstance;

        private static int _AddRef_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (IUnknown) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.AddRef();
            return __ret;
        }

        // int __stdcall Release(void) = 0
        private static Delegates.Func_int_IntPtr _Release_0DelegateInstance;

        private static int _Release_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (IUnknown) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Release();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (destructorOnly)
                return;
            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _QueryInterface_0DelegateInstance += _QueryInterface_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_QueryInterface_0DelegateInstance).ToPointer();
                _AddRef_0DelegateInstance += _AddRef_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_AddRef_0DelegateInstance).ToPointer();
                _Release_0DelegateInstance += _Release_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_Release_0DelegateInstance).ToPointer();
            }

            if (__ManagedVTables == null)
            {
                __ManagedVTables = new void*[1];
                var vfptr0 = Marshal.AllocHGlobal(3 * 4);
                __ManagedVTables[0] = vfptr0.ToPointer();
                *(void**)(vfptr0 + 0) = _Thunks[0];
                *(void**)(vfptr0 + 4) = _Thunks[1];
                *(void**)(vfptr0 + 8) = _Thunks[2];
            }

            native->vfptr0 = new IntPtr(__ManagedVTables[0]);
        }

        #endregion
    }

    internal unsafe class IUnknownInternal : IUnknown, IDisposable
    {
        private static void* __CopyValue(IUnknown.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(IUnknown.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IUnknownInternal(IUnknown.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal IUnknownInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        public override int QueryInterface(ref int riid, void** ppvObject)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            var ___QueryInterface_0Delegate = (Delegates.Func_int_IntPtr_intPtr_voidPtrPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_int_IntPtr_intPtr_voidPtrPtr));
            fixed (int* __refParamPtr0 = &riid)
            {
                var arg0 = __refParamPtr0;
                var arg1 = ppvObject;
                var __ret = ___QueryInterface_0Delegate((__Instance + __PointerAdjustment), arg0, arg1);
                return __ret;
            }
        }

        public override int AddRef()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            var ___AddRef_0Delegate = (Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_int_IntPtr));
            var __ret = ___AddRef_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override int Release()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___Release_0Delegate = (Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_int_IntPtr));
            var __ret = ___Release_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }
    }

    public unsafe partial class Header
    {
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sdk", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.StdCall,
                EntryPoint="_FuncA@8")]
            internal static extern int FuncA_0(int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sdk", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="FuncB")]
            internal static extern int FuncB_0(int x, int y);
        }

        public static int FuncA(int x, int y)
        {
            var __ret = Internal.FuncA_0(x, y);
            return __ret;
        }

        public static int FuncB(int x, int y)
        {
            var __ret = Internal.FuncB_0(x, y);
            return __ret;
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
        public unsafe delegate int Func_int_IntPtr_intPtr_voidPtrPtr(global::System.IntPtr instance, int* arg1, void** arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
        public unsafe delegate int Func_int_IntPtr(global::System.IntPtr instance);
    }
}
