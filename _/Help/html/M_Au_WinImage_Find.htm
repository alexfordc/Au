<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>WinImage.Find Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Find method" /><meta name="System.Keywords" content="WinImage.Find method" /><meta name="Microsoft.Help.F1" content="Au.WinImage.Find" /><meta name="Microsoft.Help.Id" content="M:Au.WinImage.Find(Au.Types.WIArea,System.Object,Au.Types.WIFlags,System.Int32,System.Func{Au.WinImage,System.Boolean})" /><meta name="Description" content="Finds image(s) or color(s) displayed in window or other area. Returns object containing the rectangle of the found image. Returns null if not found. To throw exception you can use operator +: var r = +WinImage.Find(...);" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Au" /><meta name="file" content="M_Au_WinImage_Find" /><meta name="guid" content="M_Au_WinImage_Find" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Au Class Library<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="3d4fd35d-4b48-4167-b34f-44e9afc13fc3.htm" title="Au Class Library" tocid="roottoc">Au Class Library</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Au.htm" title="Au" tocid="N_Au">Au</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Au_WinImage.htm" title="WinImage Class" tocid="T_Au_WinImage">WinImage Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Au_WinImage.htm" title="WinImage Methods" tocid="Methods_T_Au_WinImage">WinImage Methods</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Au_WinImage_BitmapFromHbitmap.htm" title="BitmapFromHbitmap Method " tocid="M_Au_WinImage_BitmapFromHbitmap">BitmapFromHbitmap Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Au_WinImage_Capture.htm" title="Capture Method " tocid="Overload_Au_WinImage_Capture">Capture Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="M_Au_WinImage_Find.htm" title="Find Method " tocid="M_Au_WinImage_Find">Find Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Au_WinImage_LoadImage.htm" title="LoadImage Method " tocid="M_Au_WinImage_LoadImage">LoadImage Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Au_WinImage_Wait.htm" title="Wait Method " tocid="M_Au_WinImage_Wait">Wait Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Au_WinImage_WaitChanged.htm" title="WaitChanged Method " tocid="M_Au_WinImage_WaitChanged">WaitChanged Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Au_WinImage_WaitNot.htm" title="WaitNot Method " tocid="M_Au_WinImage_WaitNot">WaitNot Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>WinImage<span id="LST31FBD851_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST31FBD851_0?cpp=::|nu=.");</script>Find Method </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Finds image(s) or color(s) displayed in window or other area.<br />
            Returns <a href="T_Au_WinImage.htm">WinImage</a>
 object containing the rectangle of the found image.<br />
            Returns null if not found. To throw exception you can use operator +: <span class="code">var r = +WinImage.Find(...);</span></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Au.htm">Au</a><br />
    <strong>Assembly:</strong>
   Au (in Au.dll) Version: 1.0.0.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">WinImage</span> <span class="identifier">Find</span>(
	<span class="identifier">WIArea</span> <span class="parameter">area</span>,
	<span class="identifier">Object</span> <span class="parameter">image</span>,
	<span class="identifier">WIFlags</span> <span class="parameter">flags</span> = ,
	<span class="identifier">int</span> <span class="parameter">colorDiff</span> = 0,
	<span class="identifier">Func</span>&lt;<span class="identifier">WinImage</span>, <span class="identifier">bool</span>&gt; <span class="parameter">also</span> = <span class="keyword">null</span>
)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">area</span></dt><dd>Type: <a href="T_Au_Types_WIArea.htm">Au.Types<span id="LST31FBD851_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST31FBD851_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>WIArea</a><br />
            Where to search. Can be a window/control, accessible object, another image or a rectangle in screen.
            <ul><li><a href="T_Au_Wnd.htm">Wnd</a> - window or control. The search area is its client area.</li><li><a href="T_Au_Acc.htm">Acc</a> - accessible object.</li><li><a href="http://msdn2.microsoft.com/en-us/library/4e7y164x" target="_blank">Bitmap</a> - another image. These flags are invalid: <a href="T_Au_Types_WIFlags.htm">WindowDC</a>.</li><li><a href="T_Au_Types_RECT.htm">RECT</a> - a rectangle area in screen. These flags are invalid: <a href="T_Au_Types_WIFlags.htm">WindowDC</a>.</li><li><a href="T_Au_Types_WIArea.htm">WIArea</a> - can contain Wnd, Acc or Bitmap. Also allows to specify a rectangle in it, which makes the search area smaller and the function faster. Example: <span class="code">WinImage.Find(new WIArea(w, 100, 100, 100, 100), "image.png");</span>.</li></ul></dd><dt><span class="parameter">image</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="LST31FBD851_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST31FBD851_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />
            Image or color to find. Can be:<br />
            string - path of .png or .bmp file. If not full path, uses <a href="P_Au_Folders_ThisAppImages.htm">ThisAppImages</a>
. Also can use resources and embedded images; read in Remarks.<br />
            Bitmap - image object in memory.<br />
            int, ColorInt or Color - color. Int must be in 0xRRGGBB format. Alpha is not used.<br />
            IEnumerable of string, Bitmap, int/ColorInt/Color or object - multiple images or colors. Default action - find any. If flag <a href="T_Au_Types_WIFlags.htm">AllMustExist</a> - must find all.
            </dd><dt><span class="parameter">flags</span> (Optional)</dt><dd>Type: <a href="T_Au_Types_WIFlags.htm">Au.Types<span id="LST31FBD851_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST31FBD851_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>WIFlags</a><br /></dd><dt><span class="parameter">colorDiff</span> (Optional)</dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/td2s409d" target="_blank">System<span id="LST31FBD851_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST31FBD851_4?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Int32</a><br />Maximal allowed color difference. Use to to find images that have slightly different colors than the specified image. Can be 0 - 250, but should be as small as possible. Applied to each color component (red, green, blue) of each pixel.</dd><dt><span class="parameter">also</span> (Optional)</dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/bb549151" target="_blank">System<span id="LST31FBD851_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST31FBD851_5?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Func</a><span id="LST31FBD851_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST31FBD851_6?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><a href="T_Au_WinImage.htm">WinImage</a>, <a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">Boolean</a><span id="LST31FBD851_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST31FBD851_7?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><br />
            A callback function to call for each found image until it returns true.<br />
            Can be used to create actions like "skip n matching images" (like <span class="code">also: t =&gt; t.MatchIndex == 1</span>), "click all matching images" (<span class="code">also: t =&gt; { t.MouseClick(); 0.5.s(); return false; }</span>), "get rectangles of all matching images" (<span class="code">also: t =&gt; { rectList.Add(t.Rect); return false; }</span>
), "ignore images that are or aren't in some custom areas", etc.<br />
            When the callback function returns true, Find() returns result "found". Else Find() tries to find more matching images (towards the right and bottom) and calls the callback function again when found. If the callback function always returns false, Find() returns result "not found".</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="T_Au_WinImage.htm">WinImage</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="tableSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="T_Au_Types_WndException.htm">WndException</a></td><td>Invalid window handle (the area argument).</td></tr><tr><td><a href="http://msdn2.microsoft.com/en-us/library/3w1b3114" target="_blank">ArgumentException</a></td><td>An argument is of unsupported type or is/contains a null/invalid value.</td></tr><tr><td><a href="http://msdn2.microsoft.com/en-us/library/dzyy5k3x" target="_blank">FileNotFoundException</a></td><td>The specified file does not exist.</td></tr><tr><td><a href="http://msdn2.microsoft.com/en-us/library/c18k6c59" target="_blank">Exception</a></td><td>Depending on <span class="parameter">image</span> string format, exceptions of <a href="http://msdn2.microsoft.com/en-us/library/stf701f5" target="_blank">FromFile(String)</a>, <a href="http://msdn2.microsoft.com/en-us/library/z7ha67kw" target="_blank">Bitmap(Stream)</a>, <a href="M_Au_Convert__Decompress.htm">Decompress(<span id="LST31FBD851_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST31FBD851_8?cpp=array&lt;");</script>Byte<span id="LST31FBD851_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST31FBD851_9?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, Int32, Int32)</a>.</td></tr><tr><td><a href="T_Au_Types_AuException.htm">AuException</a></td><td>Something failed.</td></tr></table></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID3RBSection" class="collapsibleSection">
            If <span class="parameter">image</span> is file path, and the file does not exist, looks in resources of apdomain's entry assembly. For example, looks for Project.Properties.Resources.X if file @"C:\X.png" not found. Alternatively you can use code like <span class="code">using(var b = Project.Properties.Resources.X) WinImage.Find(w, b);</span>
.<br /><br /><span class="parameter">image</span>
 can be string containing Base-64 encoded .png image file data with prefix "image:" or compressed .bmp file data with prefix "~:". Created by Au.Controls.ImageUtil.ImageToString.<br /><br />
            Some pixels in image can be transparent or partially transparent (AA of 0xAARRGGBB is not 255). These pixels are not compared.<br /><br />
            The speed mostly depends on:<br />
            1. The size of the search area. Use the smallest possible area (control or accessible object or rectangle in window like <span class="code">new WIArea(w, rectangle)</span>
).<br />
            2. Flag <a href="T_Au_Types_WIFlags.htm">WindowDC</a>
. Usually makes several times faster. With this flag the speed depends on window.<br />
            3. Video driver. Can be eg 10 times slower if incorrect or generic driver is used, for example on a virtual PC. Flag <a href="T_Au_Types_WIFlags.htm">WindowDC</a>
 should help.<br />
            4. <span class="parameter">colorDiff</span>
. Should be as small as possible.<br /><br />
            If flag <a href="T_Au_Types_WIFlags.htm">WindowDC</a>
 is not used, the search area must be visible on the screen. If it is covered by other windows, the function will search in these windows.<br /><br />
            The function can only find images that exactly match the specified image. With <span class="parameter">colorDiff</span>
 it can find images with slightly different colors and brightness. It cannot find images with different shapes.<br /><br />
            This function is not the best way to find objects when the script is intended for long use or for use on multiple computers or must be very reliable. Because it may fail to find the image after are changed some settings - system theme, application theme, text size (DPI), font smoothing (if the image contains text), etc. Also are possible various unexpected temporary conditions that may distort or hide the image, for example adjacent window shadow, a tooltip or some temporary window. If possible, in such scripts instead use other functions, eg find control or accessible object.<br /><br />
            Throws ArgumentException if image or area is a bottom-up Bitmap object (see <a href="http://msdn2.microsoft.com/en-us/library/zs4e8hdy" target="_blank">Stride</a>). Such bitmaps are unusual in .NET (GDI+), but can be created by Image.FromHbitmap; instead use <a href="M_Au_WinImage_BitmapFromHbitmap.htm">BitmapFromHbitmap(IntPtr)</a>.
            </div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID4RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Au_WinImage.htm">WinImage Class</a></div><div class="seeAlsoStyle"><a href="N_Au.htm">Au Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"> </div></body></html>