<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>NoClass.Key Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Key method" /><meta name="System.Keywords" content="NoClass.Key method" /><meta name="Microsoft.Help.F1" content="Au.NoClass.Key" /><meta name="Microsoft.Help.Id" content="M:Au.NoClass.Key(System.Object[])" /><meta name="Description" content="Sends virtual keystrokes to the active window. Also can send text, wait, etc. Calls Keyb.Key." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Au" /><meta name="file" content="M_Au_NoClass_Key" /><meta name="guid" content="M_Au_NoClass_Key" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Au Class Library<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html\3d4fd35d-4b48-4167-b34f-44e9afc13fc3.htm" title="Au Class Library" tocid="roottoc">Au Class Library</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Au.htm" title="Au" tocid="N_Au">Au</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Au_NoClass.htm" title="NoClass Class" tocid="T_Au_NoClass">NoClass Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Au_NoClass.htm" title="NoClass Methods" tocid="Methods_T_Au_NoClass">NoClass Methods</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Au_NoClass_CopyText.htm" title="CopyText Method " tocid="M_Au_NoClass_CopyText">CopyText Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Au_NoClass_Empty.htm" title="Empty Method " tocid="Overload_Au_NoClass_Empty">Empty Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Au_NoClass_Key.htm" title="Key Method " tocid="M_Au_NoClass_Key">Key Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Au_NoClass_Paste.htm" title="Paste Method " tocid="M_Au_NoClass_Paste">Paste Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Au_NoClass_Print.htm" title="Print Method " tocid="Overload_Au_NoClass_Print">Print Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Au_NoClass_PrintListEx__1.htm" title="PrintListEx(T) Method " tocid="M_Au_NoClass_PrintListEx__1">PrintListEx(T) Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Au_NoClass_PrintWarning.htm" title="PrintWarning Method " tocid="M_Au_NoClass_PrintWarning">PrintWarning Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Au_NoClass_Text.htm" title="Text Method " tocid="M_Au_NoClass_Text">Text Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>NoClass<span id="LSTD62C4D2D_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD62C4D2D_0?cpp=::|nu=.");</script>Key Method </h1></td></tr></table><span class="introStyle"></span> <div class="summary">            Sends virtual keystrokes to the active window. Also can send text, wait, etc.<br />            Calls <a href="M_Au_Keyb_Key.htm">Keyb.Key</a>.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Au.htm">Au</a><br />
    <strong>Assembly:</strong>
   Au (in Au.dll) Version: 1.0.0.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="identifier">Key</span>(
	<span class="keyword">params</span> <span class="identifier">Object</span>[] <span class="parameter">keysEtc</span>
)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">keysEtc</span></dt><dd>Type: <span id="LSTD62C4D2D_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD62C4D2D_1?cpp=array&lt;");</script><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="LSTD62C4D2D_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD62C4D2D_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><span id="LSTD62C4D2D_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD62C4D2D_3?cpp=&gt;|vb=()|nu=[]");</script><br />
            Any number of arguments of these types:
            <ul><li><strong>string</strong> - one or more key names separated by spaces or operators. More info in Remarks.<br />            Example: <span class="code">Key("Enter A Ctrl+A");</span><br />            See <a href="M_Au_Keyb_AddKeys.htm">Keyb.AddKeys</a>.
            </li><li><strong>string after 'keys' string</strong> - literal text. When there are several strings in sequence, they are interpreted as keys, text, keys, text...<br />            Example: <span class="code">Key("keys", "text", "keys", "text", 500, "keys", "text", "keys", KKey.Back, "keys", "text");</span><br />            Function <a href="M_Au_Keyb_Text.htm">Keyb.Text</a> is the same as <b>Key</b>, but the first parameter is text.<br />            To send text can be used keys or clipboard, depending on <a href="P_Au_Opt_Key.htm">Opt.Key</a> and text.<br />            See <a href="M_Au_Keyb_AddText.htm">Keyb.AddText</a>.
            </li><li><strong><a href="T_Au_Types_KKey.htm">KKey</a></strong> - a single key.<br />            Example: <span class="code">Key("Shift+", KKey.Left, "*3");</span> is the same as <span class="code">Key("Shift+Left*3");</span>.<br />            See <a href="M_Au_Keyb_AddKey_1.htm">Keyb.AddKey</a>.
            </li><li><strong>int</strong> - milliseconds to sleep. Max 10000.<br />            Example: <span class="code">Key("Left", 500, "Right");</span><br />            See <a href="M_Au_Keyb_AddSleep.htm">Keyb.AddSleep</a>.
            </li><li><strong><a href="http://msdn2.microsoft.com/en-us/library/bb534741" target="_blank">System.Action</a></strong> - callback function.<br />            Example: <span class="code">Action click = () =&gt; Mouse.Click(); Key("Shift+", click);</span><br />            See <a href="M_Au_Keyb_AddCallback.htm">Keyb.AddCallback</a>.
            </li><li><strong>null or ""</strong> - nothing.<br />            Example: <span class="code">Key("keys", 500, "", "text");</span></li><li><strong>(int, bool)</strong> - a single key, specified using scan code and extended-key flag.<br />            Example: <span class="code">Key("", "key F1:", (0x3B, false));</span><br />            See <a href="M_Au_Keyb_AddKey.htm">Keyb.AddKey</a>.
            </li><li><strong>(KKey, int, bool)</strong> - a single key, specified using <a href="T_Au_Types_KKey.htm">KKey</a> and/or scan code and extended-key flag.<br />            Example: <span class="code">Key("", "numpad Enter:", (KKey.Enter, 0, true));</span><br />            See <a href="M_Au_Keyb_AddKey.htm">Keyb.AddKey</a>.
            </li></ul></dd></dl></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="tableSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="http://msdn2.microsoft.com/en-us/library/3w1b3114" target="_blank">ArgumentException</a></td><td>An argument is of an unsupported type or has an invalid value, for example an unknown key name.</td></tr></table></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID3RBSection" class="collapsibleSection">
            Generates virtual keystrokes. Uses API <a href="https://www.google.com/search?q=site:docs.microsoft.com+SendInput" target="_blank">SendInput</a>. It works almost like real keyboard.<br /><br />            Usually keys are specified in string, like in this example:<div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EA0KB0BBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EA0KB0BBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EA0KB0BBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">Key(<span class="highlight-literal">"A F2 Ctrl+Shift+A Enter*2"</span>); <span class="highlight-comment">//keys A, F2, Ctrl+Shift+A, Enter Enter</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EA0KB0BBA");</script><br />            Key names:<div class="tableSection"><table><tr><th>Group</th><th>Keys</th><th>Info</th></tr><tr><td>Named keys</td><td><b>Modifier:</b> Alt, Ctrl, Shift, Win<br /><b>Right side:</b> RAlt, RCtrl, RShift, RWin<br /><b>Lock:</b> CapsLock, NumLock, ScrollLock<br /><b>Function:</b> F1-F24<br /><b>Arrow:</b> Down, Left, Right, Up<br /><b>Other:</b> Back, Del, End, Enter, Esc, Home, Ins, Menu, PgDown, PgUp, PrtSc, Space, Tab
            </td><td>Start with an uppercase character. Only the first 3 characters are significant; others can be any ASCII letters. For example, can be <span class="code">"Back"</span>, <span class="code">"Bac"</span>, <span class="code">"Backspace"</span> or <span class="code">"BACK"</span>, but not <span class="code">"back"</span> or <span class="code">"Ba"</span> or <span class="code">"Back5"</span>.<br /><br />            Alternative key names: AltGr (RAlt), App (Menu), PageDown or PD (PgDn), PageUp or PU (PgUp), PrintScreen or PS (PrtSc), BS (Back), PB (Pause/Break), CL (CapsLock), NL (NumLock), SL (ScrollLock), HM (Home).</td></tr><tr><td>Text keys</td><td><b>Alphabetic:</b> A-Z (or a-z)<br /><b>Number:</b> 0-9<br /><b>Numeric keypad:</b> #/ #* #- #+ #. #0-#9<br /><b>Other:</b> =, ` - [ ] \ ; ' , . /
            </td><td>Spaces between keys are optional, except for uppercase A-Z. For example, can be <span class="code">"A B"</span>, <span class="code">"a b"</span>, <span class="code">"A b"</span> or <span class="code">"ab"</span>, but not <span class="code">"AB"</span> or <span class="code">"Ab"</span>.<br /><br />            For ` - [ ] \ ; ' , . / also can be used ~ _ { } | : " &lt; &gt; ?.</td></tr><tr><td>Other keys</td><td>Names of enum <a href="T_Au_Types_KKey.htm">KKey</a> members.</td><td>Start with an uppercase character.<br />            Example: <span class="code">Key("BrowserBack"); //KKey.BrowserBack</span></td></tr><tr><td>Other keys</td><td>Virtual-key codes.</td><td>Start with VK or Vk.<br />            Example: <span class="code">Key("VK65 VK0x42");</span></td></tr><tr><td>Forbidden</td><td>Fn, Ctrl+Alt+Del, Win+L, some other</td><td>Programs cannot press these keys.</td></tr><tr><td>Special characters</td><td><b>Operator:</b> + * ( ) $<br /><b>Numpad key prefix:</b> #<br /><b>Reserved:</b> ! @ % ^ &amp;
            </td><td>These characters cannot be used as keys. Use = 8 9 0 4 3 1 2 5 6 7.</td></tr></table></div><br />            Operators:<div class="tableSection"><table><tr><th>Operator</th><th>Examples</th><th>Description</th></tr><tr><td>+</td><td><span class="code">"Ctrl+Shift+A"</span><br /><span class="code">"Alt+E+P"</span></td><td>The same as <span class="code">"Ctrl*down Shift*down A Shift*up Ctrl*up"</span> and <span class="code">"Alt*down E*down P E*up Alt*up"</span>.</td></tr><tr><td>+()</td><td><span class="code">"Alt+(E P)"</span></td><td>The same as <span class="code">"Alt*down E P Alt*up"</span>.<br />            Inside () cannot be used + and +().</td></tr><tr><td>*down</td><td><span class="code">"Ctrl*down"</span></td><td>Press key and don't release.</td></tr><tr><td>*up</td><td><span class="code">"Ctrl*up"</span></td><td>Release key.</td></tr><tr><td>*number</td><td><span class="code">"Left*3"</span></td><td>Press key repeatedly, like <span class="code">"Left Left Left"</span>.<br />            See <a href="M_Au_Keyb_AddRepeat.htm">Keyb.AddRepeat</a>.
            </td></tr><tr><td>$</td><td><span class="code">"$text"</span></td><td>$ is the same as Shift+.</td></tr></table></div>
            Operators and related keys can be in separate arguments. Examples: <span class="code">Key("Shift+", KKey.A); Key(KKey.A, "*3");</span>.<br /><br />            Uses <a href="P_Au_Opt_Key.htm">Opt.Key</a>:
            <div class="tableSection"><table><tr><th>Option</th><th>Default</th><th>Changed</th></tr><tr><td><a href="P_Au_Types_OptKey_NoBlockInput.htm">NoBlockInput</a></td><td>false.<br />            Blocks user-pressed keys. Sends them afterwards.<br />            If the last argument is 'sleep', stops blocking before executing it; else stops blocking after executing all arguments.</td><td>true.<br />            Does not block user-pressed keys. It can be dangerous.</td></tr><tr><td><a href="P_Au_Types_OptKey_NoCapsOff.htm">NoCapsOff</a></td><td>false.<br />            If the CapsLock key is toggled, untoggles it temporarily (presses it before and after).</td><td>true.<br />            Does not touch the CapsLock key.<br />            Alphabetic keys of 'keys' arguments can depend on CapsLock. Text of 'text' arguments doesn't depend on CapsLock, unless <a href="P_Au_Types_OptKey_TextOption.htm">TextOption</a> is <a href="T_Au_Types_KTextOption.htm">KTextOption.Keys</a>.</td></tr><tr><td><a href="P_Au_Types_OptKey_NoModOff.htm">NoModOff</a></td><td>false.<br />            Releases modifier keys (Alt, Ctrl, Shift, Win). Does it only at the start; later they cannot interfere, unless <a href="P_Au_Types_OptKey_NoBlockInput.htm">NoBlockInput</a> is true.</td><td>true.<br />            Does not touch modifier keys. It can be dangerous.</td></tr><tr><td><a href="P_Au_Types_OptKey_TextSpeed.htm">TextSpeed</a></td><td>0 ms.</td><td>0 - 1000.<br />            Changes the speed for 'text' arguments (makes slower).</td></tr><tr><td><a href="P_Au_Types_OptKey_KeySpeed.htm">KeySpeed</a></td><td>1 ms.</td><td>0 - 1000.<br />            Changes the speed for 'keys' arguments (makes slower if &gt;1).</td></tr><tr><td><a href="P_Au_Types_OptKey_KeySpeedClipboard.htm">KeySpeedClipboard</a></td><td>5 ms.</td><td>0 - 1000.<br />            Changes the speed of Ctrl+V keys when text is pasted using the clipboard.</td></tr><tr><td><a href="P_Au_Types_OptKey_SleepFinally.htm">SleepFinally</a></td><td>10 ms.</td><td>0 - 10000.<br />            Tip: to sleep finally, also can be used code like this: <span class="code">Key("keys", 1000);</span>.</td></tr><tr><td><a href="P_Au_Types_OptKey_TextOption.htm">TextOption</a></td><td><a href="T_Au_Types_KTextOption.htm">KTextOption.Characters</a></td><td><b>Keys</b> (send keys and Shift) or <b>Paste</b> (use clipboard).</td></tr><tr><td><a href="P_Au_Types_OptKey_PasteLength.htm">PasteLength</a></td><td>300.<br />            This option is used for 'text' arguments. If text length &gt;= this value, uses the clipboard.</td><td>&gt;=0.</td></tr><tr><td><a href="P_Au_Types_OptKey_PasteEnter.htm">PasteEnter</a></td><td>false.</td><td>true.<br />            This option is used for 'text' arguments when using the clipboard.</td></tr><tr><td><a href="P_Au_Types_OptKey_RestoreClipboard.htm">RestoreClipboard</a></td><td>true.<br />            Restore clipboard data (by default only text).<br />            This option is used for 'text' arguments when using the clipboard.</td><td>false.<br />            Don't restore clipboard data.</td></tr><tr><td><a href="P_Au_Types_OptKey_Hook.htm">Hook</a></td><td>null.</td><td>Callback function that can modify options depending on active window etc.</td></tr></table></div>
            When you don't want to use or modify <a href="P_Au_Opt_Key.htm">Opt.Key</a>, use a <a href="T_Au_Keyb.htm">Keyb</a> variable instead of this function. Example: <span class="code">new Keyb(null).Add("keys", "text").Send();</span>. More examples in <a href="M_Au_Keyb__ctor.htm">Keyb.#ctor</a> topic.<br /><br />            This function does not wait until the target app receives and processes sent keystrokes and text; there is no reliable way to know it. It just adds small delays depending on options (<a href="P_Au_Types_OptKey_SleepFinally.htm">SleepFinally</a> etc). If need, change options or add 'sleep' arguments or wait after calling this function. Sending text through the clipboard normally does not have these problems.<br /><br />            This function should not be used to automate windows of own thread. In most cases it works, but strange problems are possible, because while waiting it gets/dispatches all messages/events/etc. It's better to call it from another thread. See the last example.<br /><br />            Administrator and uiAccess processes don't receive keystrokes sent by standard user processes. See <a href="T_Au_Uac.htm">UAC</a>.<br /><br />            The mouse button codes/names (eg <a href="T_Au_Types_KKey.htm">KKey.MouseLeft</a>) cannot be used to click. For it can be used callback, like in the "Ctrl+click" example.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID4RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">//Press key Enter.</span>
Keyb.Key(<span class="highlight-literal">"Enter"</span>);

<span class="highlight-comment">//The same as above. The "Keyb." prefix is optional.</span>
Key(<span class="highlight-literal">"Enter"</span>);

<span class="highlight-comment">//Press keys Ctrl+A.</span>
Key(<span class="highlight-literal">"Ctrl+A"</span>);

<span class="highlight-comment">//Ctrl+Alt+Shift+Win+A.</span>
Key(<span class="highlight-literal">"Ctrl+Alt+Shift+Win+A"</span>);

<span class="highlight-comment">//Alt down, E, P, Alt up.</span>
Key(<span class="highlight-literal">"Alt+(E P)"</span>);

<span class="highlight-comment">//Alt down, E, P, Alt up.</span>
Key(<span class="highlight-literal">"Alt*down E P Alt*up"</span>);

<span class="highlight-comment">//Press key End, key Backspace 3 times, send text "Text".</span>
Key(<span class="highlight-literal">"End Back*3"</span>, <span class="highlight-literal">"Text"</span>);

<span class="highlight-comment">//Press Tab n times, send text "user", press Tab, send text "password", press Enter.</span>
<span class="highlight-keyword">int</span> n = <span class="highlight-number">5</span>;
Key($<span class="highlight-literal">"Tab*{n}"</span>, <span class="highlight-literal">"user"</span>, <span class="highlight-literal">"Tab"</span>, <span class="highlight-literal">"password"</span>, <span class="highlight-literal">"Enter"</span>);

<span class="highlight-comment">//Send text "Text".</span>
Text(<span class="highlight-literal">"Text"</span>);

<span class="highlight-comment">//Send text "user", press Tab, send text "password", press Enter.</span>
Text(<span class="highlight-literal">"user"</span>, <span class="highlight-literal">"Tab"</span>, <span class="highlight-literal">"password"</span>, <span class="highlight-literal">"Enter"</span>);

<span class="highlight-comment">//Press Ctrl+V, wait 500 ms, press Enter.</span>
Key(<span class="highlight-literal">"Ctrl+V"</span>, <span class="highlight-number">500</span>, <span class="highlight-literal">"Enter"</span>);

<span class="highlight-comment">//Press Ctrl+V, wait 500 ms, send text "Text".</span>
Key(<span class="highlight-literal">"Ctrl+V"</span>, <span class="highlight-number">500</span>, <span class="highlight-literal">""</span>, <span class="highlight-literal">"Text"</span>);

<span class="highlight-comment">//F2, Ctrl+K, Left 3 times, Space, A, comma, 5, numpad 5, Shift+A, B, C, BrowserBack.</span>
Key(<span class="highlight-literal">"F2 Ctrl+K Left*3 Space a , 5 #5 $abc"</span>, KKey.BrowserBack);

<span class="highlight-comment">//Shift down, A 3 times, Shift up.</span>
Key(<span class="highlight-literal">"Shift+A*3"</span>);

<span class="highlight-comment">//Shift down, A 3 times, Shift up.</span>
Key(<span class="highlight-literal">"Shift+"</span>, KKey.A, <span class="highlight-literal">"*3"</span>);

<span class="highlight-comment">//Shift down, A, wait 500 ms, B, Shift up.</span>
Key(<span class="highlight-literal">"Shift+("</span>, KKey.A, <span class="highlight-number">500</span>, KKey.B, <span class="highlight-literal">")"</span>);

<span class="highlight-comment">//Send keys and text slowly.</span>
Opt.Key.KeySpeed = Opt.Key.TextSpeed = <span class="highlight-number">50</span>;
Key(<span class="highlight-literal">"keys$:Space 123456789 Space 123456789 ,Space"</span>, <span class="highlight-literal">"text: 123456789 123456789\n"</span>);

<span class="highlight-comment">//Ctrl+click</span>
Action click = () =&gt; Mouse.Click();
Key(<span class="highlight-literal">"Ctrl+"</span>, click);

<span class="highlight-comment">//Ctrl+drag</span>
Action drag = () =&gt; { <span class="highlight-keyword">using</span>(Mouse.LeftDown()) Mouse.MoveRelative(<span class="highlight-number">0</span>, <span class="highlight-number">50</span>); };
Key(<span class="highlight-literal">"Ctrl+"</span>, drag);

<span class="highlight-comment">//Ctrl+drag, poor man's version</span>
Key(<span class="highlight-literal">"Ctrl*down"</span>);
<span class="highlight-keyword">using</span>(Mouse.LeftDown()) Mouse.MoveRelative(<span class="highlight-number">0</span>, <span class="highlight-number">50</span>);
Key(<span class="highlight-literal">"Ctrl*up"</span>);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACABA");</script>
            Show form and send keys/text to it when button clicked.
            <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> TestKeyOwnThread()
{
    <span class="highlight-keyword">var</span> f = <span class="highlight-keyword">new</span> Form();
    <span class="highlight-keyword">var</span> b = <span class="highlight-keyword">new</span> Button() { Text = <span class="highlight-literal">"Key"</span> };
    <span class="highlight-keyword">var</span> t = <span class="highlight-keyword">new</span> TextBox() { Top = <span class="highlight-number">100</span> };
    <span class="highlight-keyword">var</span> c = <span class="highlight-keyword">new</span> Button() { Text = <span class="highlight-literal">"Close"</span>, Left = <span class="highlight-number">100</span> };
    f.Controls.Add(b);
    f.Controls.Add(t);
    f.Controls.Add(c); f.CancelButton = c;

    b.Click += <span class="highlight-keyword">async</span> (unu, sed) =&gt;
    {
        <span class="highlight-comment">//Key("Tab", "text", 2000, "Esc"); //possible problems</span>
        <span class="highlight-keyword">await</span> Task.Run(() =&gt; { Key(<span class="highlight-literal">"Tab"</span>, <span class="highlight-literal">"text"</span>, <span class="highlight-number">2000</span>, <span class="highlight-literal">"Esc"</span>); }); <span class="highlight-comment">//use other thread</span>
    };

    f.ShowDialog();
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID5RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Au_NoClass.htm">NoClass Class</a></div><div class="seeAlsoStyle"><a href="N_Au.htm">Au Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"> </div></body></html>