<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>OutputServer Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="OutputServer class" /><meta name="System.Keywords" content="Au.Util.OutputServer class" /><meta name="Microsoft.Help.F1" content="Au.Util.OutputServer" /><meta name="Microsoft.Help.Id" content="T:Au.Util.OutputServer" /><meta name="Description" content="Receives messages sent by Output.Write and related methods (Print etc)." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Au.Util" /><meta name="file" content="T_Au_Util_OutputServer" /><meta name="guid" content="T_Au_Util_OutputServer" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>OutputServer Class</h1></td><td class="OH_tdRunningTitleColumn">Au Class Library</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="summary">
            Receives messages sent by <a href="M_Au_Output_Write.htm">Output.Write</a> and related methods (<b>Print</b> etc).
            </div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Inheritance Hierarchy</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="LST92372C22_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST92372C22_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">Au.Util<span id="LST92372C22_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST92372C22_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>OutputServer</span><br /><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Au_Util.htm">Au.Util</a><br />
    <strong>Assembly:</strong>
   Au (in Au.dll) Version: 1.0.0.0<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EACA_tabimgleft"> </div><div id="ID0EACA_tab1" class="OH_CodeSnippetContainerTabSolo">C#</div><div class="OH_CodeSnippetContainerTabRightActive" id="ID0EACA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">OutputServer</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACA");</script><p>The <span class="selflink">OutputServer</span> type exposes the following members.</p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Constructors</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><table class="members" id="constructorList"><tr><th class="ps_iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Au_Util_OutputServer__ctor.htm">OutputServer</a></td><td><div class="summary">Initializes a new instance of the <span class="selflink">OutputServer</span> class</div></td></tr></table><a href="#mainBody">Top</a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Properties</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><table class="members" id="propertyList"><tr><th class="ps_iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Au_Util_OutputServer_MessageCount.htm">MessageCount</a></td><td><div class="summary">
            Gets the count of messages in the queue.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Au_Util_OutputServer_NoNewline.htm">NoNewline</a></td><td><div class="summary">
            Let messages don't end with "\r\n".
            </div></td></tr></table><a href="#mainBody">Top</a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Methods</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><table class="members" id="methodList"><tr><th class="ps_iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Au_Util_OutputServer_Finalize.htm">Finalize</a></td><td><div class="summary">
            Calls Stop.
            </div> (Overrides <a href="http://msdn2.microsoft.com/en-us/library/4k87zsw7" target="_blank">Object<span id="LST92372C22_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST92372C22_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Finalize<span id="LST92372C22_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST92372C22_3?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Au_Util_OutputServer_GetMessage.htm">GetMessage</a></td><td><div class="summary">            Gets next message and removes from the queue.<br />            Returns false if there are no messages.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Au_Util_OutputServer_SetNotifications.htm">SetNotifications</a></td><td><div class="summary">
            Sets callback function, to be notified about server events.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Au_Util_OutputServer_Start.htm">Start</a></td><td><div class="summary">            Starts server.<br />            Returns false if server already exists (if global - in any process).</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Au_Util_OutputServer_Stop.htm">Stop</a></td><td><div class="summary">
            Stops server.
            </div></td></tr></table><a href="#mainBody">Top</a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div>            If server is global, clients can be multiple appdomains and processes, including this. Else only this appdomain.<br />            Works asynchronously, to make writing messages faster.<br />            When a client writes a message, the message arrives to the server with some delay and is placed in a queue.<br />            You then can get/remove messages from the queue (call <a href="M_Au_Util_OutputServer_GetMessage.htm">Util.OutputServer.GetMessage</a>) and display them in a window (for example).<br />            You can be notified about new messages.<br /><br />            Recommended setup (see example):<br />            1. When your application starts, create an <b>OutputServer</b> instance and assign to a static variable. Call <a href="M_Au_Util_OutputServer_Start.htm">Util.OutputServer.Start</a>.<br />            2. When your application creates its output window, call <a href="M_Au_Util_OutputServer_SetNotifications.htm">Util.OutputServer.SetNotifications</a> to register callback function.<br />            3. In the callback function get/remove/display all new messages.<br />            4. Call <a href="M_Au_Util_OutputServer_Stop.htm">Util.OutputServer.Stop</a> when closing the window. Optional but recommended.
            <div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div>
            Simple program with output window.
            <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">class</span> OutputFormExample :Form
{
    TextBox _tb;

    <span class="highlight-keyword">public</span> OutputFormExample()
    {
        _tb = <span class="highlight-keyword">new</span> TextBox();
        _tb.ReadOnly = <span class="highlight-keyword">true</span>;
        _tb.Multiline = <span class="highlight-keyword">true</span>;
        _tb.ScrollBars = ScrollBars.Both;
        _tb.WordWrap = <span class="highlight-keyword">false</span>;
        _tb.Dock = DockStyle.Fill;
        _tb.TabStop = <span class="highlight-keyword">false</span>;
        <span class="highlight-keyword">this</span>.Controls.Add(_tb);

        _os.SetNotifications(_ProcessMessages, <span class="highlight-keyword">this</span>);
    }

    <span class="highlight-keyword">void</span> _ProcessMessages()
    {
        <span class="highlight-keyword">while</span>(_os.GetMessage(<span class="highlight-keyword">out</span> <span class="highlight-keyword">var</span> m)) {
            <span class="highlight-keyword">switch</span>(m.Type) {
            <span class="highlight-keyword">case</span> Au.Util.OutputServer.MessageType.Clear:
                _tb.Clear();
                <span class="highlight-keyword">break</span>;
            <span class="highlight-keyword">case</span> Au.Util.OutputServer.MessageType.Write:
                <span class="highlight-comment">//_tb.AppendText(m.Text);</span>
                _tb.AppendText($<span class="highlight-literal">"{DateTime.FromFileTimeUtc(m.TimeUtc).ToLocalTime()}  {m.Domain}  {m.Text}"</span>);
                <span class="highlight-keyword">break</span>;
            }
        }
    }

    <span class="highlight-keyword">static</span> Au.Util.OutputServer _os = <span class="highlight-keyword">new</span> Au.Util.OutputServer(isGlobal: <span class="highlight-keyword">false</span>);

    [STAThread]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
    {
        _os.Start();

        <span class="highlight-comment">//test Print and Clear, before and after creating window</span>
        Output.IgnoreConsole = <span class="highlight-keyword">true</span>;
        Print(<span class="highlight-literal">"test before setting notifications"</span>);
        Task.Run(() =&gt; { <span class="highlight-number">1</span>.s(); Print(<span class="highlight-literal">"test after"</span>); <span class="highlight-number">1</span>.s(); Output.Clear(); <span class="highlight-number">1</span>.s(); Print(<span class="highlight-literal">"test after Clear"</span>); });

        Application.Run(<span class="highlight-keyword">new</span> OutputFormExample());
        _os.Stop();
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script><div class="OH_CollapsibleAreaRegion" id="seeAlsoSection"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Au_Util.htm">Au.Util Namespace</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"> </div></body></html>