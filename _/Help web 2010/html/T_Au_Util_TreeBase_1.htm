<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>TreeBase(T) Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="TreeBase%3CT%3E class" /><meta name="System.Keywords" content="Au.Util.TreeBase%3CT%3E class" /><meta name="System.Keywords" content="TreeBase(Of T) class" /><meta name="System.Keywords" content="Au.Util.TreeBase(Of T) class" /><meta name="Microsoft.Help.F1" content="Au.Util.TreeBase`1" /><meta name="Microsoft.Help.Id" content="T:Au.Util.TreeBase`1" /><meta name="Description" content="Base class for tree classes. The tree can be loaded/saved as XML." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Au.Util" /><meta name="file" content="T_Au_Util_TreeBase_1" /><meta name="guid" content="T_Au_Util_TreeBase_1" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>TreeBase<span id="LST309303BC_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_0?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><span class="typeparameter">T</span><span id="LST309303BC_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_1?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script> Class</h1></td><td class="OH_tdRunningTitleColumn">Au Class Library</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="summary">            Base class for tree classes.<br />            The tree can be loaded/saved as XML.</div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Inheritance Hierarchy</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="LST309303BC_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">Au.Util<span id="LST309303BC_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>TreeBase<span id="LST309303BC_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_4?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST309303BC_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_5?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></span><br /><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Au_Util.htm">Au.Util</a><br />
    <strong>Assembly:</strong>
   Au (in Au.dll) Version: 1.0.0.0<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EACA_tabimgleft"> </div><div id="ID0EACA_tab1" class="OH_CodeSnippetContainerTabSolo">C#</div><div class="OH_CodeSnippetContainerTabRightActive" id="ID0EACA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="identifier">TreeBase</span>&lt;T&gt;
<span class="keyword">where</span> T : <span class="identifier">TreeBase</span>&lt;T&gt;
</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACA");</script><h4 class="subHeading">Type Parameters</h4><dl><dt><span class="parameter">T</span></dt><dd /></dl><p>The <span class="selflink">TreeBase<span id="LST309303BC_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_6?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST309303BC_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_7?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></span> type exposes the following members.</p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Constructors</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><table class="members" id="constructorList"><tr><th class="ps_iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Au_Util_TreeBase_1__ctor.htm">TreeBase<span id="LST309303BC_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_8?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST309303BC_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_9?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary">Initializes a new instance of the <span class="selflink">TreeBase<span id="LST309303BC_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_10?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST309303BC_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_11?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></span> class</div></td></tr></table><a href="#mainBody">Top</a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Properties</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><table class="members" id="propertyList"><tr><th class="ps_iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Au_Util_TreeBase_1_FirstChild.htm">FirstChild</a></td><td><div class="summary">
            Gets the first child node, or null if none.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Au_Util_TreeBase_1_HasChildren.htm">HasChildren</a></td><td><div class="summary">
            Returns true if this node has child nodes.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Au_Util_TreeBase_1_HasParent.htm">HasParent</a></td><td><div class="summary">
            Returns true if <a href="P_Au_Util_TreeBase_1_Parent.htm">Util.TreeBase</a> is not null.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Au_Util_TreeBase_1_LastChild.htm">LastChild</a></td><td><div class="summary">
            Gets the last child node, or null if none.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Au_Util_TreeBase_1_Level.htm">Level</a></td><td><div class="summary">
            Gets the number of ancestors (parent, its parent and so on).
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Au_Util_TreeBase_1_Next.htm">Next</a></td><td><div class="summary">
            Gets next sibling node, or null if none.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Au_Util_TreeBase_1_Parent.htm">Parent</a></td><td><div class="summary">
            Returns the parent node. Can be null.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Au_Util_TreeBase_1_Previous.htm">Previous</a></td><td><div class="summary">
            Gets previous sibling node, or null if none.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Au_Util_TreeBase_1_RootAncestor.htm">RootAncestor</a></td><td><div class="summary">
            Returns the root ancestor node. Its <a href="P_Au_Util_TreeBase_1_Parent.htm">Util.TreeBase</a> is null.<br />            Returns this node if its <b>Parent</b> is null.
            </div></td></tr></table><a href="#mainBody">Top</a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Methods</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><table class="members" id="methodList"><tr><th class="ps_iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Au_Util_TreeBase_1_AddChild.htm">AddChild</a></td><td><div class="summary">
            Adds node n to this node as a child.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Au_Util_TreeBase_1_AddSibling.htm">AddSibling</a></td><td><div class="summary">
            Inserts node n before or after this node as a sibling.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Au_Util_TreeBase_1_Ancestors.htm">Ancestors</a></td><td><div class="summary">            Gets ancestor nodes (parent, its parent and so on).<br />            The order is from <a href="P_Au_Util_TreeBase_1_Parent.htm">Util.TreeBase</a> to <a href="P_Au_Util_TreeBase_1_RootAncestor.htm">Util.TreeBase</a>.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Au_Util_TreeBase_1_AncestorsReverse.htm">AncestorsReverse</a></td><td><div class="summary">
            Gets ancestor nodes in reverse order than <a href="M_Au_Util_TreeBase_1_Ancestors.htm">Util.TreeBase</a>.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Au_Util_TreeBase_1_Children.htm">Children</a></td><td><div class="summary">
            Gets all direct child nodes.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Au_Util_TreeBase_1_Descendants.htm">Descendants</a></td><td><div class="summary">
            Gets all descendant nodes (direct children, their children and so on).
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Au_Util_TreeBase_1_IsAncestorOf.htm">IsAncestorOf</a></td><td><div class="summary">
            Returns true if this node is an ancestor of node n.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Au_Util_TreeBase_1_IsDescendantOf.htm">IsDescendantOf</a></td><td><div class="summary">
            Returns true if this node is a descendant of node n.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Au_Util_TreeBase_1_Remove.htm">Remove</a></td><td><div class="summary">
            Removes this node from its parent.
            </div></td></tr><tr data="protected;static;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Au_Util_TreeBase_1_XmlLoad.htm">XmlLoad(String, TreeBase<span id="LST309303BC_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_12?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LST309303BC_13"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_13?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><span id="LST309303BC_14"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_14?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>XmlNodeReader)</a></td><td><div class="summary">            Loads XML file and creates tree of nodes from it.<br />            Returns the root node.</div></td></tr><tr data="protected;static;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Au_Util_TreeBase_1_XmlLoad_1.htm">XmlLoad(XmlReader, TreeBase<span id="LST309303BC_15"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_15?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LST309303BC_16"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_16?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><span id="LST309303BC_17"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_17?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>XmlNodeReader)</a></td><td><div class="summary">            Reads XML and creates tree of nodes.<br />            Returns the root node.</div></td></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Au_Util_TreeBase_1_XmlSave_1.htm">XmlSave(XmlWriter, TreeBase<span id="LST309303BC_18"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_18?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LST309303BC_19"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_19?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><span id="LST309303BC_20"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_20?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>XmlNodeWriter, IEnumerable<span id="LST309303BC_21"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_21?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LST309303BC_22"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_22?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a></td><td><div class="summary">
            Writes tree of nodes (this and descendants) to an <a href="http://msdn2.microsoft.com/en-us/library/5y8188ze" target="_blank">System.Xml.XmlWriter</a>.
            </div></td></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Au_Util_TreeBase_1_XmlSave.htm">XmlSave(String, TreeBase<span id="LST309303BC_23"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_23?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LST309303BC_24"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_24?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><span id="LST309303BC_25"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_25?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>XmlNodeWriter, XmlWriterSettings, IEnumerable<span id="LST309303BC_26"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_26?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LST309303BC_27"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST309303BC_27?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a></td><td><div class="summary">
            Saves tree of nodes (this and descendants) to an XML file.
            </div></td></tr></table><a href="#mainBody">Top</a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div>
            Implemented in the same way as <a href="http://msdn2.microsoft.com/en-us/library/bb353736" target="_blank">System.Xml.Linq.XContainer</a>.
            <div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div>
            Shows how to declare a TreeBase-derived class, load tree of nodes from an XML file, print descendant nodes, save the tree to an XML file.
            <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">/*/ r System.Xml */</span>
<span class="highlight-keyword">using</span> System.Xml;

<span class="highlight-keyword">class</span> MyTree :Au.Util.TreeBase&lt;MyTree&gt;
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Name { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> Id { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> IsFolder { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }

    <span class="highlight-keyword">public</span> MyTree(<span class="highlight-keyword">string</span> name, <span class="highlight-keyword">int</span> id, <span class="highlight-keyword">bool</span> isFolder) { Name = name; Id = id; IsFolder = isFolder; }

    <span class="highlight-comment">//XML element -&gt; MyTree object</span>
    MyTree(XmlReader x, MyTree parent)
    {
        <span class="highlight-keyword">if</span>(parent == <span class="highlight-keyword">null</span>) { <span class="highlight-comment">//the root XML element</span>
            <span class="highlight-keyword">if</span>(x.Name != <span class="highlight-literal">"example"</span>) <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> ArgumentException(<span class="highlight-literal">"XML root element name must be example"</span>);
            IsFolder = <span class="highlight-keyword">true</span>;
        } <span class="highlight-keyword">else</span> {
            <span class="highlight-keyword">switch</span>(x.Name) {
            <span class="highlight-keyword">case</span> <span class="highlight-literal">"e"</span>: <span class="highlight-keyword">break</span>;
            <span class="highlight-keyword">case</span> <span class="highlight-literal">"f"</span>: IsFolder = <span class="highlight-keyword">true</span>; <span class="highlight-keyword">break</span>;
            <span class="highlight-keyword">default</span>: <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> ArgumentException(<span class="highlight-literal">"XML element name must be e or f"</span>);
            }
<span class="highlight-preprocessor">#if</span> <span class="highlight-keyword">true</span> <span class="highlight-comment">//two ways of reading attributes</span>
            Name = x[<span class="highlight-literal">"name"</span>];
            Id = x[<span class="highlight-literal">"id"</span>].ToInt_();
<span class="highlight-preprocessor">#else</span>
            <span class="highlight-keyword">while</span>(x.MoveToNextAttribute()) {
                <span class="highlight-keyword">var</span> v = x.Value;
                <span class="highlight-keyword">switch</span>(x.Name) {
                <span class="highlight-keyword">case</span> <span class="highlight-literal">"name"</span>: Name = v; <span class="highlight-keyword">break</span>;
                <span class="highlight-keyword">case</span> <span class="highlight-literal">"id"</span>: Id = v.ToInt_(); <span class="highlight-keyword">break</span>;
                }
            }
<span class="highlight-preprocessor">#endif</span>
            <span class="highlight-keyword">if</span>(Empty(Name)) <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> ArgumentException(<span class="highlight-literal">"no name attribute in XML"</span>);
            <span class="highlight-keyword">if</span>(Id == <span class="highlight-number">0</span>) <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> ArgumentException(<span class="highlight-literal">"no id attribute in XML"</span>);
        }
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> MyTree Load(<span class="highlight-keyword">string</span> file) =&gt; XmlLoad(file, (x, p) =&gt; <span class="highlight-keyword">new</span> MyTree(x, p));

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Save(<span class="highlight-keyword">string</span> file) =&gt; XmlSave(file, (x, n) =&gt; n._XmlWrite(x));

    <span class="highlight-comment">//MyTree object -&gt; XML element</span>
    <span class="highlight-keyword">void</span> _XmlWrite(XmlWriter x)
    {
        <span class="highlight-keyword">if</span>(Parent == <span class="highlight-keyword">null</span>) {
            x.WriteStartElement(<span class="highlight-literal">"example"</span>);
        } <span class="highlight-keyword">else</span> {
            x.WriteStartElement(IsFolder ? <span class="highlight-literal">"f"</span> : <span class="highlight-literal">"e"</span>);
            x.WriteAttributeString(<span class="highlight-literal">"name"</span>, Name);
            x.WriteAttributeString(<span class="highlight-literal">"id"</span>, Id.ToString());
        }
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> ToString() =&gt; $<span class="highlight-literal">"{new string(' ', Level)}{(IsFolder ? 'f' : 'e')} {Name} ({Id})"</span>;
}

<span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> TNodeExample()
{
    <span class="highlight-comment">/*
    &lt;example&gt;
      &lt;e name="one" id="1" /&gt;
      &lt;f name="two" id="112"&gt;
        &lt;e name="three" id="113" /&gt;
        &lt;e name="four" id="114" /&gt;
        &lt;f name="five" id="120"&gt;
          &lt;e name="six" id="121" /&gt;
          &lt;e name="seven" id="122" /&gt;
        &lt;/f&gt;
      &lt;/f&gt;
      &lt;f name="eight" id="217" /&gt;
      &lt;e name="ten" id="144" /&gt;
    &lt;/example&gt;
    */</span>

    <span class="highlight-keyword">var</span> x = MyTree.Load(<span class="highlight-literal">@"Q:\test\example.xml"</span>);
    <span class="highlight-keyword">foreach</span>(MyTree n <span class="highlight-keyword">in</span> x.Descendants(<span class="highlight-keyword">true</span>)) Print(n);
    <span class="highlight-comment">//Print(x.Descendants().FirstOrDefault(k =&gt; k.Name == "seven")); //find a descendant</span>
    <span class="highlight-comment">//Print(x.Descendants().Where(k =&gt; k.Level &gt; 2)); //find some descendants</span>
    x.Save(<span class="highlight-literal">@"Q:\test\example2.xml"</span>);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script><div class="OH_CollapsibleAreaRegion" id="seeAlsoSection"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Au_Util.htm">Au.Util Namespace</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"> </div></body></html>