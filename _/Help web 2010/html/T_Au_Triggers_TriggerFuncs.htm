<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>TriggerFuncs Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="TriggerFuncs class" /><meta name="System.Keywords" content="Au.Triggers.TriggerFuncs class" /><meta name="Microsoft.Help.F1" content="Au.Triggers.TriggerFuncs" /><meta name="Microsoft.Help.Id" content="T:Au.Triggers.TriggerFuncs" /><meta name="Description" content="Allows to define custom scopes/contexts/conditions for triggers." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Au.Triggers" /><meta name="file" content="T_Au_Triggers_TriggerFuncs" /><meta name="guid" content="T_Au_Triggers_TriggerFuncs" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>TriggerFuncs Class</h1></td><td class="OH_tdRunningTitleColumn">Au Class Library</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="summary">
             Allows to define custom scopes/contexts/conditions for triggers.
             </div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Inheritance Hierarchy</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="LST62CE40D8_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST62CE40D8_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">Au.Triggers<span id="LST62CE40D8_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST62CE40D8_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>TriggerFuncs</span><br /><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Au_Triggers.htm">Au.Triggers</a><br />
    <strong>Assembly:</strong>
   Au (in Au.dll) Version: 1.0.0.0<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EACA_tabimgleft"> </div><div id="ID0EACA_tab1" class="OH_CodeSnippetContainerTabSolo">C#</div><div class="OH_CodeSnippetContainerTabRightActive" id="ID0EACA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">TriggerFuncs</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACA");</script><p>The <span class="selflink">TriggerFuncs</span> type exposes the following members.</p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Properties</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><table class="members" id="propertyList"><tr><th class="ps_iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Au_Triggers_TriggerFuncs_FollowingTriggers.htm">FollowingTriggers</a></td><td><div class="summary">            Sets callback function for multiple triggers added afterwards.<br />            If the trigger has a window scope, the callback function is called after evaluating the window.<br />            This function is used with triggers of all types.<br />            The value can be null.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Au_Triggers_TriggerFuncs_FollowingTriggersBeforeWindow.htm">FollowingTriggersBeforeWindow</a></td><td><div class="summary">            Sets callback function for multiple triggers added afterwards.<br />            If the trigger has a window scope, the callback function is called before evaluating the window.<br />            This function is used with triggers of these types: hotkey, autotext, mouse.<br />            The value can be null.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Au_Triggers_TriggerFuncs_NextTrigger.htm">NextTrigger</a></td><td><div class="summary">            Sets callback function for the next added trigger.<br />            If the trigger has a window scope, the callback function is called after evaluating the window.<br />            This function is used with triggers of all types.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Au_Triggers_TriggerFuncs_NextTriggerBeforeWindow.htm">NextTriggerBeforeWindow</a></td><td><div class="summary">            Sets callback function for the next added trigger.<br />            If the trigger has a window scope, the callback function is called before evaluating the window.<br />            This function is used with triggers of these types: hotkey, autotext, mouse.</div></td></tr></table><a href="#mainBody">Top</a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div>
             Similar to <a href="T_Au_Triggers_TriggerScopes.htm">Triggers.TriggerScopes</a> (code like <span class="code">Triggers.Of.Window(...);</span>), but allows to define any scope/condition/etc, not just the active window.<br /><br />             To define a scope, you create a callback function (CF) that checks some conditions and returns true to allow the trigger action to run or false to not allow. Assign the CF to some property of this class and then add the trigger, like in the examples below. The CF will be assigned to the trigger and called when need.<br /><br />             You may ask: why to use CF when the trigger action (TA) can do the same?<br />             1. CF runs synchronously; if it returns false, the trigger key or mouse button message is passed to other triggers, hooks and apps. TA cannot do it reliably; it runs asynchronously, and the message is already stealed from other apps/triggers/hooks.<br />             2. CF is faster to call. It is simply called in the same thread that processes trigger messages. TA runs in another thread.<br />             3. A CF can be assigned to multiple triggers with a single line of code. Don't need to add the same code in all trigger actions.<br /><br />             A trigger can have up to 4 CF delegates and a window scope (<span class="code">Triggers.Of...</span>). They are called in this order: CF assigned through <a href="P_Au_Triggers_TriggerFuncs_FollowingTriggersBeforeWindow.htm">FollowingTriggersBeforeWindow</a>, <a href="P_Au_Triggers_TriggerFuncs_NextTriggerBeforeWindow.htm">NextTriggerBeforeWindow</a>, window scope, <a href="P_Au_Triggers_TriggerFuncs_NextTrigger.htm">NextTrigger</a>, <a href="P_Au_Triggers_TriggerFuncs_FollowingTriggers.htm">FollowingTriggers</a>. The <b>NextX</b> properties assign the CF to the next single trigger. The <b>FollowingX</b> properties assign the CF to all following triggers until you assign another CF or null. If several are assigned, the trigger action runs only if all CF return true and the window scope matches. The <b>XBeforeWindow</b> properties are used only with hotkey, autotext and mouse triggers.<br /><br />             All CF must be as fast as possible. Slow CF can make triggers slower (or even all keyboard/mouse input); also may cause warnings and trigger failures. A big problem is the low-level hooks timeout that Windows applies to trigger hooks; see <a href="P_Au_Util_WinHook_LowLevelHooksTimeout.htm">Util.WinHook.LowLevelHooksTimeout</a>. A related problem - slow JIT and loading of assemblies, which can make the CF too slow the first time; in some rare cases may even need to preload assemblies or pre-JIT functions to avoid the timeout warning.<br /><br />             In CF never use functions that generate keyboard or mouse events or activate windows.<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">//examples of assigning a CF to a single trigger</span>
Triggers.FuncOf.NextTrigger = o =&gt; Keyb.IsCapsLock; <span class="highlight-comment">//o =&gt; Keyb.IsCapsLock is the callback function (lambda)</span>
Triggers.Hotkey[<span class="highlight-literal">"Ctrl+K"</span>] = o =&gt; Print(<span class="highlight-literal">"action: Ctrl+K while CapsLock is on"</span>);
Triggers.FuncOf.NextTrigger = o =&gt; { <span class="highlight-keyword">var</span> v = o <span class="highlight-keyword">as</span> HotkeyTriggerArgs; Print($<span class="highlight-literal">"func: mod={v.Mod}"</span>); <span class="highlight-keyword">return</span> Mouse.IsPressed(MButtons.Left); };
Triggers.Hotkey[<span class="highlight-literal">"Ctrl+Shift?+B"</span>] = o =&gt; Print(<span class="highlight-literal">"action: mouse left button + Ctrl+B or Ctrl+Shift+B"</span>);

<span class="highlight-comment">//examples of assigning a CF to multiple triggers</span>
Triggers.FuncOf.FollowingTriggers = o =&gt; { <span class="highlight-keyword">var</span> v = o <span class="highlight-keyword">as</span> HotkeyTriggerArgs; Print(<span class="highlight-literal">"func"</span>, v.Trigger); <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>; };
Triggers.Hotkey[<span class="highlight-literal">"Ctrl+F8"</span>] = o =&gt; Print(<span class="highlight-literal">"action: "</span> + o.Trigger);
Triggers.Hotkey[<span class="highlight-literal">"Ctrl+F9"</span>] = o =&gt; Print(<span class="highlight-literal">"action: "</span> + o.Trigger);
Triggers.FuncOf.FollowingTriggers = <span class="highlight-keyword">null</span>; <span class="highlight-comment">//stop assigning the CF to triggers added afterwards</span>

<span class="highlight-comment">//sometimes all work can be done in CF and you don't need the trigger action</span>
Triggers.FuncOf.NextTrigger = o =&gt; { <span class="highlight-keyword">var</span> v = o <span class="highlight-keyword">as</span> HotkeyTriggerArgs; Print(<span class="highlight-literal">"func: "</span> + v.Trigger); <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>; };
Triggers.Hotkey[<span class="highlight-literal">"Ctrl+F12"</span>] = <span class="highlight-keyword">null</span>;

Triggers.Run();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script><div class="OH_CollapsibleAreaRegion" id="seeAlsoSection"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Au_Triggers.htm">Au.Triggers Namespace</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"> </div></body></html>